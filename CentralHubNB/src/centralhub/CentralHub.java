/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CentalHub.java
 *
 * Created on Dec 1, 2012, 10:35:10 PM
 */
package centralhub;

import java.util.logging.Level;
import java.util.logging.Logger;
import jssc.*;
/**
 *
 * @author brian
 */
public class CentralHub extends javax.swing.JFrame {

    public String listOfPorts[];
    public SerialPort vexPort;
    private String USB0 = "/dev/ttyUSB0";
    private GPSServer gpsServer;
    private CommandServer commandServer;
    
    /** Creates new form CentalHub */
    public CentralHub() {
        initComponents();
        fillSerialPortBox();
        if(comboBoxPorts.getSelectedItem() == USB0)
        {
            openVexPort();
        }
        try
        {
            commandServer = new CommandServer();
            //commandServer.setupPort();
            //commandServer.run();
        }
        catch(Exception e)
        {
            
        }
        
        
    }
   

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSliderVelocity = new javax.swing.JSlider();
        jbtnForward = new javax.swing.JButton();
        jbtnRight = new javax.swing.JButton();
        jbtnBackward = new javax.swing.JButton();
        jbtnLeft = new javax.swing.JButton();
        jbtnStop = new javax.swing.JButton();
        jbtnOpenPort = new javax.swing.JButton();
        comboBoxPorts = new javax.swing.JComboBox();
        jTextFieldDirect = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jSliderVelocity.setMajorTickSpacing(10);
        jSliderVelocity.setMaximum(127);
        jSliderVelocity.setPaintLabels(true);
        jSliderVelocity.setToolTipText("Velocity");
        jSliderVelocity.setValue(48);
        jSliderVelocity.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderVelocityStateChanged(evt);
            }
        });
        jSliderVelocity.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jSliderVelocityPropertyChange(evt);
            }
        });

        jbtnForward.setText("Forward");
        jbtnForward.setToolTipText("Forward");
        jbtnForward.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jbtnForwardMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jbtnForwardMouseReleased(evt);
            }
        });

        jbtnRight.setText("Right");
        jbtnRight.setToolTipText("Right");
        jbtnRight.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jbtnRightMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jbtnRightMouseReleased(evt);
            }
        });

        jbtnBackward.setText("Backward");
        jbtnBackward.setToolTipText("Backward");
        jbtnBackward.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jbtnBackwardMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jbtnBackwardMouseReleased(evt);
            }
        });

        jbtnLeft.setText("Left");
        jbtnLeft.setToolTipText("Left");
        jbtnLeft.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jbtnLeftMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jbtnLeftMouseReleased(evt);
            }
        });

        jbtnStop.setText("Stop");
        jbtnStop.setToolTipText("Stop");
        jbtnStop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jbtnStopMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jbtnStopMouseReleased(evt);
            }
        });

        jbtnOpenPort.setText("Open Port");
        jbtnOpenPort.setToolTipText("Open Serial Port");
        jbtnOpenPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnOpenPortActionPerformed(evt);
            }
        });

        comboBoxPorts.setToolTipText("");
        comboBoxPorts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxPortsActionPerformed(evt);
            }
        });

        jTextFieldDirect.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldDirect.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldDirectKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSliderVelocity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jbtnLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jbtnStop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jbtnBackward, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jbtnForward, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(jbtnRight, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jbtnOpenPort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboBoxPorts, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldDirect, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSliderVelocity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbtnForward, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnStop, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnRight, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jbtnBackward, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnOpenPort)
                    .addComponent(comboBoxPorts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldDirect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jbtnForwardMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbtnForwardMousePressed
    if(vexPort.isOpened())
    {
        byte character = 'w';
        try {
            vexPort.writeByte(character);
        } catch (SerialPortException ex) {
            Logger.getLogger(CentralHub.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}//GEN-LAST:event_jbtnForwardMousePressed

private void comboBoxPortsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxPortsActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_comboBoxPortsActionPerformed

private void jTextFieldDirectKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldDirectKeyTyped
    char character = evt.getKeyChar();
    try
    {
        if(vexPort.isOpened())
        {
           vexPort.writeByte((byte)character);
           
        }
    }
    catch(Exception e)
    {
       e.printStackTrace();
    }
    jTextFieldDirect.setText("");
        
    
}//GEN-LAST:event_jTextFieldDirectKeyTyped

private void jbtnOpenPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnOpenPortActionPerformed
    openVexPort();
    try
    {
    
    commandServer.setupPort();
    commandServer.run();
    }
    catch(Exception e)
    {
        
    }
            
}//GEN-LAST:event_jbtnOpenPortActionPerformed

    private void jbtnForwardMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbtnForwardMouseReleased
        if(vexPort.isOpened())
        {
            byte character = 'b';
            try {
                vexPort.writeByte(character);
            } catch (SerialPortException ex) {
                Logger.getLogger(CentralHub.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jbtnForwardMouseReleased

    private void jSliderVelocityPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jSliderVelocityPropertyChange
       
    }//GEN-LAST:event_jSliderVelocityPropertyChange

    private void jSliderVelocityStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderVelocityStateChanged
        byte data[] = new byte[2];
        if(vexPort != null)
        {
            if(vexPort.isOpened() && !jSliderVelocity.getValueIsAdjusting())
            {
                try {                    
                    data[0] = 'S';
                    data[1] = (byte) jSliderVelocity.getValue();
                    vexPort.writeBytes(data);
                } catch (SerialPortException ex) {
                    Logger.getLogger(CentralHub.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_jSliderVelocityStateChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if(vexPort != null)
        {
            if(vexPort.isOpened())
            {
                try {
                vexPort.closePort();
            
                } 
                catch (SerialPortException ex) {
                Logger.getLogger(CentralHub.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
        commandServer.closePorts();
               
    }//GEN-LAST:event_formWindowClosing

    private void jbtnStopMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbtnStopMousePressed
        if(vexPort.isOpened())
        {
            byte character = 'b';
            try {
                vexPort.writeByte(character);
            } catch (SerialPortException ex) {
                Logger.getLogger(CentralHub.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jbtnStopMousePressed

    private void jbtnRightMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbtnRightMousePressed
        if(vexPort.isOpened())
        {
            byte character = 'd';
            try {
                vexPort.writeByte(character);
            } catch (SerialPortException ex) {
                Logger.getLogger(CentralHub.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jbtnRightMousePressed

    private void jbtnRightMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbtnRightMouseReleased
        if(vexPort.isOpened())
        {
            byte character = 'b';
            try {
                vexPort.writeByte(character);
            } catch (SerialPortException ex) {
                Logger.getLogger(CentralHub.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jbtnRightMouseReleased

    private void jbtnStopMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbtnStopMouseReleased
        if(vexPort.isOpened())
        {
            byte character = 'b';
            try {
                vexPort.writeByte(character);
            } catch (SerialPortException ex) {
                Logger.getLogger(CentralHub.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jbtnStopMouseReleased

    private void jbtnLeftMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbtnLeftMousePressed
        if(vexPort.isOpened())
        {
            byte character = 'a';
            try {
                vexPort.writeByte(character);
            } catch (SerialPortException ex) {
                Logger.getLogger(CentralHub.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jbtnLeftMousePressed

    private void jbtnLeftMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbtnLeftMouseReleased
        if(vexPort.isOpened())
        {
            byte character = 'b';
            try {
                vexPort.writeByte(character);
            } catch (SerialPortException ex) {
                Logger.getLogger(CentralHub.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jbtnLeftMouseReleased

    private void jbtnBackwardMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbtnBackwardMousePressed
        if(vexPort.isOpened())
        {
            byte character = 's';
            try {
                vexPort.writeByte(character);
            } catch (SerialPortException ex) {
                Logger.getLogger(CentralHub.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jbtnBackwardMousePressed

    private void jbtnBackwardMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbtnBackwardMouseReleased
        if(vexPort.isOpened())
        {
            byte character = 'b';
            try {
                vexPort.writeByte(character);
            } catch (SerialPortException ex) {
                Logger.getLogger(CentralHub.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jbtnBackwardMouseReleased

private void fillSerialPortBox()
{
    boolean hasUSB0 = false;
    
    try
    {
        listOfPorts = SerialPortList.getPortNames();
        int N = listOfPorts.length;
        if(N>0)
        {
            for(int i=0;i<N;i++)
            {
                comboBoxPorts.addItem(listOfPorts[i]);
                if(listOfPorts[i].equalsIgnoreCase(USB0))
                    hasUSB0 = true;

            }
            if(hasUSB0)
            {
                comboBoxPorts.setSelectedItem(USB0);
                openVexPort();
            }
        }
    }
    catch(Exception e)
    {
        System.out.println("Port search failed, maybe?");
    }
    
}

private void openVexPort()
{
    
    // to open the port may require root priveleges /* chmod -R 777 /dev/ttyUSB0 */
    byte character = '0';
    if(comboBoxPorts.getSelectedItem() != "")
    {
        if(vexPort != null)
        {
            try
            {
                if(vexPort.isOpened())
                    vexPort.closePort();
                
            } 
            catch (SerialPortException e)
            {
                // TODO Auto-generated catch block
                e.printStackTrace();
                
            }
        }
        try
        {
            vexPort = new SerialPort((String) comboBoxPorts.getSelectedItem());
            vexPort.openPort();
            vexPort.setParams(SerialPort.BAUDRATE_115200, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);
            if(vexPort.isOpened())
            {
                System.out.println("Port " + vexPort.getPortName() + " opened successfully!");
                vexPort.writeByte(character);
            }
        } 
        catch (SerialPortException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            System.out.println("Port open failed, maybe?");
        }
        
    }	
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CentralHub.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CentralHub.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CentralHub.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CentralHub.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new CentralHub().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comboBoxPorts;
    private javax.swing.JSlider jSliderVelocity;
    private javax.swing.JTextField jTextFieldDirect;
    private javax.swing.JButton jbtnBackward;
    private javax.swing.JButton jbtnForward;
    private javax.swing.JButton jbtnLeft;
    private javax.swing.JButton jbtnOpenPort;
    private javax.swing.JButton jbtnRight;
    private javax.swing.JButton jbtnStop;
    // End of variables declaration//GEN-END:variables
}
