gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 12-2-2012  03:58:30
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.0 #5416 (Feb  3 2010) (UNIX)
                                           ; This file was generated Sun Dec  2 03:58:30 2012
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f8520
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _RIGHT_MOTOR_POWER
                                           	global _LEFT_MOTOR_POWER
                                           	global _integerByte
                                           	global _stringOfChars
                                           	global _distance_cm_per_15_ticks
                                           	global _rotation_circumference_cm
                                           	global _wheel_circumference_cm
                                           	global _rotation_deg_per_tick
                                           	global _main
                                           	global _custom_init
                                           	global _rc_routine
                                           	global _tank_drive_routine
                                           	global _arcade_drive_routine
                                           	global _autonomous_routine0
                                           	global _reset_usart
                                           	global _usart_data_available
                                           	global _usart_get_byte_available
                                           	global _usart_get_byte
                                           	global _serial_control
                                           	global _heartbeat
                                           	global _bump_front_left
                                           	global _bump_front_right
                                           	global _bump_front
                                           	global _set_drives_LR
                                           	global _cliff_avoidance
                                           	global _debugMode
                                           	global _SPEED
                                           	global _LEFT_SPEED
                                           	global _RIGHT_SPEED
                                           	global _forward
                                           	global _backward
                                           	global _rotate_left
                                           	global _rotate_right
                                           	global _halt
                                           	global _differential
                                           	global _DRIVE
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _TRISFbits
                                           	extern _TRISGbits
                                           	extern _TRISHbits
                                           	extern _TRISJbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTA1bits
                                           	extern _TXSTA1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _CCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _Timer0_overflows
                                           	extern _Timer1_overflows
                                           	extern _Timer2_overflows
                                           	extern _Timer3_overflows
                                           	extern _Timer4_overflows
                                           	extern _Interrupt_port_in_use
                                           	extern _Encoder_on_iport
                                           	extern _Encoder_ticks
                                           	extern _Quad_input_port
                                           	extern _Porta_sample
                                           	extern _Portf_sample
                                           	extern _Porth_sample
                                           	extern _Rx_buff
                                           	extern _Rx_user_buff_index
                                           	extern _Spi_status
                                           	extern _Sonar_data_available
                                           	extern _Sonar_on_iport
                                           	extern _User_rxdata
                                           	extern _User_txdata
                                           	extern _Tx_buff
                                           	extern _Tx_user_buff_index
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _TRISF
                                           	extern _TRISG
                                           	extern _TRISH
                                           	extern _TRISJ
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _EEADRH
                                           	extern _RCSTA1
                                           	extern _TXSTA1
                                           	extern _TXREG1
                                           	extern _RCREG1
                                           	extern _SPBRG1
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _CCP3CON
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _printf
                                           	extern _putchar
                                           	extern _usart_getc
                                           	extern _usart_puts
                                           	extern _io_set_analog_port_count
                                           	extern _io_read_analog
                                           	extern _io_read_digital
                                           	extern _io_write_digital
                                           	extern _io_set_direction
                                           	extern _timer0_read32
                                           	extern _shaft_encoder_read_std
                                           	extern _shaft_encoder_enable_std
                                           	extern _rc_read_status
                                           	extern _rc_read_data
                                           	extern _controller_in_autonomous_mode
                                           	extern _rc_new_data_available
                                           	extern _pwm_write
                                           	extern _controller_submit_data
                                           	extern _controller_begin_autonomous_mode
                                           	extern _controller_end_autonomous_mode
                                           	extern _controller_print_version
                                           	extern _sonar_init
                                           	extern _sonar_read
                                           	extern _controller_init
                                           	extern _delay_msec
                                           	extern _arcade_drive
                                           	extern __divsint
                                           	extern __divulong
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _debugMode	db	0x00
                                           _LEFT_MOTOR_POWER	db	0x00
                                           _RIGHT_MOTOR_POWER	db	0x00
                                           _SPEED	db	0x46
                                           _LEFT_SPEED	db	0x46
                                           _RIGHT_SPEED	db	0x46
                                           _forward	db	0x01, 0x01
                                           _backward	db	0xff, 0xff
                                           _rotate_left	db	0xff, 0x01
                                           _rotate_right	db	0x01, 0xff
                                           _halt	db	0x00, 0x00
                                           _differential	db	0x80, 0x80
                                           _DRIVE	db	LOW(_halt), HIGH(_halt), 0x80
                                           _rc_routine_sonar_distance_1_1	db	0x00, 0x00
                                           _rc_routine_old_time_1_1	db	0x00, 0x00, 0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           
                                           udata_firmware_0	udata
                                           _rotation_deg_per_tick	res	2
                                           
                                           udata_firmware_1	udata
                                           _wheel_circumference_cm	res	2
                                           
                                           udata_firmware_2	udata
                                           _rotation_circumference_cm	res	2
                                           
                                           udata_firmware_3	udata
                                           _distance_cm_per_15_ticks	res	2
                                           
                                           udata_firmware_4	udata
                                           _stringOfChars	res	15
                                           
                                           udata_firmware_5	udata
                                           _integerByte	res	1
                                           
                                           udata_firmware_6	udata
                                           _rc_routine_elapsed_time_1_1	res	4
                                           
                                           udata_firmware_7	udata
                                           _tank_drive_routine_left_power_1_1	res	1
                                           
                                           udata_firmware_8	udata
                                           _tank_drive_routine_right_power_1_1	res	1
                                           
                                           udata_firmware_9	udata
                                           _arcade_drive_routine_left_power_1_1	res	1
                                           
                                           udata_firmware_10	udata
                                           _arcade_drive_routine_right_power_1_1	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           	code
                                           __sdcc_gsinit_startup:
                                           ; I code from now on!
005e34   ef1c     goto	0x5e38              	goto	__sdcc_program_startup
005e36   f02f
                                           ; ; Starting pCode block
                                           __sdcc_program_startup:
005e38   ecf4     call	0x2be8, 0           	CALL	_main
005e3a   f015
                                           ; ;	return from main will lock up
                                           
005e3c   ef1e     goto	0x5e3c              	GOTO	$
005e3e   f02f
                                           ; ; Starting pCode block
                                           S_firmware__main	code
                                           _main:
                                           ;	.line	60; firmware.c	unsigned int i=10000;
002be8   0e10     movlw	0x10               	MOVLW	0x10
002bea   6e00     movwf	0, 0               	MOVWF	r0x00
002bec   0e27     movlw	0x27               	MOVLW	0x27
002bee   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           ;	.line	61; firmware.c	unsigned int sonar_dist = 0, old_sonar_dist = 1;
002bf0   0e01     movlw	0x1                	MOVLW	0x01
002bf2   6e02     movwf	0x2, 0             	MOVWF	r0x02
002bf4   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           ;	.line	62; firmware.c	unsigned int light_level = 0;
002bf6   6a04     clrf	0x4, 0              	CLRF	r0x04
002bf8   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	64; firmware.c	unsigned left_enc_ticks=0,
002bfa   6a06     clrf	0x6, 0              	CLRF	r0x06
002bfc   6a07     clrf	0x7, 0              	CLRF	r0x07
                                           ;	.line	65; firmware.c	right_enc_ticks=0;
002bfe   6a08     clrf	0x8, 0              	CLRF	r0x08
002c00   6a09     clrf	0x9, 0              	CLRF	r0x09
                                           ;	.line	67; firmware.c	controller_init();
002c02   ec8a     call	0x5f14, 0           	CALL	_controller_init
002c04   f02f
                                           ;	.line	68; firmware.c	custom_init();
002c06   ecf4     call	0x41e8, 0           	CALL	_custom_init
002c08   f020
                                           ;	.line	75; firmware.c	controller_end_autonomous_mode();
002c0a   ec1e     call	0x7a3c, 0           	CALL	_controller_end_autonomous_mode
002c0c   f03d
                                           _00138_DS_:
                                           ;	.line	94; firmware.c	if (!controller_in_autonomous_mode())
002c0e   eca5     call	0x774a, 0           	CALL	_controller_in_autonomous_mode
002c10   f03b
002c12   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002c14   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002c16   e112     bnz	0x2c3c               	BNZ	_00110_DS_
                                           ;	.line	96; firmware.c	if ( rc_new_data_available() )
002c18   ec69     call	0x7ad2, 0           	CALL	_rc_new_data_available
002c1a   f03d
002c1c   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002c1e   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002c20   e00d     bz	0x2c3c                	BZ	_00110_DS_
                                           ;	.line	98; firmware.c	rc_routine();
002c22   ecee     call	0x31dc, 0           	CALL	_rc_routine
002c24   f018
                                           ;	.line	101; firmware.c	if ( rc_read_data(AUTONOMOUS_TRIGGER_CHAN) == -127 ) autonomous_routine0();
002c26   0e05     movlw	0x5                	MOVLW	0x05
002c28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002c2a   ec2e     call	0x565c, 0           	CALL	_rc_read_data
002c2c   f02b
002c2e   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002c30   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002c32   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002c34   0a81     xorlw	0x81               	XORLW	0x81
002c36   e102     bnz	0x2c3c               	BNZ	_00110_DS_
002c38   ec5b     call	0x64b6, 0           	CALL	_autonomous_routine0
002c3a   f032
                                           _00110_DS_:
                                           ;	.line	106; firmware.c	if(usart_data_available())
002c3c   ec19     call	0x7c32, 0           	CALL	_usart_data_available
002c3e   f03e
002c40   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002c42   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002c44   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
002c46   d056     bra	0x2cf4               	BRA	_00115_DS_
                                           ;	.line	108; firmware.c	serial_control();
002c48   ecb8     call	0x1d70, 0           	CALL	_serial_control
002c4a   f00e
                                           ;	.line	109; firmware.c	if(DRIVE == &differential)
002c4c   0e07     movlw	0x7                	MOVLW	HIGH(_differential)
002c4e   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
002c50   0e10     movlw	0x10               	MOVLW	LOW(_differential)
002c52   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002c54   0e80     movlw	0x80               	MOVLW	0x80
002c56   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
002c58   0107     movlb	0x7                	BANKSEL	_DRIVE
002c5a   5112     movf	0x12, 0, 0x1        	MOVF	_DRIVE, W, B
002c5c   180a     xorwf	0xa, 0, 0          	XORWF	r0x0a, W
002c5e   e108     bnz	0x2c70               	BNZ	_00159_DS_
002c60   0107     movlb	0x7                	BANKSEL	(_DRIVE + 1)
002c62   5113     movf	0x13, 0, 0x1        	MOVF	(_DRIVE + 1), W, B
002c64   180b     xorwf	0xb, 0, 0          	XORWF	r0x0b, W
002c66   e104     bnz	0x2c70               	BNZ	_00159_DS_
002c68   0107     movlb	0x7                	BANKSEL	(_DRIVE + 2)
002c6a   5114     movf	0x14, 0, 0x1        	MOVF	(_DRIVE + 2), W, B
002c6c   180c     xorwf	0xc, 0, 0          	XORWF	r0x0c, W
002c6e   e001     bz	0x2c72                	BZ	_00160_DS_
                                           _00159_DS_:
002c70   d00b     bra	0x2c88               	BRA	_00112_DS_
                                           _00160_DS_:
002c72   0107     movlb	0x7                	BANKSEL	_RIGHT_SPEED
                                           ;	.line	110; firmware.c	set_drives_LR(LEFT_SPEED,RIGHT_SPEED);
002c74   5105     movf	0x5, 0, 0x1         	MOVF	_RIGHT_SPEED, W, B
002c76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002c78   0107     movlb	0x7                	BANKSEL	_LEFT_SPEED
002c7a   5104     movf	0x4, 0, 0x1         	MOVF	_LEFT_SPEED, W, B
002c7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002c7e   ecf5     call	0x73ea, 0           	CALL	_set_drives_LR
002c80   f039
002c82   0e02     movlw	0x2                	MOVLW	0x02
002c84   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002c86   d031     bra	0x2cea               	BRA	_00113_DS_
                                           _00112_DS_:
                                           ;	.line	112; firmware.c	set_drives_LR(SPEED * DRIVE->left_multiplier,SPEED * DRIVE->right_multiplier);
002c88   c712     movff	0x712, 0xa         	MOVFF	_DRIVE, r0x0a
002c8a   f00a
002c8c   c713     movff	0x713, 0xb         	MOVFF	(_DRIVE + 1), r0x0b
002c8e   f00b
002c90   c714     movff	0x714, 0xc         	MOVFF	(_DRIVE + 2), r0x0c
002c92   f00c
002c94   c00a     movff	0xa, 0xfe9         	MOVFF	r0x0a, FSR0L
002c96   ffe9
002c98   c00b     movff	0xb, 0xff3         	MOVFF	r0x0b, PRODL
002c9a   fff3
002c9c   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
002c9e   ecf8     call	0x7bf0, 0           	CALL	__gptrget1
002ca0   f03d
                                           ; #	MOVWF	r0x0a
                                           ; #;;multiply variable :r0x0a by variable _SPEED and store in r0x0a
                                           ; #	MOVF	r0x0a, W
002ca2   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002ca4   0107     movlb	0x7                	BANKSEL	_SPEED
002ca6   0303     mulwf	0x3, 0x1           	MULWF	_SPEED, B
002ca8   cff3     movff	0xff3, 0xa         	MOVFF	PRODL, r0x0a
002caa   f00a
002cac   c712     movff	0x712, 0xb         	MOVFF	_DRIVE, r0x0b
002cae   f00b
002cb0   c713     movff	0x713, 0xc         	MOVFF	(_DRIVE + 1), r0x0c
002cb2   f00c
002cb4   c714     movff	0x714, 0xd         	MOVFF	(_DRIVE + 2), r0x0d
002cb6   f00d
002cb8   2a0b     incf	0xb, 0x1, 0         	INCF	r0x0b, F
002cba   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002cbc   2a0c     incf	0xc, 0x1, 0         	INCF	r0x0c, F
002cbe   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002cc0   2a0d     incf	0xd, 0x1, 0         	INCF	r0x0d, F
002cc2   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
002cc4   ffe9
002cc6   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
002cc8   fff3
002cca   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
002ccc   ecf8     call	0x7bf0, 0           	CALL	__gptrget1
002cce   f03d
                                           ; #	MOVWF	r0x0b
                                           ; #;;multiply variable :r0x0b by variable _SPEED and store in r0x0b
                                           ; #	MOVF	r0x0b, W
002cd0   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
002cd2   0107     movlb	0x7                	BANKSEL	_SPEED
002cd4   0303     mulwf	0x3, 0x1           	MULWF	_SPEED, B
002cd6   cff3     movff	0xff3, 0xb         	MOVFF	PRODL, r0x0b
002cd8   f00b
002cda   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
002cdc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cde   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002ce0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ce2   ecf5     call	0x73ea, 0           	CALL	_set_drives_LR
002ce4   f039
002ce6   0e02     movlw	0x2                	MOVLW	0x02
002ce8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00113_DS_:
                                           ;	.line	114; firmware.c	controller_submit_data(NO_WAIT);
002cea   0e00     movlw	0                  	MOVLW	0x00
002cec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cee   eca6     call	0x5d4c, 0           	CALL	_controller_submit_data
002cf0   f02e
002cf2   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00115_DS_:
                                           ;	.line	121; firmware.c	if(io_read_digital(LEFT_BUMPER_PORT)==0)
002cf4   0e0f     movlw	0xf                	MOVLW	0x0f
002cf6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cf8   ec7a     call	0x46f4, 0           	CALL	_io_read_digital
002cfa   f023
002cfc   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002cfe   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002d00   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002d02   e122     bnz	0x2d48               	BNZ	_00122_DS_
                                           ;	.line	123; firmware.c	if(io_read_digital(RIGHT_BUMPER_PORT)==0)
002d04   0e0e     movlw	0xe                	MOVLW	0x0e
002d06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d08   ec7a     call	0x46f4, 0           	CALL	_io_read_digital
002d0a   f023
002d0c   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002d0e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002d10   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002d12   e10d     bnz	0x2d2e               	BNZ	_00117_DS_
                                           ;	.line	125; firmware.c	printf("BF");
002d14   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
002d16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d18   0e42     movlw	0x42               	MOVLW	HIGH(__str_0)
002d1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d1c   0ef8     movlw	0xf8               	MOVLW	LOW(__str_0)
002d1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d20   ec85     call	0x730a, 0           	CALL	_printf
002d22   f039
002d24   0e03     movlw	0x3                	MOVLW	0x03
002d26   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	126; firmware.c	bump_front();
002d28   ecb8     call	0x5b70, 0           	CALL	_bump_front
002d2a   f02d
002d2c   d021     bra	0x2d70               	BRA	_00123_DS_
                                           _00117_DS_:
                                           ;	.line	130; firmware.c	printf("BL");
002d2e   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
002d30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d32   0e42     movlw	0x42               	MOVLW	HIGH(__str_1)
002d34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d36   0efc     movlw	0xfc               	MOVLW	LOW(__str_1)
002d38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d3a   ec85     call	0x730a, 0           	CALL	_printf
002d3c   f039
002d3e   0e03     movlw	0x3                	MOVLW	0x03
002d40   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	131; firmware.c	bump_front_left();
002d42   ec3f     call	0x587e, 0           	CALL	_bump_front_left
002d44   f02c
002d46   d014     bra	0x2d70               	BRA	_00123_DS_
                                           _00122_DS_:
                                           ;	.line	136; firmware.c	if(io_read_digital(RIGHT_BUMPER_PORT)==0)
002d48   0e0e     movlw	0xe                	MOVLW	0x0e
002d4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d4c   ec7a     call	0x46f4, 0           	CALL	_io_read_digital
002d4e   f023
002d50   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002d52   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002d54   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002d56   e10c     bnz	0x2d70               	BNZ	_00123_DS_
                                           ;	.line	138; firmware.c	printf("BR");
002d58   0e00     movlw	0                  	MOVLW	UPPER(__str_2)
002d5a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d5c   0e43     movlw	0x43               	MOVLW	HIGH(__str_2)
002d5e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d60   0e00     movlw	0                  	MOVLW	LOW(__str_2)
002d62   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d64   ec85     call	0x730a, 0           	CALL	_printf
002d66   f039
002d68   0e03     movlw	0x3                	MOVLW	0x03
002d6a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	139; firmware.c	bump_front_right();
002d6c   ec2f     call	0x5c5e, 0           	CALL	_bump_front_right
002d6e   f02e
                                           _00123_DS_:
                                           ;	.line	143; firmware.c	if((sonar_dist = sonar_read(SONAR_DOWN_SENSOR_INT)) > 20)
002d70   0e01     movlw	0x1                	MOVLW	0x01
002d72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d74   ec77     call	0x2eee, 0           	CALL	_sonar_read
002d76   f017
002d78   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002d7a   cff3     movff	0xff3, 0xb         	MOVFF	PRODL, r0x0b
002d7c   f00b
002d7e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002d80   c00a     movff	0xa, 0xc           	MOVFF	r0x0a, r0x0c
002d82   f00c
002d84   c00b     movff	0xb, 0xd           	MOVFF	r0x0b, r0x0d
002d86   f00d
002d88   0e00     movlw	0                  	MOVLW	0x00
002d8a   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
002d8c   e102     bnz	0x2d92               	BNZ	_00161_DS_
002d8e   0e15     movlw	0x15               	MOVLW	0x15
002d90   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
                                           _00161_DS_:
002d92   e30c     bnc	0x2dac               	BNC	_00125_DS_
                                           ;	.line	145; firmware.c	printf("CF");
002d94   0e00     movlw	0                  	MOVLW	UPPER(__str_3)
002d96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d98   0e43     movlw	0x43               	MOVLW	HIGH(__str_3)
002d9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d9c   0e04     movlw	0x4                	MOVLW	LOW(__str_3)
002d9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002da0   ec85     call	0x730a, 0           	CALL	_printf
002da2   f039
002da4   0e03     movlw	0x3                	MOVLW	0x03
002da6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	146; firmware.c	cliff_avoidance();
002da8   ec95     call	0x752a, 0           	CALL	_cliff_avoidance
002daa   f03a
                                           _00125_DS_:
                                           ;	.line	148; firmware.c	if(i++ == 10000)
002dac   c000     movff	0, 0xa             	MOVFF	r0x00, r0x0a
002dae   f00a
002db0   c001     movff	0x1, 0xb           	MOVFF	r0x01, r0x0b
002db2   f00b
002db4   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002db6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002db8   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
002dba   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002dbc   0a10     xorlw	0x10               	XORLW	0x10
002dbe   e103     bnz	0x2dc6               	BNZ	_00162_DS_
002dc0   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
002dc2   0a27     xorlw	0x27               	XORLW	0x27
002dc4   e001     bz	0x2dc8                	BZ	_00163_DS_
                                           _00162_DS_:
002dc6   d026     bra	0x2e14               	BRA	_00129_DS_
                                           _00163_DS_:
                                           ;	.line	150; firmware.c	if(io_read_analog(LIGHT_SENSOR_PORT) != light_level)
002dc8   0e01     movlw	0x1                	MOVLW	0x01
002dca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dcc   ec2b     call	0x7456, 0           	CALL	_io_read_analog
002dce   f03a
002dd0   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002dd2   cff3     movff	0xff3, 0xb         	MOVFF	PRODL, r0x0b
002dd4   f00b
002dd6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002dd8   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002dda   1804     xorwf	0x4, 0, 0          	XORWF	r0x04, W
002ddc   e103     bnz	0x2de4               	BNZ	_00165_DS_
002dde   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
002de0   1805     xorwf	0x5, 0, 0          	XORWF	r0x05, W
002de2   e016     bz	0x2e10                	BZ	_00127_DS_
                                           _00165_DS_:
                                           ;	.line	152; firmware.c	light_level = io_read_analog(LIGHT_SENSOR_PORT);
002de4   0e01     movlw	0x1                	MOVLW	0x01
002de6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002de8   ec2b     call	0x7456, 0           	CALL	_io_read_analog
002dea   f03a
002dec   6e04     movwf	0x4, 0             	MOVWF	r0x04
002dee   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
002df0   f005
002df2   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	153; firmware.c	printf("Li%d",light_level);
002df4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002df6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002df8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002dfa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dfc   0e00     movlw	0                  	MOVLW	UPPER(__str_4)
002dfe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e00   0e43     movlw	0x43               	MOVLW	HIGH(__str_4)
002e02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e04   0e08     movlw	0x8                	MOVLW	LOW(__str_4)
002e06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e08   ec85     call	0x730a, 0           	CALL	_printf
002e0a   f039
002e0c   0e05     movlw	0x5                	MOVLW	0x05
002e0e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00127_DS_:
                                           ;	.line	155; firmware.c	i = 0;
002e10   6a00     clrf	0, 0                	CLRF	r0x00
002e12   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00129_DS_:
                                           ;	.line	158; firmware.c	if(sonar_dist - old_sonar_dist > 1 || old_sonar_dist - sonar_dist > 1)
002e14   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002e16   5c0c     subwf	0xc, 0, 0          	SUBWF	r0x0c, W
002e18   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002e1a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002e1c   580d     subwfb	0xd, 0, 0         	SUBWFB	r0x0d, W
002e1e   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
002e20   0e00     movlw	0                  	MOVLW	0x00
002e22   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
002e24   e102     bnz	0x2e2a               	BNZ	_00166_DS_
002e26   0e02     movlw	0x2                	MOVLW	0x02
002e28   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
                                           _00166_DS_:
002e2a   e20c     bc	0x2e44                	BC	_00130_DS_
002e2c   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
002e2e   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
002e30   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002e32   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
002e34   5803     subwfb	0x3, 0, 0         	SUBWFB	r0x03, W
002e36   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
002e38   0e00     movlw	0                  	MOVLW	0x00
002e3a   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
002e3c   e102     bnz	0x2e42               	BNZ	_00167_DS_
002e3e   0e02     movlw	0x2                	MOVLW	0x02
002e40   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
                                           _00167_DS_:
002e42   e312     bnc	0x2e68               	BNC	_00131_DS_
                                           _00130_DS_:
                                           ;	.line	160; firmware.c	printf("UD%d",sonar_dist);
002e44   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
002e46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e48   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
002e4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e4c   0e00     movlw	0                  	MOVLW	UPPER(__str_5)
002e4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e50   0e43     movlw	0x43               	MOVLW	HIGH(__str_5)
002e52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e54   0e0e     movlw	0xe                	MOVLW	LOW(__str_5)
002e56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e58   ec85     call	0x730a, 0           	CALL	_printf
002e5a   f039
002e5c   0e05     movlw	0x5                	MOVLW	0x05
002e5e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	161; firmware.c	old_sonar_dist = sonar_dist;
002e60   c00c     movff	0xc, 0x2           	MOVFF	r0x0c, r0x02
002e62   f002
002e64   c00d     movff	0xd, 0x3           	MOVFF	r0x0d, r0x03
002e66   f003
                                           _00131_DS_:
                                           ;	.line	164; firmware.c	if(shaft_encoder_read_std(LEFT_WHEEL_ENCODER_INT)!=left_enc_ticks)
002e68   0e03     movlw	0x3                	MOVLW	0x03
002e6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e6c   ec23     call	0x7646, 0           	CALL	_shaft_encoder_read_std
002e6e   f03b
002e70   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002e72   cff3     movff	0xff3, 0xb         	MOVFF	PRODL, r0x0b
002e74   f00b
002e76   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002e78   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002e7a   1806     xorwf	0x6, 0, 0          	XORWF	r0x06, W
002e7c   e103     bnz	0x2e84               	BNZ	_00169_DS_
002e7e   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
002e80   1807     xorwf	0x7, 0, 0          	XORWF	r0x07, W
002e82   e012     bz	0x2ea8                	BZ	_00134_DS_
                                           _00169_DS_:
                                           ;	.line	166; firmware.c	printf("EL");
002e84   0e00     movlw	0                  	MOVLW	UPPER(__str_6)
002e86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e88   0e43     movlw	0x43               	MOVLW	HIGH(__str_6)
002e8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e8c   0e14     movlw	0x14               	MOVLW	LOW(__str_6)
002e8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e90   ec85     call	0x730a, 0           	CALL	_printf
002e92   f039
002e94   0e03     movlw	0x3                	MOVLW	0x03
002e96   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	167; firmware.c	left_enc_ticks = shaft_encoder_read_std(LEFT_WHEEL_ENCODER_INT);
002e98   0e03     movlw	0x3                	MOVLW	0x03
002e9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e9c   ec23     call	0x7646, 0           	CALL	_shaft_encoder_read_std
002e9e   f03b
002ea0   6e06     movwf	0x6, 0             	MOVWF	r0x06
002ea2   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
002ea4   f007
002ea6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00134_DS_:
                                           ;	.line	170; firmware.c	if(shaft_encoder_read_std(RIGHT_WHEEL_ENCODER_INT)!=right_enc_ticks)
002ea8   0e02     movlw	0x2                	MOVLW	0x02
002eaa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002eac   ec23     call	0x7646, 0           	CALL	_shaft_encoder_read_std
002eae   f03b
002eb0   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002eb2   cff3     movff	0xff3, 0xb         	MOVFF	PRODL, r0x0b
002eb4   f00b
002eb6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002eb8   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002eba   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
002ebc   e104     bnz	0x2ec6               	BNZ	_00171_DS_
002ebe   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
002ec0   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
002ec2   e101     bnz	0x2ec6               	BNZ	_00171_DS_
002ec4   d6a4     bra	0x2c0e               	BRA	_00138_DS_
                                           _00171_DS_:
                                           ;	.line	172; firmware.c	printf("ER");
002ec6   0e00     movlw	0                  	MOVLW	UPPER(__str_7)
002ec8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002eca   0e43     movlw	0x43               	MOVLW	HIGH(__str_7)
002ecc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ece   0e18     movlw	0x18               	MOVLW	LOW(__str_7)
002ed0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ed2   ec85     call	0x730a, 0           	CALL	_printf
002ed4   f039
002ed6   0e03     movlw	0x3                	MOVLW	0x03
002ed8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	173; firmware.c	right_enc_ticks = shaft_encoder_read_std(RIGHT_WHEEL_ENCODER_INT);
002eda   0e02     movlw	0x2                	MOVLW	0x02
002edc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ede   ec23     call	0x7646, 0           	CALL	_shaft_encoder_read_std
002ee0   f03b
002ee2   6e08     movwf	0x8, 0             	MOVWF	r0x08
002ee4   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
002ee6   f009
002ee8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002eea   d691     bra	0x2c0e               	BRA	_00138_DS_
002eec   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__cliff_avoidance	code
                                           _cliff_avoidance:
                                           ;	.line	604; firmware.c	void cliff_avoidance()
00752a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00752c   ffe5
00752e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007530   ffd9
                                           ;	.line	606; firmware.c	set_drives_LR(-127,-127);
007532   0e81     movlw	0x81               	MOVLW	0x81
007534   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007536   0e81     movlw	0x81               	MOVLW	0x81
007538   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00753a   ecf5     call	0x73ea, 0           	CALL	_set_drives_LR
00753c   f039
00753e   0e02     movlw	0x2                	MOVLW	0x02
007540   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	607; firmware.c	controller_submit_data(NO_WAIT);
007542   0e00     movlw	0                  	MOVLW	0x00
007544   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007546   eca6     call	0x5d4c, 0           	CALL	_controller_submit_data
007548   f02e
00754a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	608; firmware.c	delay_msec(60);
00754c   0e00     movlw	0                  	MOVLW	0x00
00754e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007550   0e3c     movlw	0x3c               	MOVLW	0x3c
007552   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007554   ecbe     call	0x737c, 0           	CALL	_delay_msec
007556   f039
007558   0e02     movlw	0x2                	MOVLW	0x02
00755a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	609; firmware.c	set_drives_LR(0,0);
00755c   0e00     movlw	0                  	MOVLW	0x00
00755e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007560   0e00     movlw	0                  	MOVLW	0x00
007562   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007564   ecf5     call	0x73ea, 0           	CALL	_set_drives_LR
007566   f039
007568   0e02     movlw	0x2                	MOVLW	0x02
00756a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	610; firmware.c	controller_submit_data(NO_WAIT);
00756c   0e00     movlw	0                  	MOVLW	0x00
00756e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007570   eca6     call	0x5d4c, 0           	CALL	_controller_submit_data
007572   f02e
007574   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	611; firmware.c	DRIVE = &halt;
007576   0e07     movlw	0x7                	MOVLW	HIGH(_halt)
007578   0107     movlb	0x7                	BANKSEL	(_DRIVE + 1)
00757a   6f13     movwf	0x13, 0x1          	MOVWF	(_DRIVE + 1), B
00757c   0e0e     movlw	0xe                	MOVLW	LOW(_halt)
00757e   0107     movlb	0x7                	BANKSEL	_DRIVE
007580   6f12     movwf	0x12, 0x1          	MOVWF	_DRIVE, B
007582   0e80     movlw	0x80               	MOVLW	0x80
007584   0107     movlb	0x7                	BANKSEL	(_DRIVE + 2)
007586   6f14     movwf	0x14, 0x1          	MOVWF	(_DRIVE + 2), B
007588   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00758a   ffd9
00758c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__set_drives_LR	code
                                           _set_drives_LR:
                                           ;	.line	596; firmware.c	void set_drives_LR(signed char leftPower,signed char rightPower)
0073ea   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0073ec   ffe5
0073ee   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0073f0   ffd9
0073f2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0073f4   ffe5
0073f6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0073f8   ffe5
0073fa   0e02     movlw	0x2                	MOVLW	0x02
0073fc   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0073fe   f000
007400   0e03     movlw	0x3                	MOVLW	0x03
007402   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
007404   f001
                                           ;	.line	598; firmware.c	pwm_write(RIGHT_DRIVE_PORT1, rightPower);
007406   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007408   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00740a   0e01     movlw	0x1                	MOVLW	0x01
00740c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00740e   ec61     call	0x74c2, 0           	CALL	_pwm_write
007410   f03a
007412   0e02     movlw	0x2                	MOVLW	0x02
007414   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	599; firmware.c	pwm_write(LEFT_DRIVE_PORT1, -leftPower);
007416   6c00     negf	0, 0                	NEGF	r0x00
007418   5000     movf	0, 0, 0             	MOVF	r0x00, W
00741a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00741c   0e02     movlw	0x2                	MOVLW	0x02
00741e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007420   ec61     call	0x74c2, 0           	CALL	_pwm_write
007422   f03a
007424   0e02     movlw	0x2                	MOVLW	0x02
007426   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	600; firmware.c	pwm_write(RIGHT_DRIVE_PORT2, rightPower);
007428   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00742a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00742c   0e03     movlw	0x3                	MOVLW	0x03
00742e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007430   ec61     call	0x74c2, 0           	CALL	_pwm_write
007432   f03a
007434   0e02     movlw	0x2                	MOVLW	0x02
007436   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	601; firmware.c	pwm_write(LEFT_DRIVE_PORT2, -leftPower);
007438   5000     movf	0, 0, 0             	MOVF	r0x00, W
00743a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00743c   0e04     movlw	0x4                	MOVLW	0x04
00743e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007440   ec61     call	0x74c2, 0           	CALL	_pwm_write
007442   f03a
007444   0e02     movlw	0x2                	MOVLW	0x02
007446   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
007448   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00744a   f001
00744c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00744e   f000
007450   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007452   ffd9
007454   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__bump_front	code
                                           _bump_front:
                                           ;	.line	579; firmware.c	void bump_front()
005b70   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005b72   ffe5
005b74   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005b76   ffd9
005b78   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005b7a   ffe5
005b7c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005b7e   ffe5
005b80   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005b82   ffe5
005b84   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005b86   ffe5
                                           ;	.line	582; firmware.c	set_drives_LR(-AUTON_DRIVE_SPEED,-AUTON_DRIVE_SPEED);
005b88   0eba     movlw	0xba               	MOVLW	0xba
005b8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005b8c   0eba     movlw	0xba               	MOVLW	0xba
005b8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005b90   ecf5     call	0x73ea, 0           	CALL	_set_drives_LR
005b92   f039
005b94   0e02     movlw	0x2                	MOVLW	0x02
005b96   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	583; firmware.c	controller_submit_data(WAIT);
005b98   0e01     movlw	0x1                	MOVLW	0x01
005b9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005b9c   eca6     call	0x5d4c, 0           	CALL	_controller_submit_data
005b9e   f02e
005ba0   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	584; firmware.c	delay_msec(500);
005ba2   0e01     movlw	0x1                	MOVLW	0x01
005ba4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005ba6   0ef4     movlw	0xf4               	MOVLW	0xf4
005ba8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005baa   ecbe     call	0x737c, 0           	CALL	_delay_msec
005bac   f039
005bae   0e02     movlw	0x2                	MOVLW	0x02
005bb0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	587; firmware.c	set_drives_LR(-AUTON_DRIVE_SPEED,AUTON_DRIVE_SPEED);
005bb2   0e46     movlw	0x46               	MOVLW	0x46
005bb4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005bb6   0eba     movlw	0xba               	MOVLW	0xba
005bb8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005bba   ecf5     call	0x73ea, 0           	CALL	_set_drives_LR
005bbc   f039
005bbe   0e02     movlw	0x2                	MOVLW	0x02
005bc0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	588; firmware.c	controller_submit_data(WAIT);
005bc2   0e01     movlw	0x1                	MOVLW	0x01
005bc4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005bc6   eca6     call	0x5d4c, 0           	CALL	_controller_submit_data
005bc8   f02e
005bca   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	589; firmware.c	delay_msec(2700);
005bcc   0e0a     movlw	0xa                	MOVLW	0x0a
005bce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005bd0   0e8c     movlw	0x8c               	MOVLW	0x8c
005bd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005bd4   ecbe     call	0x737c, 0           	CALL	_delay_msec
005bd6   f039
005bd8   0e02     movlw	0x2                	MOVLW	0x02
005bda   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	592; firmware.c	set_drives_LR(SPEED * DRIVE->left_multiplier, SPEED * DRIVE->right_multiplier);
005bdc   c712     movff	0x712, 0           	MOVFF	_DRIVE, r0x00
005bde   f000
005be0   c713     movff	0x713, 0x1         	MOVFF	(_DRIVE + 1), r0x01
005be2   f001
005be4   c714     movff	0x714, 0x2         	MOVFF	(_DRIVE + 2), r0x02
005be6   f002
005be8   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
005bea   ffe9
005bec   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
005bee   fff3
005bf0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005bf2   ecf8     call	0x7bf0, 0           	CALL	__gptrget1
005bf4   f03d
                                           ; #	MOVWF	r0x00
                                           ; #;;multiply variable :r0x00 by variable _SPEED and store in r0x00
                                           ; #	MOVF	r0x00, W
005bf6   6e00     movwf	0, 0               	MOVWF	r0x00
005bf8   0107     movlb	0x7                	BANKSEL	_SPEED
005bfa   0303     mulwf	0x3, 0x1           	MULWF	_SPEED, B
005bfc   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
005bfe   f000
005c00   c712     movff	0x712, 0x1         	MOVFF	_DRIVE, r0x01
005c02   f001
005c04   c713     movff	0x713, 0x2         	MOVFF	(_DRIVE + 1), r0x02
005c06   f002
005c08   c714     movff	0x714, 0x3         	MOVFF	(_DRIVE + 2), r0x03
005c0a   f003
005c0c   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
005c0e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005c10   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
005c12   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005c14   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
005c16   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
005c18   ffe9
005c1a   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
005c1c   fff3
005c1e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005c20   ecf8     call	0x7bf0, 0           	CALL	__gptrget1
005c22   f03d
                                           ; #	MOVWF	r0x01
                                           ; #;;multiply variable :r0x01 by variable _SPEED and store in r0x01
                                           ; #	MOVF	r0x01, W
005c24   6e01     movwf	0x1, 0             	MOVWF	r0x01
005c26   0107     movlb	0x7                	BANKSEL	_SPEED
005c28   0303     mulwf	0x3, 0x1           	MULWF	_SPEED, B
005c2a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
005c2c   f001
005c2e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005c30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005c32   5000     movf	0, 0, 0             	MOVF	r0x00, W
005c34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005c36   ecf5     call	0x73ea, 0           	CALL	_set_drives_LR
005c38   f039
005c3a   0e02     movlw	0x2                	MOVLW	0x02
005c3c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	593; firmware.c	controller_submit_data(WAIT);
005c3e   0e01     movlw	0x1                	MOVLW	0x01
005c40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005c42   eca6     call	0x5d4c, 0           	CALL	_controller_submit_data
005c44   f02e
005c46   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
005c48   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005c4a   f003
005c4c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005c4e   f002
005c50   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005c52   f001
005c54   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005c56   f000
005c58   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005c5a   ffd9
005c5c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__bump_front_right	code
                                           _bump_front_right:
                                           ;	.line	561; firmware.c	void bump_front_right()
005c5e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005c60   ffe5
005c62   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005c64   ffd9
005c66   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005c68   ffe5
005c6a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005c6c   ffe5
005c6e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005c70   ffe5
005c72   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005c74   ffe5
                                           ;	.line	564; firmware.c	set_drives_LR(-AUTON_DRIVE_SPEED,-AUTON_DRIVE_SPEED);
005c76   0eba     movlw	0xba               	MOVLW	0xba
005c78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005c7a   0eba     movlw	0xba               	MOVLW	0xba
005c7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005c7e   ecf5     call	0x73ea, 0           	CALL	_set_drives_LR
005c80   f039
005c82   0e02     movlw	0x2                	MOVLW	0x02
005c84   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	565; firmware.c	controller_submit_data(WAIT);
005c86   0e01     movlw	0x1                	MOVLW	0x01
005c88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005c8a   eca6     call	0x5d4c, 0           	CALL	_controller_submit_data
005c8c   f02e
005c8e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	566; firmware.c	delay_msec(500);
005c90   0e01     movlw	0x1                	MOVLW	0x01
005c92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005c94   0ef4     movlw	0xf4               	MOVLW	0xf4
005c96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005c98   ecbe     call	0x737c, 0           	CALL	_delay_msec
005c9a   f039
005c9c   0e02     movlw	0x2                	MOVLW	0x02
005c9e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	569; firmware.c	set_drives_LR(-AUTON_DRIVE_SPEED,AUTON_DRIVE_SPEED);
005ca0   0e46     movlw	0x46               	MOVLW	0x46
005ca2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005ca4   0eba     movlw	0xba               	MOVLW	0xba
005ca6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005ca8   ecf5     call	0x73ea, 0           	CALL	_set_drives_LR
005caa   f039
005cac   0e02     movlw	0x2                	MOVLW	0x02
005cae   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	570; firmware.c	controller_submit_data(WAIT);
005cb0   0e01     movlw	0x1                	MOVLW	0x01
005cb2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005cb4   eca6     call	0x5d4c, 0           	CALL	_controller_submit_data
005cb6   f02e
005cb8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	571; firmware.c	delay_msec(500);
005cba   0e01     movlw	0x1                	MOVLW	0x01
005cbc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005cbe   0ef4     movlw	0xf4               	MOVLW	0xf4
005cc0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005cc2   ecbe     call	0x737c, 0           	CALL	_delay_msec
005cc4   f039
005cc6   0e02     movlw	0x2                	MOVLW	0x02
005cc8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	574; firmware.c	set_drives_LR(SPEED * DRIVE->left_multiplier, SPEED * DRIVE->right_multiplier);
005cca   c712     movff	0x712, 0           	MOVFF	_DRIVE, r0x00
005ccc   f000
005cce   c713     movff	0x713, 0x1         	MOVFF	(_DRIVE + 1), r0x01
005cd0   f001
005cd2   c714     movff	0x714, 0x2         	MOVFF	(_DRIVE + 2), r0x02
005cd4   f002
005cd6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
005cd8   ffe9
005cda   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
005cdc   fff3
005cde   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005ce0   ecf8     call	0x7bf0, 0           	CALL	__gptrget1
005ce2   f03d
                                           ; #	MOVWF	r0x00
                                           ; #;;multiply variable :r0x00 by variable _SPEED and store in r0x00
                                           ; #	MOVF	r0x00, W
005ce4   6e00     movwf	0, 0               	MOVWF	r0x00
005ce6   0107     movlb	0x7                	BANKSEL	_SPEED
005ce8   0303     mulwf	0x3, 0x1           	MULWF	_SPEED, B
005cea   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
005cec   f000
005cee   c712     movff	0x712, 0x1         	MOVFF	_DRIVE, r0x01
005cf0   f001
005cf2   c713     movff	0x713, 0x2         	MOVFF	(_DRIVE + 1), r0x02
005cf4   f002
005cf6   c714     movff	0x714, 0x3         	MOVFF	(_DRIVE + 2), r0x03
005cf8   f003
005cfa   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
005cfc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005cfe   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
005d00   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005d02   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
005d04   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
005d06   ffe9
005d08   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
005d0a   fff3
005d0c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005d0e   ecf8     call	0x7bf0, 0           	CALL	__gptrget1
005d10   f03d
                                           ; #	MOVWF	r0x01
                                           ; #;;multiply variable :r0x01 by variable _SPEED and store in r0x01
                                           ; #	MOVF	r0x01, W
005d12   6e01     movwf	0x1, 0             	MOVWF	r0x01
005d14   0107     movlb	0x7                	BANKSEL	_SPEED
005d16   0303     mulwf	0x3, 0x1           	MULWF	_SPEED, B
005d18   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
005d1a   f001
005d1c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005d1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005d20   5000     movf	0, 0, 0             	MOVF	r0x00, W
005d22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005d24   ecf5     call	0x73ea, 0           	CALL	_set_drives_LR
005d26   f039
005d28   0e02     movlw	0x2                	MOVLW	0x02
005d2a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	575; firmware.c	controller_submit_data(WAIT);
005d2c   0e01     movlw	0x1                	MOVLW	0x01
005d2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005d30   eca6     call	0x5d4c, 0           	CALL	_controller_submit_data
005d32   f02e
005d34   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
005d36   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005d38   f003
005d3a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005d3c   f002
005d3e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005d40   f001
005d42   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005d44   f000
005d46   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005d48   ffd9
005d4a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__bump_front_left	code
                                           _bump_front_left:
                                           ;	.line	542; firmware.c	void bump_front_left()
00587e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005880   ffe5
005882   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005884   ffd9
005886   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005888   ffe5
00588a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00588c   ffe5
00588e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005890   ffe5
005892   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005894   ffe5
                                           ;	.line	545; firmware.c	set_drives_LR(-AUTON_DRIVE_SPEED,-AUTON_DRIVE_SPEED);
005896   0eba     movlw	0xba               	MOVLW	0xba
005898   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00589a   0eba     movlw	0xba               	MOVLW	0xba
00589c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00589e   ecf5     call	0x73ea, 0           	CALL	_set_drives_LR
0058a0   f039
0058a2   0e02     movlw	0x2                	MOVLW	0x02
0058a4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	546; firmware.c	controller_submit_data(WAIT);
0058a6   0e01     movlw	0x1                	MOVLW	0x01
0058a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0058aa   eca6     call	0x5d4c, 0           	CALL	_controller_submit_data
0058ac   f02e
0058ae   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	547; firmware.c	delay_msec(500);
0058b0   0e01     movlw	0x1                	MOVLW	0x01
0058b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0058b4   0ef4     movlw	0xf4               	MOVLW	0xf4
0058b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0058b8   ecbe     call	0x737c, 0           	CALL	_delay_msec
0058ba   f039
0058bc   0e02     movlw	0x2                	MOVLW	0x02
0058be   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	550; firmware.c	set_drives_LR(AUTON_DRIVE_SPEED,-AUTON_DRIVE_SPEED);
0058c0   0eba     movlw	0xba               	MOVLW	0xba
0058c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0058c4   0e46     movlw	0x46               	MOVLW	0x46
0058c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0058c8   ecf5     call	0x73ea, 0           	CALL	_set_drives_LR
0058ca   f039
0058cc   0e02     movlw	0x2                	MOVLW	0x02
0058ce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	551; firmware.c	controller_submit_data(WAIT);
0058d0   0e01     movlw	0x1                	MOVLW	0x01
0058d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0058d4   eca6     call	0x5d4c, 0           	CALL	_controller_submit_data
0058d6   f02e
0058d8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	552; firmware.c	delay_msec(500);
0058da   0e01     movlw	0x1                	MOVLW	0x01
0058dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0058de   0ef4     movlw	0xf4               	MOVLW	0xf4
0058e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0058e2   ecbe     call	0x737c, 0           	CALL	_delay_msec
0058e4   f039
0058e6   0e02     movlw	0x2                	MOVLW	0x02
0058e8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	555; firmware.c	set_drives_LR(SPEED * DRIVE->left_multiplier, SPEED * DRIVE->right_multiplier);
0058ea   c712     movff	0x712, 0           	MOVFF	_DRIVE, r0x00
0058ec   f000
0058ee   c713     movff	0x713, 0x1         	MOVFF	(_DRIVE + 1), r0x01
0058f0   f001
0058f2   c714     movff	0x714, 0x2         	MOVFF	(_DRIVE + 2), r0x02
0058f4   f002
0058f6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0058f8   ffe9
0058fa   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0058fc   fff3
0058fe   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005900   ecf8     call	0x7bf0, 0           	CALL	__gptrget1
005902   f03d
                                           ; #	MOVWF	r0x00
                                           ; #;;multiply variable :r0x00 by variable _SPEED and store in r0x00
                                           ; #	MOVF	r0x00, W
005904   6e00     movwf	0, 0               	MOVWF	r0x00
005906   0107     movlb	0x7                	BANKSEL	_SPEED
005908   0303     mulwf	0x3, 0x1           	MULWF	_SPEED, B
00590a   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
00590c   f000
00590e   c712     movff	0x712, 0x1         	MOVFF	_DRIVE, r0x01
005910   f001
005912   c713     movff	0x713, 0x2         	MOVFF	(_DRIVE + 1), r0x02
005914   f002
005916   c714     movff	0x714, 0x3         	MOVFF	(_DRIVE + 2), r0x03
005918   f003
00591a   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00591c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00591e   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
005920   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005922   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
005924   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
005926   ffe9
005928   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
00592a   fff3
00592c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00592e   ecf8     call	0x7bf0, 0           	CALL	__gptrget1
005930   f03d
                                           ; #	MOVWF	r0x01
                                           ; #;;multiply variable :r0x01 by variable _SPEED and store in r0x01
                                           ; #	MOVF	r0x01, W
005932   6e01     movwf	0x1, 0             	MOVWF	r0x01
005934   0107     movlb	0x7                	BANKSEL	_SPEED
005936   0303     mulwf	0x3, 0x1           	MULWF	_SPEED, B
005938   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00593a   f001
00593c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00593e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005940   5000     movf	0, 0, 0             	MOVF	r0x00, W
005942   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005944   ecf5     call	0x73ea, 0           	CALL	_set_drives_LR
005946   f039
005948   0e02     movlw	0x2                	MOVLW	0x02
00594a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	556; firmware.c	controller_submit_data(WAIT);
00594c   0e01     movlw	0x1                	MOVLW	0x01
00594e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005950   eca6     call	0x5d4c, 0           	CALL	_controller_submit_data
005952   f02e
005954   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	557; firmware.c	delay_msec(100);
005956   0e00     movlw	0                  	MOVLW	0x00
005958   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00595a   0e64     movlw	0x64               	MOVLW	0x64
00595c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00595e   ecbe     call	0x737c, 0           	CALL	_delay_msec
005960   f039
005962   0e02     movlw	0x2                	MOVLW	0x02
005964   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005966   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005968   f003
00596a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00596c   f002
00596e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005970   f001
005972   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005974   f000
005976   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005978   ffd9
00597a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__heartbeat	code
                                           _heartbeat:
                                           ;	.line	526; firmware.c	void heartbeat(void)
007994   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007996   ffe5
007998   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00799a   ffd9
00799c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00799e   ffe5
                                           ;	.line	530; firmware.c	dat = RCREG;
0079a0   cfae     movff	0xfae, 0           	MOVFF	_RCREG, r0x00
0079a2   f000
                                           ;	.line	531; firmware.c	if(dat == 'p')
0079a4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0079a6   0a70     xorlw	0x70               	XORLW	0x70
0079a8   e10f     bnz	0x79c8               	BNZ	_00448_DS_
                                           ;	.line	533; firmware.c	printf("Hello, World!\n");
0079aa   0e00     movlw	0                  	MOVLW	UPPER(__str_19)
0079ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0079ae   0e43     movlw	0x43               	MOVLW	HIGH(__str_19)
0079b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0079b2   0eac     movlw	0xac               	MOVLW	LOW(__str_19)
0079b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0079b6   ec85     call	0x730a, 0           	CALL	_printf
0079b8   f039
0079ba   0e03     movlw	0x3                	MOVLW	0x03
0079bc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	534; firmware.c	controller_submit_data(NO_WAIT);
0079be   0e00     movlw	0                  	MOVLW	0x00
0079c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0079c2   eca6     call	0x5d4c, 0           	CALL	_controller_submit_data
0079c4   f02e
0079c6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00448_DS_:
0079c8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0079ca   f000
0079cc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0079ce   ffd9
0079d0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__serial_control	code
                                           _serial_control:
                                           ;	.line	423; firmware.c	void serial_control(void)
001d70   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001d72   ffe5
001d74   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001d76   ffd9
001d78   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001d7a   ffe5
001d7c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001d7e   ffe5
001d80   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001d82   ffe5
001d84   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001d86   ffe5
001d88   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001d8a   ffe5
                                           ;	.line	427; firmware.c	if(usart_data_available())
001d8c   ec19     call	0x7c32, 0           	CALL	_usart_data_available
001d8e   f03e
001d90   6e00     movwf	0, 0               	MOVWF	r0x00
001d92   5000     movf	0, 0, 0             	MOVF	r0x00, W
001d94   e004     bz	0x1d9e                	BZ	_00286_DS_
                                           ;	.line	428; firmware.c	command_byte = usart_get_byte();
001d96   ec28     call	0x7c50, 0           	CALL	_usart_get_byte
001d98   f03e
001d9a   6e00     movwf	0, 0               	MOVWF	r0x00
001d9c   d002     bra	0x1da2               	BRA	_00287_DS_
                                           _00286_DS_:
                                           ;	.line	429; firmware.c	else return;
001d9e   eff4     goto	0x21e8              	GOTO	_00350_DS_
001da0   f010
                                           _00287_DS_:
                                           ;	.line	431; firmware.c	switch(command_byte)
001da2   5000     movf	0, 0, 0             	MOVF	r0x00, W
001da4   0a2b     xorlw	0x2b               	XORLW	0x2b
001da6   e101     bnz	0x1daa               	BNZ	_00399_DS_
001da8   d0bf     bra	0x1f28               	BRA	_00297_DS_
                                           _00399_DS_:
001daa   5000     movf	0, 0, 0             	MOVF	r0x00, W
001dac   0a2d     xorlw	0x2d               	XORLW	0x2d
001dae   e101     bnz	0x1db2               	BNZ	_00401_DS_
001db0   d0db     bra	0x1f68               	BRA	_00300_DS_
                                           _00401_DS_:
001db2   5000     movf	0, 0, 0             	MOVF	r0x00, W
001db4   0a30     xorlw	0x30               	XORLW	0x30
001db6   e101     bnz	0x1dba               	BNZ	_00403_DS_
001db8   d087     bra	0x1ec8               	BRA	_00294_DS_
                                           _00403_DS_:
001dba   5000     movf	0, 0, 0             	MOVF	r0x00, W
001dbc   0a31     xorlw	0x31               	XORLW	0x31
001dbe   e101     bnz	0x1dc2               	BNZ	_00405_DS_
001dc0   d076     bra	0x1eae               	BRA	_00293_DS_
                                           _00405_DS_:
001dc2   5000     movf	0, 0, 0             	MOVF	r0x00, W
001dc4   0a44     xorlw	0x44               	XORLW	0x44
001dc6   e102     bnz	0x1dcc               	BNZ	_00407_DS_
001dc8   efdc     goto	0x21b8              	GOTO	_00319_DS_
001dca   f010
                                           _00407_DS_:
001dcc   5000     movf	0, 0, 0             	MOVF	r0x00, W
001dce   0a48     xorlw	0x48               	XORLW	0x48
001dd0   e101     bnz	0x1dd4               	BNZ	_00409_DS_
001dd2   d11b     bra	0x200a               	BRA	_00378_DS_
                                           _00409_DS_:
001dd4   5000     movf	0, 0, 0             	MOVF	r0x00, W
001dd6   0a53     xorlw	0x53               	XORLW	0x53
001dd8   e101     bnz	0x1ddc               	BNZ	_00411_DS_
001dda   d0e5     bra	0x1fa6               	BRA	_00374_DS_
                                           _00411_DS_:
001ddc   5000     movf	0, 0, 0             	MOVF	r0x00, W
001dde   0a5a     xorlw	0x5a               	XORLW	0x5a
001de0   e101     bnz	0x1de4               	BNZ	_00413_DS_
001de2   d090     bra	0x1f04               	BRA	_00296_DS_
                                           _00413_DS_:
001de4   5000     movf	0, 0, 0             	MOVF	r0x00, W
001de6   0a61     xorlw	0x61               	XORLW	0x61
001de8   e101     bnz	0x1dec               	BNZ	_00415_DS_
001dea   d03a     bra	0x1e60               	BRA	_00290_DS_
                                           _00415_DS_:
001dec   5000     movf	0, 0, 0             	MOVF	r0x00, W
001dee   0a62     xorlw	0x62               	XORLW	0x62
001df0   e101     bnz	0x1df4               	BNZ	_00417_DS_
001df2   d050     bra	0x1e94               	BRA	_00292_DS_
                                           _00417_DS_:
001df4   5000     movf	0, 0, 0             	MOVF	r0x00, W
001df6   0a64     xorlw	0x64               	XORLW	0x64
001df8   e101     bnz	0x1dfc               	BNZ	_00419_DS_
001dfa   d03f     bra	0x1e7a               	BRA	_00291_DS_
                                           _00419_DS_:
001dfc   5000     movf	0, 0, 0             	MOVF	r0x00, W
001dfe   0a68     xorlw	0x68               	XORLW	0x68
001e00   e101     bnz	0x1e04               	BNZ	_00421_DS_
001e02   d16a     bra	0x20d8               	BRA	_00312_DS_
                                           _00421_DS_:
001e04   5000     movf	0, 0, 0             	MOVF	r0x00, W
001e06   0a6c     xorlw	0x6c               	XORLW	0x6c
001e08   e101     bnz	0x1e0c               	BNZ	_00423_DS_
001e0a   d173     bra	0x20f2               	BRA	_00386_DS_
                                           _00423_DS_:
001e0c   5000     movf	0, 0, 0             	MOVF	r0x00, W
001e0e   0a72     xorlw	0x72               	XORLW	0x72
001e10   e101     bnz	0x1e14               	BNZ	_00425_DS_
001e12   d1a1     bra	0x2156               	BRA	_00390_DS_
                                           _00425_DS_:
001e14   5000     movf	0, 0, 0             	MOVF	r0x00, W
001e16   0a73     xorlw	0x73               	XORLW	0x73
001e18   e016     bz	0x1e46                	BZ	_00289_DS_
001e1a   5000     movf	0, 0, 0             	MOVF	r0x00, W
001e1c   0a77     xorlw	0x77               	XORLW	0x77
001e1e   e006     bz	0x1e2c                	BZ	_00288_DS_
001e20   5000     movf	0, 0, 0             	MOVF	r0x00, W
001e22   0a7a     xorlw	0x7a               	XORLW	0x7a
001e24   e101     bnz	0x1e28               	BNZ	_00431_DS_
001e26   d05d     bra	0x1ee2               	BRA	_00295_DS_
                                           _00431_DS_:
001e28   eff4     goto	0x21e8              	GOTO	_00350_DS_
001e2a   f010
                                           _00288_DS_:
                                           ;	.line	435; firmware.c	DRIVE = &forward;   putchar('w'); //usart_puts("w\n");
001e2c   0e07     movlw	0x7                	MOVLW	HIGH(_forward)
001e2e   0107     movlb	0x7                	BANKSEL	(_DRIVE + 1)
001e30   6f13     movwf	0x13, 0x1          	MOVWF	(_DRIVE + 1), B
001e32   0e06     movlw	0x6                	MOVLW	LOW(_forward)
001e34   0107     movlb	0x7                	BANKSEL	_DRIVE
001e36   6f12     movwf	0x12, 0x1          	MOVWF	_DRIVE, B
001e38   0e80     movlw	0x80               	MOVLW	0x80
001e3a   0107     movlb	0x7                	BANKSEL	(_DRIVE + 2)
001e3c   6f14     movwf	0x14, 0x1          	MOVWF	(_DRIVE + 2), B
001e3e   0e77     movlw	0x77               	MOVLW	0x77
001e40   ec0a     call	0x814, 0            	CALL	_putchar
001e42   f004
                                           ;	.line	436; firmware.c	break;
001e44   d1d1     bra	0x21e8               	BRA	_00350_DS_
                                           _00289_DS_:
                                           ;	.line	438; firmware.c	DRIVE = &backward;  putchar('s'); //usart_puts("s\n");
001e46   0e07     movlw	0x7                	MOVLW	HIGH(_backward)
001e48   0107     movlb	0x7                	BANKSEL	(_DRIVE + 1)
001e4a   6f13     movwf	0x13, 0x1          	MOVWF	(_DRIVE + 1), B
001e4c   0e08     movlw	0x8                	MOVLW	LOW(_backward)
001e4e   0107     movlb	0x7                	BANKSEL	_DRIVE
001e50   6f12     movwf	0x12, 0x1          	MOVWF	_DRIVE, B
001e52   0e80     movlw	0x80               	MOVLW	0x80
001e54   0107     movlb	0x7                	BANKSEL	(_DRIVE + 2)
001e56   6f14     movwf	0x14, 0x1          	MOVWF	(_DRIVE + 2), B
001e58   0e73     movlw	0x73               	MOVLW	0x73
001e5a   ec0a     call	0x814, 0            	CALL	_putchar
001e5c   f004
                                           ;	.line	439; firmware.c	break;
001e5e   d1c4     bra	0x21e8               	BRA	_00350_DS_
                                           _00290_DS_:
                                           ;	.line	441; firmware.c	DRIVE = &rotate_left;   putchar('a'); //usart_puts("a\n");
001e60   0e07     movlw	0x7                	MOVLW	HIGH(_rotate_left)
001e62   0107     movlb	0x7                	BANKSEL	(_DRIVE + 1)
001e64   6f13     movwf	0x13, 0x1          	MOVWF	(_DRIVE + 1), B
001e66   0e0a     movlw	0xa                	MOVLW	LOW(_rotate_left)
001e68   0107     movlb	0x7                	BANKSEL	_DRIVE
001e6a   6f12     movwf	0x12, 0x1          	MOVWF	_DRIVE, B
001e6c   0e80     movlw	0x80               	MOVLW	0x80
001e6e   0107     movlb	0x7                	BANKSEL	(_DRIVE + 2)
001e70   6f14     movwf	0x14, 0x1          	MOVWF	(_DRIVE + 2), B
001e72   0e61     movlw	0x61               	MOVLW	0x61
001e74   ec0a     call	0x814, 0            	CALL	_putchar
001e76   f004
                                           ;	.line	442; firmware.c	break;
001e78   d1b7     bra	0x21e8               	BRA	_00350_DS_
                                           _00291_DS_:
                                           ;	.line	444; firmware.c	DRIVE = &rotate_right;   putchar('d'); //usart_puts("d\n");
001e7a   0e07     movlw	0x7                	MOVLW	HIGH(_rotate_right)
001e7c   0107     movlb	0x7                	BANKSEL	(_DRIVE + 1)
001e7e   6f13     movwf	0x13, 0x1          	MOVWF	(_DRIVE + 1), B
001e80   0e0c     movlw	0xc                	MOVLW	LOW(_rotate_right)
001e82   0107     movlb	0x7                	BANKSEL	_DRIVE
001e84   6f12     movwf	0x12, 0x1          	MOVWF	_DRIVE, B
001e86   0e80     movlw	0x80               	MOVLW	0x80
001e88   0107     movlb	0x7                	BANKSEL	(_DRIVE + 2)
001e8a   6f14     movwf	0x14, 0x1          	MOVWF	(_DRIVE + 2), B
001e8c   0e64     movlw	0x64               	MOVLW	0x64
001e8e   ec0a     call	0x814, 0            	CALL	_putchar
001e90   f004
                                           ;	.line	445; firmware.c	break;
001e92   d1aa     bra	0x21e8               	BRA	_00350_DS_
                                           _00292_DS_:
                                           ;	.line	447; firmware.c	DRIVE = &halt;  putchar('b'); //usart_puts("b\n");
001e94   0e07     movlw	0x7                	MOVLW	HIGH(_halt)
001e96   0107     movlb	0x7                	BANKSEL	(_DRIVE + 1)
001e98   6f13     movwf	0x13, 0x1          	MOVWF	(_DRIVE + 1), B
001e9a   0e0e     movlw	0xe                	MOVLW	LOW(_halt)
001e9c   0107     movlb	0x7                	BANKSEL	_DRIVE
001e9e   6f12     movwf	0x12, 0x1          	MOVWF	_DRIVE, B
001ea0   0e80     movlw	0x80               	MOVLW	0x80
001ea2   0107     movlb	0x7                	BANKSEL	(_DRIVE + 2)
001ea4   6f14     movwf	0x14, 0x1          	MOVWF	(_DRIVE + 2), B
001ea6   0e62     movlw	0x62               	MOVLW	0x62
001ea8   ec0a     call	0x814, 0            	CALL	_putchar
001eaa   f004
                                           ;	.line	448; firmware.c	break;
001eac   d19d     bra	0x21e8               	BRA	_00350_DS_
                                           _00293_DS_:
                                           ;	.line	450; firmware.c	controller_end_autonomous_mode();
001eae   ec1e     call	0x7a3c, 0           	CALL	_controller_end_autonomous_mode
001eb0   f03d
                                           ;	.line	451; firmware.c	usart_puts("rc");
001eb2   0e00     movlw	0                  	MOVLW	UPPER(__str_11)
001eb4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001eb6   0e43     movlw	0x43               	MOVLW	HIGH(__str_11)
001eb8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001eba   0e8a     movlw	0x8a               	MOVLW	LOW(__str_11)
001ebc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ebe   ec5b     call	0x70b6, 0           	CALL	_usart_puts
001ec0   f038
001ec2   0e03     movlw	0x3                	MOVLW	0x03
001ec4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	452; firmware.c	break;
001ec6   d190     bra	0x21e8               	BRA	_00350_DS_
                                           _00294_DS_:
                                           ;	.line	454; firmware.c	controller_begin_autonomous_mode();
001ec8   ec04     call	0x7a08, 0           	CALL	_controller_begin_autonomous_mode
001eca   f03d
                                           ;	.line	455; firmware.c	usart_puts("sc");
001ecc   0e00     movlw	0                  	MOVLW	UPPER(__str_12)
001ece   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ed0   0e43     movlw	0x43               	MOVLW	HIGH(__str_12)
001ed2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ed4   0e8e     movlw	0x8e               	MOVLW	LOW(__str_12)
001ed6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ed8   ec5b     call	0x70b6, 0           	CALL	_usart_puts
001eda   f038
001edc   0e03     movlw	0x3                	MOVLW	0x03
001ede   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	456; firmware.c	break;
001ee0   d183     bra	0x21e8               	BRA	_00350_DS_
                                           _00295_DS_:
001ee2   0107     movlb	0x7                	BANKSEL	_SPEED
                                           ;	.line	458; firmware.c	SPEED = 000;    printf("S%d",SPEED);
001ee4   6b03     clrf	0x3, 0x1            	CLRF	_SPEED, B
001ee6   0e00     movlw	0                  	MOVLW	0x00
001ee8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001eea   0e00     movlw	0                  	MOVLW	0x00
001eec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001eee   0e00     movlw	0                  	MOVLW	UPPER(__str_13)
001ef0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ef2   0e43     movlw	0x43               	MOVLW	HIGH(__str_13)
001ef4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ef6   0e92     movlw	0x92               	MOVLW	LOW(__str_13)
001ef8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001efa   ec85     call	0x730a, 0           	CALL	_printf
001efc   f039
001efe   0e05     movlw	0x5                	MOVLW	0x05
001f00   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	459; firmware.c	break;
001f02   d172     bra	0x21e8               	BRA	_00350_DS_
                                           _00296_DS_:
                                           ;	.line	461; firmware.c	SPEED = 127;    printf("S%d",SPEED);
001f04   0e7f     movlw	0x7f               	MOVLW	0x7f
001f06   0107     movlb	0x7                	BANKSEL	_SPEED
001f08   6f03     movwf	0x3, 0x1           	MOVWF	_SPEED, B
001f0a   0e00     movlw	0                  	MOVLW	0x00
001f0c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f0e   0e7f     movlw	0x7f               	MOVLW	0x7f
001f10   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f12   0e00     movlw	0                  	MOVLW	UPPER(__str_13)
001f14   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f16   0e43     movlw	0x43               	MOVLW	HIGH(__str_13)
001f18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f1a   0e92     movlw	0x92               	MOVLW	LOW(__str_13)
001f1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f1e   ec85     call	0x730a, 0           	CALL	_printf
001f20   f039
001f22   0e05     movlw	0x5                	MOVLW	0x05
001f24   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	462; firmware.c	break;
001f26   d160     bra	0x21e8               	BRA	_00350_DS_
                                           _00297_DS_:
                                           ;	.line	464; firmware.c	SPEED += 5;
001f28   0e05     movlw	0x5                	MOVLW	0x05
001f2a   0107     movlb	0x7                	BANKSEL	_SPEED
001f2c   2703     addwf	0x3, 0x1, 0x1      	ADDWF	_SPEED, F, B
                                           ;	.line	465; firmware.c	if(SPEED < 0) SPEED = 127;  printf("S%d",SPEED);
001f2e   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
001f30   0107     movlb	0x7                	BANKSEL	_SPEED
001f32   af03     btfss	0x3, 0x7, 0x1      	BTFSS	_SPEED, 7, B
001f34   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
001f36   e303     bnc	0x1f3e               	BNC	_00299_DS_
001f38   0e7f     movlw	0x7f               	MOVLW	0x7f
001f3a   0107     movlb	0x7                	BANKSEL	_SPEED
001f3c   6f03     movwf	0x3, 0x1           	MOVWF	_SPEED, B
                                           _00299_DS_:
001f3e   c703     movff	0x703, 0           	MOVFF	_SPEED, r0x00
001f40   f000
001f42   6a01     clrf	0x1, 0              	CLRF	r0x01
001f44   0107     movlb	0x7                	BANKSEL	_SPEED
001f46   bf03     btfsc	0x3, 0x7, 0x1      	BTFSC	_SPEED, 7, B
001f48   6801     setf	0x1, 0              	SETF	r0x01
001f4a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001f4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f4e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001f50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f52   0e00     movlw	0                  	MOVLW	UPPER(__str_13)
001f54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f56   0e43     movlw	0x43               	MOVLW	HIGH(__str_13)
001f58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f5a   0e92     movlw	0x92               	MOVLW	LOW(__str_13)
001f5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f5e   ec85     call	0x730a, 0           	CALL	_printf
001f60   f039
001f62   0e05     movlw	0x5                	MOVLW	0x05
001f64   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	466; firmware.c	break;
001f66   d140     bra	0x21e8               	BRA	_00350_DS_
                                           _00300_DS_:
                                           ;	.line	468; firmware.c	SPEED -= 5;
001f68   0efb     movlw	0xfb               	MOVLW	0xfb
001f6a   0107     movlb	0x7                	BANKSEL	_SPEED
001f6c   2703     addwf	0x3, 0x1, 0x1      	ADDWF	_SPEED, F, B
                                           ;	.line	469; firmware.c	if(SPEED < 0) SPEED = 0;    printf("S%d",SPEED);
001f6e   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
001f70   0107     movlb	0x7                	BANKSEL	_SPEED
001f72   af03     btfss	0x3, 0x7, 0x1      	BTFSS	_SPEED, 7, B
                                           ; #	BCF	STATUS, 0
                                           ; #	BTFSS	STATUS, 0
                                           ; #	GOTO	_00302_DS_
                                           ; #	CLRF	_SPEED, B
                                           ; #	MOVFF	_SPEED, r0x00
001f74   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
001f76   e302     bnc	0x1f7c               	BNC	_10477_DS_
001f78   0107     movlb	0x7                	BANKSEL	_SPEED
001f7a   6b03     clrf	0x3, 0x1            	CLRF	_SPEED, B
                                           _10477_DS_:
001f7c   c703     movff	0x703, 0           	MOVFF	_SPEED, r0x00
001f7e   f000
001f80   6a01     clrf	0x1, 0              	CLRF	r0x01
001f82   0107     movlb	0x7                	BANKSEL	_SPEED
001f84   bf03     btfsc	0x3, 0x7, 0x1      	BTFSC	_SPEED, 7, B
001f86   6801     setf	0x1, 0              	SETF	r0x01
001f88   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001f8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f8c   5000     movf	0, 0, 0             	MOVF	r0x00, W
001f8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f90   0e00     movlw	0                  	MOVLW	UPPER(__str_13)
001f92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f94   0e43     movlw	0x43               	MOVLW	HIGH(__str_13)
001f96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f98   0e92     movlw	0x92               	MOVLW	LOW(__str_13)
001f9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f9c   ec85     call	0x730a, 0           	CALL	_printf
001f9e   f039
001fa0   0e05     movlw	0x5                	MOVLW	0x05
001fa2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	470; firmware.c	break;
001fa4   d121     bra	0x21e8               	BRA	_00350_DS_
                                           _00374_DS_:
                                           ;	.line	473; firmware.c	for(j=0;!usart_data_available() && j<0x7FFE;j++);
001fa6   6a00     clrf	0, 0                	CLRF	r0x00
001fa8   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00326_DS_:
001faa   ec19     call	0x7c32, 0           	CALL	_usart_data_available
001fac   f03e
001fae   6e02     movwf	0x2, 0             	MOVWF	r0x02
001fb0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001fb2   e10b     bnz	0x1fca               	BNZ	_00329_DS_
001fb4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001fb6   0f80     addlw	0x80               	ADDLW	0x80
001fb8   0f01     addlw	0x1                	ADDLW	0x01
001fba   e102     bnz	0x1fc0               	BNZ	_00432_DS_
001fbc   0efe     movlw	0xfe               	MOVLW	0xfe
001fbe   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00432_DS_:
001fc0   e204     bc	0x1fca                	BC	_00329_DS_
001fc2   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001fc4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001fc6   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
001fc8   d7f0     bra	0x1faa               	BRA	_00326_DS_
                                           _00329_DS_:
                                           ;	.line	474; firmware.c	if(j<=0x7FFE)
001fca   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001fcc   0f80     addlw	0x80               	ADDLW	0x80
001fce   0f01     addlw	0x1                	ADDLW	0x01
001fd0   e102     bnz	0x1fd6               	BNZ	_00433_DS_
001fd2   0eff     movlw	0xff               	MOVLW	0xff
001fd4   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00433_DS_:
001fd6   e204     bc	0x1fe0                	BC	_00305_DS_
                                           ;	.line	475; firmware.c	SPEED = usart_get_byte();
001fd8   ec28     call	0x7c50, 0           	CALL	_usart_get_byte
001fda   f03e
001fdc   0107     movlb	0x7                	BANKSEL	_SPEED
001fde   6f03     movwf	0x3, 0x1           	MOVWF	_SPEED, B
                                           _00305_DS_:
                                           ;	.line	476; firmware.c	printf("S%d",SPEED);
001fe0   c703     movff	0x703, 0           	MOVFF	_SPEED, r0x00
001fe2   f000
001fe4   6a01     clrf	0x1, 0              	CLRF	r0x01
001fe6   0107     movlb	0x7                	BANKSEL	_SPEED
001fe8   bf03     btfsc	0x3, 0x7, 0x1      	BTFSC	_SPEED, 7, B
001fea   6801     setf	0x1, 0              	SETF	r0x01
001fec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001fee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ff0   5000     movf	0, 0, 0             	MOVF	r0x00, W
001ff2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ff4   0e00     movlw	0                  	MOVLW	UPPER(__str_13)
001ff6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ff8   0e43     movlw	0x43               	MOVLW	HIGH(__str_13)
001ffa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ffc   0e92     movlw	0x92               	MOVLW	LOW(__str_13)
001ffe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002000   ec85     call	0x730a, 0           	CALL	_printf
002002   f039
002004   0e05     movlw	0x5                	MOVLW	0x05
002006   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	477; firmware.c	break;
002008   d0ef     bra	0x21e8               	BRA	_00350_DS_
                                           _00378_DS_:
                                           ;	.line	480; firmware.c	for(j=0;!usart_data_available() && j<0x7FFE;j++);
00200a   6a00     clrf	0, 0                	CLRF	r0x00
00200c   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00331_DS_:
00200e   ec19     call	0x7c32, 0           	CALL	_usart_data_available
002010   f03e
002012   6e02     movwf	0x2, 0             	MOVWF	r0x02
002014   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002016   e10b     bnz	0x202e               	BNZ	_00334_DS_
002018   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00201a   0f80     addlw	0x80               	ADDLW	0x80
00201c   0f01     addlw	0x1                	ADDLW	0x01
00201e   e102     bnz	0x2024               	BNZ	_00434_DS_
002020   0efe     movlw	0xfe               	MOVLW	0xfe
002022   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00434_DS_:
002024   e204     bc	0x202e                	BC	_00334_DS_
002026   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002028   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00202a   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00202c   d7f0     bra	0x200e               	BRA	_00331_DS_
                                           _00334_DS_:
                                           ;	.line	481; firmware.c	if(j<0x7FFE)
00202e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002030   0f80     addlw	0x80               	ADDLW	0x80
002032   0f01     addlw	0x1                	ADDLW	0x01
002034   e102     bnz	0x203a               	BNZ	_00435_DS_
002036   0efe     movlw	0xfe               	MOVLW	0xfe
002038   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00435_DS_:
00203a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00203c   d0d5     bra	0x21e8               	BRA	_00350_DS_
                                           ;	.line	482; firmware.c	k = usart_getc();
00203e   ecd2     call	0x7ba4, 0           	CALL	_usart_getc
002040   f03d
002042   6e00     movwf	0, 0               	MOVWF	r0x00
002044   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	485; firmware.c	for(j=0;!usart_data_available() && j<0x7FFE;j++);
002046   6a02     clrf	0x2, 0              	CLRF	r0x02
002048   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00336_DS_:
00204a   ec19     call	0x7c32, 0           	CALL	_usart_data_available
00204c   f03e
00204e   6e04     movwf	0x4, 0             	MOVWF	r0x04
002050   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002052   e10b     bnz	0x206a               	BNZ	_00339_DS_
002054   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002056   0f80     addlw	0x80               	ADDLW	0x80
002058   0f01     addlw	0x1                	ADDLW	0x01
00205a   e102     bnz	0x2060               	BNZ	_00436_DS_
00205c   0efe     movlw	0xfe               	MOVLW	0xfe
00205e   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00436_DS_:
002060   e204     bc	0x206a                	BC	_00339_DS_
002062   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
002064   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002066   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
002068   d7f0     bra	0x204a               	BRA	_00336_DS_
                                           _00339_DS_:
                                           ;	.line	486; firmware.c	if(j<0x7FFE)
00206a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00206c   0f80     addlw	0x80               	ADDLW	0x80
00206e   0f01     addlw	0x1                	ADDLW	0x01
002070   e102     bnz	0x2076               	BNZ	_00437_DS_
002072   0efe     movlw	0xfe               	MOVLW	0xfe
002074   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00437_DS_:
002076   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002078   d0b7     bra	0x21e8               	BRA	_00350_DS_
                                           ;	.line	488; firmware.c	RIGHT_SPEED = usart_getc();
00207a   ecd2     call	0x7ba4, 0           	CALL	_usart_getc
00207c   f03d
00207e   0107     movlb	0x7                	BANKSEL	_RIGHT_SPEED
002080   6f05     movwf	0x5, 0x1           	MOVWF	_RIGHT_SPEED, B
                                           ;	.line	489; firmware.c	LEFT_SPEED = k;
002082   5000     movf	0, 0, 0             	MOVF	r0x00, W
002084   0107     movlb	0x7                	BANKSEL	_LEFT_SPEED
002086   6f04     movwf	0x4, 0x1           	MOVWF	_LEFT_SPEED, B
                                           ;	.line	490; firmware.c	printf("H%c%c",LEFT_SPEED,RIGHT_SPEED);
002088   c705     movff	0x705, 0           	MOVFF	_RIGHT_SPEED, r0x00
00208a   f000
00208c   6a01     clrf	0x1, 0              	CLRF	r0x01
00208e   0107     movlb	0x7                	BANKSEL	_RIGHT_SPEED
002090   bf05     btfsc	0x5, 0x7, 0x1      	BTFSC	_RIGHT_SPEED, 7, B
002092   6801     setf	0x1, 0              	SETF	r0x01
002094   c704     movff	0x704, 0x2         	MOVFF	_LEFT_SPEED, r0x02
002096   f002
002098   6a03     clrf	0x3, 0              	CLRF	r0x03
00209a   0107     movlb	0x7                	BANKSEL	_LEFT_SPEED
00209c   bf04     btfsc	0x4, 0x7, 0x1      	BTFSC	_LEFT_SPEED, 7, B
00209e   6803     setf	0x3, 0              	SETF	r0x03
0020a0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0020a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020a4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0020a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020a8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0020aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020ac   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0020ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020b0   0e00     movlw	0                  	MOVLW	UPPER(__str_14)
0020b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020b4   0e43     movlw	0x43               	MOVLW	HIGH(__str_14)
0020b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020b8   0e96     movlw	0x96               	MOVLW	LOW(__str_14)
0020ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020bc   ec85     call	0x730a, 0           	CALL	_printf
0020be   f039
0020c0   0e07     movlw	0x7                	MOVLW	0x07
0020c2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	491; firmware.c	DRIVE = &differential;
0020c4   0e07     movlw	0x7                	MOVLW	HIGH(_differential)
0020c6   0107     movlb	0x7                	BANKSEL	(_DRIVE + 1)
0020c8   6f13     movwf	0x13, 0x1          	MOVWF	(_DRIVE + 1), B
0020ca   0e10     movlw	0x10               	MOVLW	LOW(_differential)
0020cc   0107     movlb	0x7                	BANKSEL	_DRIVE
0020ce   6f12     movwf	0x12, 0x1          	MOVWF	_DRIVE, B
0020d0   0e80     movlw	0x80               	MOVLW	0x80
0020d2   0107     movlb	0x7                	BANKSEL	(_DRIVE + 2)
0020d4   6f14     movwf	0x14, 0x1          	MOVWF	(_DRIVE + 2), B
                                           ;	.line	493; firmware.c	break;
0020d6   d088     bra	0x21e8               	BRA	_00350_DS_
                                           _00312_DS_:
                                           ;	.line	496; firmware.c	DRIVE = &differential;
0020d8   0e07     movlw	0x7                	MOVLW	HIGH(_differential)
0020da   0107     movlb	0x7                	BANKSEL	(_DRIVE + 1)
0020dc   6f13     movwf	0x13, 0x1          	MOVWF	(_DRIVE + 1), B
0020de   0e10     movlw	0x10               	MOVLW	LOW(_differential)
0020e0   0107     movlb	0x7                	BANKSEL	_DRIVE
0020e2   6f12     movwf	0x12, 0x1          	MOVWF	_DRIVE, B
0020e4   0e80     movlw	0x80               	MOVLW	0x80
0020e6   0107     movlb	0x7                	BANKSEL	(_DRIVE + 2)
0020e8   6f14     movwf	0x14, 0x1          	MOVWF	(_DRIVE + 2), B
                                           ;	.line	497; firmware.c	putchar('h');
0020ea   0e68     movlw	0x68               	MOVLW	0x68
0020ec   ec0a     call	0x814, 0            	CALL	_putchar
0020ee   f004
                                           ;	.line	498; firmware.c	break;
0020f0   d07b     bra	0x21e8               	BRA	_00350_DS_
                                           _00386_DS_:
                                           ;	.line	501; firmware.c	for(j=0;!usart_data_available() && j<0x7FFE;j++);
0020f2   6a00     clrf	0, 0                	CLRF	r0x00
0020f4   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00341_DS_:
0020f6   ec19     call	0x7c32, 0           	CALL	_usart_data_available
0020f8   f03e
0020fa   6e02     movwf	0x2, 0             	MOVWF	r0x02
0020fc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0020fe   e10b     bnz	0x2116               	BNZ	_00344_DS_
002100   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002102   0f80     addlw	0x80               	ADDLW	0x80
002104   0f01     addlw	0x1                	ADDLW	0x01
002106   e102     bnz	0x210c               	BNZ	_00438_DS_
002108   0efe     movlw	0xfe               	MOVLW	0xfe
00210a   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00438_DS_:
00210c   e204     bc	0x2116                	BC	_00344_DS_
00210e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002110   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002112   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
002114   d7f0     bra	0x20f6               	BRA	_00341_DS_
                                           _00344_DS_:
                                           ;	.line	502; firmware.c	if(j<0x7FFE)
002116   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002118   0f80     addlw	0x80               	ADDLW	0x80
00211a   0f01     addlw	0x1                	ADDLW	0x01
00211c   e102     bnz	0x2122               	BNZ	_00439_DS_
00211e   0efe     movlw	0xfe               	MOVLW	0xfe
002120   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00439_DS_:
002122   e204     bc	0x212c                	BC	_00315_DS_
                                           ;	.line	503; firmware.c	LEFT_SPEED = usart_getc();
002124   ecd2     call	0x7ba4, 0           	CALL	_usart_getc
002126   f03d
002128   0107     movlb	0x7                	BANKSEL	_LEFT_SPEED
00212a   6f04     movwf	0x4, 0x1           	MOVWF	_LEFT_SPEED, B
                                           _00315_DS_:
                                           ;	.line	504; firmware.c	printf("l%c",LEFT_SPEED);
00212c   c704     movff	0x704, 0           	MOVFF	_LEFT_SPEED, r0x00
00212e   f000
002130   6a01     clrf	0x1, 0              	CLRF	r0x01
002132   0107     movlb	0x7                	BANKSEL	_LEFT_SPEED
002134   bf04     btfsc	0x4, 0x7, 0x1      	BTFSC	_LEFT_SPEED, 7, B
002136   6801     setf	0x1, 0              	SETF	r0x01
002138   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00213a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00213c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00213e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002140   0e00     movlw	0                  	MOVLW	UPPER(__str_15)
002142   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002144   0e43     movlw	0x43               	MOVLW	HIGH(__str_15)
002146   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002148   0e9c     movlw	0x9c               	MOVLW	LOW(__str_15)
00214a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00214c   ec85     call	0x730a, 0           	CALL	_printf
00214e   f039
002150   0e05     movlw	0x5                	MOVLW	0x05
002152   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	505; firmware.c	break;
002154   d049     bra	0x21e8               	BRA	_00350_DS_
                                           _00390_DS_:
                                           ;	.line	507; firmware.c	for(j=0;!usart_data_available() && j<0x7FFE;j++);
002156   6a00     clrf	0, 0                	CLRF	r0x00
002158   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00346_DS_:
00215a   ec19     call	0x7c32, 0           	CALL	_usart_data_available
00215c   f03e
00215e   6e02     movwf	0x2, 0             	MOVWF	r0x02
002160   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002162   e10b     bnz	0x217a               	BNZ	_00349_DS_
002164   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002166   0f80     addlw	0x80               	ADDLW	0x80
002168   0f01     addlw	0x1                	ADDLW	0x01
00216a   e102     bnz	0x2170               	BNZ	_00440_DS_
00216c   0efe     movlw	0xfe               	MOVLW	0xfe
00216e   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00440_DS_:
002170   e204     bc	0x217a                	BC	_00349_DS_
002172   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002174   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002176   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
002178   d7f0     bra	0x215a               	BRA	_00346_DS_
                                           _00349_DS_:
                                           ;	.line	508; firmware.c	if(j<0x7FFE)
00217a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00217c   0f80     addlw	0x80               	ADDLW	0x80
00217e   0f01     addlw	0x1                	ADDLW	0x01
002180   e102     bnz	0x2186               	BNZ	_00441_DS_
002182   0efe     movlw	0xfe               	MOVLW	0xfe
002184   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00441_DS_:
002186   e204     bc	0x2190                	BC	_00318_DS_
                                           ;	.line	509; firmware.c	RIGHT_SPEED = usart_getc();
002188   ecd2     call	0x7ba4, 0           	CALL	_usart_getc
00218a   f03d
00218c   0107     movlb	0x7                	BANKSEL	_RIGHT_SPEED
00218e   6f05     movwf	0x5, 0x1           	MOVWF	_RIGHT_SPEED, B
                                           _00318_DS_:
                                           ;	.line	510; firmware.c	printf("r%c",RIGHT_SPEED);
002190   c705     movff	0x705, 0           	MOVFF	_RIGHT_SPEED, r0x00
002192   f000
002194   6a01     clrf	0x1, 0              	CLRF	r0x01
002196   0107     movlb	0x7                	BANKSEL	_RIGHT_SPEED
002198   bf05     btfsc	0x5, 0x7, 0x1      	BTFSC	_RIGHT_SPEED, 7, B
00219a   6801     setf	0x1, 0              	SETF	r0x01
00219c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00219e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021a0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0021a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021a4   0e00     movlw	0                  	MOVLW	UPPER(__str_16)
0021a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021a8   0e43     movlw	0x43               	MOVLW	HIGH(__str_16)
0021aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021ac   0ea0     movlw	0xa0               	MOVLW	LOW(__str_16)
0021ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021b0   ec85     call	0x730a, 0           	CALL	_printf
0021b2   f039
0021b4   0e05     movlw	0x5                	MOVLW	0x05
0021b6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00319_DS_:
0021b8   0107     movlb	0x7                	BANKSEL	_debugMode
                                           ;	.line	513; firmware.c	if(debugMode)
0021ba   5100     movf	0, 0, 0x1           	MOVF	_debugMode, W, B
0021bc   e00b     bz	0x21d4                	BZ	_00321_DS_
                                           ;	.line	514; firmware.c	usart_puts("D1");
0021be   0e00     movlw	0                  	MOVLW	UPPER(__str_17)
0021c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021c2   0e43     movlw	0x43               	MOVLW	HIGH(__str_17)
0021c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021c6   0ea4     movlw	0xa4               	MOVLW	LOW(__str_17)
0021c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021ca   ec5b     call	0x70b6, 0           	CALL	_usart_puts
0021cc   f038
0021ce   0e03     movlw	0x3                	MOVLW	0x03
0021d0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0021d2   d00a     bra	0x21e8               	BRA	_00350_DS_
                                           _00321_DS_:
                                           ;	.line	516; firmware.c	usart_puts("D0");
0021d4   0e00     movlw	0                  	MOVLW	UPPER(__str_18)
0021d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021d8   0e43     movlw	0x43               	MOVLW	HIGH(__str_18)
0021da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021dc   0ea8     movlw	0xa8               	MOVLW	LOW(__str_18)
0021de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021e0   ec5b     call	0x70b6, 0           	CALL	_usart_puts
0021e2   f038
0021e4   0e03     movlw	0x3                	MOVLW	0x03
0021e6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00350_DS_:
                                           ;	.line	521; firmware.c	}
0021e8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0021ea   f004
0021ec   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0021ee   f003
0021f0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0021f2   f002
0021f4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0021f6   f001
0021f8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0021fa   f000
0021fc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0021fe   ffd9
002200   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__usart_get_byte	code
                                           _usart_get_byte:
                                           ;	.line	418; firmware.c	char usart_get_byte(void)
007c50   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007c52   ffe5
007c54   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007c56   ffd9
007c58   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007c5a   ffe5
                                           ;	.line	420; firmware.c	return RCREG;
007c5c   cfae     movff	0xfae, 0           	MOVFF	_RCREG, r0x00
007c5e   f000
007c60   5000     movf	0, 0, 0             	MOVF	r0x00, W
007c62   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007c64   f000
007c66   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007c68   ffd9
007c6a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__usart_get_byte_available	code
                                           _usart_get_byte_available:
                                           ;	.line	409; firmware.c	char usart_get_byte_available(void)
007bcc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007bce   ffe5
007bd0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007bd2   ffd9
007bd4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007bd6   ffe5
                                           ;	.line	411; firmware.c	if(PIR1bits.RCIF)
007bd8   aa9e     btfss	0x9e, 0x5, 0       	BTFSS	_PIR1bits, 5
007bda   d004     bra	0x7be4               	BRA	_00273_DS_
                                           ;	.line	412; firmware.c	return RCREG;
007bdc   cfae     movff	0xfae, 0           	MOVFF	_RCREG, r0x00
007bde   f000
007be0   5000     movf	0, 0, 0             	MOVF	r0x00, W
007be2   d001     bra	0x7be6               	BRA	_00275_DS_
                                           _00273_DS_:
                                           ;	.line	414; firmware.c	return 0;
007be4   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00275_DS_:
007be6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007be8   f000
007bea   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007bec   ffd9
007bee   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__usart_data_available	code
                                           _usart_data_available:
                                           ;	.line	403; firmware.c	char usart_data_available(void)
007c32   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007c34   ffe5
007c36   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007c38   ffd9
007c3a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007c3c   ffe5
                                           ;	.line	405; firmware.c	return PIR1bits.RCIF;
007c3e   6a00     clrf	0, 0                	CLRF	r0x00
007c40   ba9e     btfsc	0x9e, 0x5, 0       	BTFSC	_PIR1bits, 5
007c42   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
007c44   5000     movf	0, 0, 0             	MOVF	r0x00, W
007c46   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007c48   f000
007c4a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007c4c   ffd9
007c4e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__reset_usart	code
                                           _reset_usart:
                                           ;	.line	397; firmware.c	void reset_usart()
007cdc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007cde   ffe5
007ce0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007ce2   ffd9
                                           ;	.line	399; firmware.c	PIR1bits.RCIF = 0;
007ce4   9a9e     bcf	0x9e, 0x5, 0         	BCF	_PIR1bits, 5
007ce6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007ce8   ffd9
007cea   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__autonomous_routine0	code
                                           _autonomous_routine0:
                                           ;	.line	354; firmware.c	void    autonomous_routine0(void)
0064b6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0064b8   ffe5
0064ba   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0064bc   ffd9
0064be   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0064c0   ffe5
0064c2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0064c4   ffe5
0064c6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0064c8   ffe5
                                           ;	.line	357; firmware.c	DPRINTF("Starting autonomous routine...\n");
0064ca   0e00     movlw	0                  	MOVLW	UPPER(__str_9)
0064cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0064ce   0e43     movlw	0x43               	MOVLW	HIGH(__str_9)
0064d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0064d2   0e4c     movlw	0x4c               	MOVLW	LOW(__str_9)
0064d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0064d6   ec85     call	0x730a, 0           	CALL	_printf
0064d8   f039
0064da   0e03     movlw	0x3                	MOVLW	0x03
0064dc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	361; firmware.c	set_drives_LR(AUTON_DRIVE_SPEED,AUTON_DRIVE_SPEED);
0064de   0e46     movlw	0x46               	MOVLW	0x46
0064e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0064e2   0e46     movlw	0x46               	MOVLW	0x46
0064e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0064e6   ecf5     call	0x73ea, 0           	CALL	_set_drives_LR
0064e8   f039
0064ea   0e02     movlw	0x2                	MOVLW	0x02
0064ec   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	362; firmware.c	controller_submit_data(WAIT);
0064ee   0e01     movlw	0x1                	MOVLW	0x01
0064f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0064f2   eca6     call	0x5d4c, 0           	CALL	_controller_submit_data
0064f4   f02e
0064f6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	366; firmware.c	for(i=0; (rc_read_data(6) != -127) && (i < 400);i++)
0064f8   6a00     clrf	0, 0                	CLRF	r0x00
0064fa   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00245_DS_:
0064fc   0e06     movlw	0x6                	MOVLW	0x06
0064fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006500   ec2e     call	0x565c, 0           	CALL	_rc_read_data
006502   f02b
006504   6e02     movwf	0x2, 0             	MOVWF	r0x02
006506   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
006508   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00650a   0a81     xorlw	0x81               	XORLW	0x81
00650c   e013     bz	0x6534                	BZ	_00248_DS_
00650e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006510   0f80     addlw	0x80               	ADDLW	0x80
006512   0f7f     addlw	0x7f               	ADDLW	0x7f
006514   e102     bnz	0x651a               	BNZ	_00257_DS_
006516   0e90     movlw	0x90               	MOVLW	0x90
006518   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00257_DS_:
00651a   e20c     bc	0x6534                	BC	_00248_DS_
                                           ;	.line	368; firmware.c	delay_msec(50);
00651c   0e00     movlw	0                  	MOVLW	0x00
00651e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006520   0e32     movlw	0x32               	MOVLW	0x32
006522   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006524   ecbe     call	0x737c, 0           	CALL	_delay_msec
006526   f039
006528   0e02     movlw	0x2                	MOVLW	0x02
00652a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	366; firmware.c	for(i=0; (rc_read_data(6) != -127) && (i < 400);i++)
00652c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00652e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006530   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
006532   d7e4     bra	0x64fc               	BRA	_00245_DS_
                                           _00248_DS_:
006534   0107     movlb	0x7                	BANKSEL	_halt
                                           ;	.line	389; firmware.c	set_drives_LR(halt.left_multiplier,halt.left_multiplier);
006536   510e     movf	0xe, 0, 0x1         	MOVF	_halt, W, B
006538   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00653a   0107     movlb	0x7                	BANKSEL	_halt
00653c   510e     movf	0xe, 0, 0x1         	MOVF	_halt, W, B
00653e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006540   ecf5     call	0x73ea, 0           	CALL	_set_drives_LR
006542   f039
006544   0e02     movlw	0x2                	MOVLW	0x02
006546   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	390; firmware.c	controller_submit_data(WAIT);
006548   0e01     movlw	0x1                	MOVLW	0x01
00654a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00654c   eca6     call	0x5d4c, 0           	CALL	_controller_submit_data
00654e   f02e
006550   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	393; firmware.c	DPRINTF("Ending autonomous routine...\n");
006552   0e00     movlw	0                  	MOVLW	UPPER(__str_10)
006554   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006556   0e43     movlw	0x43               	MOVLW	HIGH(__str_10)
006558   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00655a   0e6c     movlw	0x6c               	MOVLW	LOW(__str_10)
00655c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00655e   ec85     call	0x730a, 0           	CALL	_printf
006560   f039
006562   0e03     movlw	0x3                	MOVLW	0x03
006564   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006566   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006568   f002
00656a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00656c   f001
00656e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006570   f000
006572   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006574   ffd9
006576   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__arcade_drive_routine	code
                                           _arcade_drive_routine:
                                           ;	.line	329; firmware.c	void    arcade_drive_routine(void)
00663a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00663c   ffe5
00663e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006640   ffd9
006642   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006644   ffe5
006646   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006648   ffe5
00664a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00664c   ffe5
00664e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006650   ffe5
006652   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
006654   ffe5
006656   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
006658   ffe5
00665a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00665c   ffe5
00665e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
006660   ffe5
                                           ;	.line	334; firmware.c	joy_x = rc_read_data(ARCADE_DRIVE_X_CHAN);
006662   0e04     movlw	0x4                	MOVLW	0x04
006664   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006666   ec2e     call	0x565c, 0           	CALL	_rc_read_data
006668   f02b
00666a   6e00     movwf	0, 0               	MOVWF	r0x00
00666c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	335; firmware.c	joy_y = -rc_read_data(ARCADE_DRIVE_Y_CHAN);
00666e   0e03     movlw	0x3                	MOVLW	0x03
006670   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006672   ec2e     call	0x565c, 0           	CALL	_rc_read_data
006674   f02b
006676   6e01     movwf	0x1, 0             	MOVWF	r0x01
006678   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00667a   6c01     negf	0x1, 0              	NEGF	r0x01
                                           ;	.line	336; firmware.c	arcade_drive(joy_x, joy_y, PWM_MAX, &left_power, &right_power);
00667c   0e02     movlw	0x2                	MOVLW	HIGH(_arcade_drive_routine_left_power_1_1)
00667e   6e03     movwf	0x3, 0             	MOVWF	r0x03
006680   0ee3     movlw	0xe3               	MOVLW	LOW(_arcade_drive_routine_left_power_1_1)
006682   6e02     movwf	0x2, 0             	MOVWF	r0x02
006684   0e80     movlw	0x80               	MOVLW	0x80
006686   6e04     movwf	0x4, 0             	MOVWF	r0x04
006688   0e02     movlw	0x2                	MOVLW	HIGH(_arcade_drive_routine_right_power_1_1)
00668a   6e06     movwf	0x6, 0             	MOVWF	r0x06
00668c   0ee4     movlw	0xe4               	MOVLW	LOW(_arcade_drive_routine_right_power_1_1)
00668e   6e05     movwf	0x5, 0             	MOVWF	r0x05
006690   0e80     movlw	0x80               	MOVLW	0x80
                                           ; #	MOVWF	r0x07
                                           ; #	MOVF	r0x07, W
006692   6e07     movwf	0x7, 0             	MOVWF	r0x07
006694   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006696   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
006698   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00669a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00669c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00669e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0066a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066a2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0066a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066a6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0066a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066aa   0e7f     movlw	0x7f               	MOVLW	0x7f
0066ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066ae   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0066b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066b2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0066b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066b6   ec62     call	0x28c4, 0           	CALL	_arcade_drive
0066b8   f014
0066ba   0e09     movlw	0x9                	MOVLW	0x09
0066bc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0066be   0102     movlb	0x2                	BANKSEL	_arcade_drive_routine_right_power_1_1
                                           ;	.line	340; firmware.c	set_drives_LR(left_power,right_power);
0066c0   51e4     movf	0xe4, 0, 0x1        	MOVF	_arcade_drive_routine_right_power_1_1, W, B
0066c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066c4   0102     movlb	0x2                	BANKSEL	_arcade_drive_routine_left_power_1_1
0066c6   51e3     movf	0xe3, 0, 0x1        	MOVF	_arcade_drive_routine_left_power_1_1, W, B
0066c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066ca   ecf5     call	0x73ea, 0           	CALL	_set_drives_LR
0066cc   f039
0066ce   0e02     movlw	0x2                	MOVLW	0x02
0066d0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0066d2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0066d4   f007
0066d6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0066d8   f006
0066da   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0066dc   f005
0066de   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0066e0   f004
0066e2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0066e4   f003
0066e6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0066e8   f002
0066ea   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0066ec   f001
0066ee   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0066f0   f000
0066f2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0066f4   ffd9
0066f6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__tank_drive_routine	code
                                           _tank_drive_routine:
                                           ;	.line	307; firmware.c	void    tank_drive_routine(void)
0077ea   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0077ec   ffe5
0077ee   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0077f0   ffd9
0077f2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0077f4   ffe5
                                           ;	.line	313; firmware.c	left_power = -rc_read_data(TANK_DRIVE_LEFT_CHAN);
0077f6   0e03     movlw	0x3                	MOVLW	0x03
0077f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0077fa   ec2e     call	0x565c, 0           	CALL	_rc_read_data
0077fc   f02b
0077fe   6e00     movwf	0, 0               	MOVWF	r0x00
007800   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
007802   1c00     comf	0, 0, 0             	COMF	r0x00, W
007804   0102     movlb	0x2                	BANKSEL	_tank_drive_routine_left_power_1_1
007806   6fe1     movwf	0xe1, 0x1          	MOVWF	_tank_drive_routine_left_power_1_1, B
007808   2be1     incf	0xe1, 0x1, 0x1      	INCF	_tank_drive_routine_left_power_1_1, F, B
                                           ;	.line	314; firmware.c	right_power = rc_read_data(TANK_DRIVE_RIGHT_CHAN);
00780a   0e02     movlw	0x2                	MOVLW	0x02
00780c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00780e   ec2e     call	0x565c, 0           	CALL	_rc_read_data
007810   f02b
007812   0102     movlb	0x2                	BANKSEL	_tank_drive_routine_right_power_1_1
007814   6fe2     movwf	0xe2, 0x1          	MOVWF	_tank_drive_routine_right_power_1_1, B
007816   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
007818   0102     movlb	0x2                	BANKSEL	_tank_drive_routine_right_power_1_1
                                           ;	.line	317; firmware.c	set_drives_LR(left_power,right_power);
00781a   51e2     movf	0xe2, 0, 0x1        	MOVF	_tank_drive_routine_right_power_1_1, W, B
00781c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00781e   0102     movlb	0x2                	BANKSEL	_tank_drive_routine_left_power_1_1
007820   51e1     movf	0xe1, 0, 0x1        	MOVF	_tank_drive_routine_left_power_1_1, W, B
007822   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007824   ecf5     call	0x73ea, 0           	CALL	_set_drives_LR
007826   f039
007828   0e02     movlw	0x2                	MOVLW	0x02
00782a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00782c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00782e   f000
007830   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007832   ffd9
007834   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__rc_routine	code
                                           _rc_routine:
                                           ;	.line	243; firmware.c	void    rc_routine(void)
0031dc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0031de   ffe5
0031e0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0031e2   ffd9
0031e4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0031e6   ffe5
0031e8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0031ea   ffe5
0031ec   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0031ee   ffe5
0031f0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0031f2   ffe5
0031f4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0031f6   ffe5
0031f8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0031fa   ffe5
0031fc   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0031fe   ffe5
003200   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003202   ffe5
003204   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
003206   ffe5
003208   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00320a   ffe5
00320c   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
00320e   ffe5
003210   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
003212   ffe5
003214   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
003216   ffe5
003218   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
00321a   ffe5
00321c   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
00321e   ffe5
003220   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
003222   ffe5
                                           ;	.line	258; firmware.c	if ( io_read_digital(ARCADE_JUMPER_PORT) == 0 )
003224   0e04     movlw	0x4                	MOVLW	0x04
003226   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003228   ec7a     call	0x46f4, 0           	CALL	_io_read_digital
00322a   f023
00322c   6e00     movwf	0, 0               	MOVWF	r0x00
00322e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
003230   5000     movf	0, 0, 0             	MOVF	r0x00, W
003232   e103     bnz	0x323a               	BNZ	_00207_DS_
                                           ;	.line	259; firmware.c	arcade_drive_routine();
003234   ec1d     call	0x663a, 0           	CALL	_arcade_drive_routine
003236   f033
003238   d002     bra	0x323e               	BRA	_00208_DS_
                                           _00207_DS_:
                                           ;	.line	261; firmware.c	tank_drive_routine();
00323a   ecf5     call	0x77ea, 0           	CALL	_tank_drive_routine
00323c   f03b
                                           _00208_DS_:
                                           ;	.line	263; firmware.c	controller_submit_data(NO_WAIT);
00323e   0e00     movlw	0                  	MOVLW	0x00
003240   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003242   eca6     call	0x5d4c, 0           	CALL	_controller_submit_data
003244   f02e
003246   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	265; firmware.c	if(sonar_read(SONAR_DOWN_SENSOR_INT) > 15)
003248   0e01     movlw	0x1                	MOVLW	0x01
00324a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00324c   ec77     call	0x2eee, 0           	CALL	_sonar_read
00324e   f017
003250   6e00     movwf	0, 0               	MOVWF	r0x00
003252   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
003254   f001
003256   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
003258   0e00     movlw	0                  	MOVLW	0x00
00325a   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
00325c   e102     bnz	0x3262               	BNZ	_00224_DS_
00325e   0e10     movlw	0x10               	MOVLW	0x10
003260   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00224_DS_:
003262   e302     bnc	0x3268               	BNC	_00210_DS_
                                           ;	.line	267; firmware.c	cliff_avoidance();
003264   ec95     call	0x752a, 0           	CALL	_cliff_avoidance
003266   f03a
                                           _00210_DS_:
                                           ;	.line	276; firmware.c	elapsed_time = SYSTEM_TIMER_SECONDS();
003268   ec3c     call	0x5078, 0           	CALL	_timer0_read32
00326a   f028
00326c   6e00     movwf	0, 0               	MOVWF	r0x00
00326e   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
003270   f001
003272   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
003274   f002
003276   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
003278   f003
00327a   a6d5     btfss	0xd5, 0x3, 0       	BTFSS	_T0CON, 3
00327c   d004     bra	0x3286               	BRA	_00217_DS_
00327e   0e01     movlw	0x1                	MOVLW	0x01
003280   6e04     movwf	0x4, 0             	MOVWF	r0x04
003282   6a05     clrf	0x5, 0              	CLRF	r0x05
003284   d00f     bra	0x32a4               	BRA	_00218_DS_
                                           _00217_DS_:
003286   0e07     movlw	0x7                	MOVLW	0x07
003288   14d5     andwf	0xd5, 0, 0         	ANDWF	_T0CON, W
00328a   6e06     movwf	0x6, 0             	MOVWF	r0x06
00328c   0e02     movlw	0x2                	MOVLW	0x02
00328e   6e04     movwf	0x4, 0             	MOVWF	r0x04
003290   0e00     movlw	0                  	MOVLW	0x00
003292   6e05     movwf	0x5, 0             	MOVWF	r0x05
003294   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003296   e006     bz	0x32a4                	BZ	_00218_DS_
003298   6ce8     negf	0xe8, 0             	NEGF	WREG
00329a   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
                                           _00228_DS_:
00329c   3604     rlcf	0x4, 0x1, 0         	RLCF	r0x04, F
00329e   3605     rlcf	0x5, 0x1, 0         	RLCF	r0x05, F
0032a0   0f01     addlw	0x1                	ADDLW	0x01
0032a2   e3fc     bnc	0x329c               	BNC	_00228_DS_
                                           _00218_DS_:
0032a4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0032a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032a8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0032aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032ac   0e27     movlw	0x27               	MOVLW	0x27
0032ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032b0   0e10     movlw	0x10               	MOVLW	0x10
0032b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032b4   ec3d     call	0x5a7a, 0           	CALL	__divsint
0032b6   f02d
0032b8   6e04     movwf	0x4, 0             	MOVWF	r0x04
0032ba   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
0032bc   f005
0032be   0e04     movlw	0x4                	MOVLW	0x04
0032c0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0032c2   6ae8     clrf	0xe8, 0             	CLRF	WREG
0032c4   be05     btfsc	0x5, 0x7, 0        	BTFSC	r0x05, 7
0032c6   0eff     movlw	0xff               	MOVLW	0xff
0032c8   6e06     movwf	0x6, 0             	MOVWF	r0x06
                                           ; #	MOVWF	r0x07
                                           ; #	MOVF	r0x07, W
0032ca   6e07     movwf	0x7, 0             	MOVWF	r0x07
0032cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032ce   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0032d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032d2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0032d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032d6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0032d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032da   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0032dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032de   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0032e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032e2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0032e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032e6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0032e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032ea   eca1     call	0x5542, 0           	CALL	__divulong
0032ec   f02a
0032ee   6e00     movwf	0, 0               	MOVWF	r0x00
0032f0   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0032f2   f001
0032f4   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0032f6   f002
0032f8   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
0032fa   f003
0032fc   0e08     movlw	0x8                	MOVLW	0x08
0032fe   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003300   0e00     movlw	0                  	MOVLW	0x00
003302   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003304   0e00     movlw	0                  	MOVLW	0x00
003306   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003308   0e03     movlw	0x3                	MOVLW	0x03
00330a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00330c   0ee8     movlw	0xe8               	MOVLW	0xe8
00330e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003310   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003312   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003314   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003316   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003318   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00331a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00331c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00331e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003320   eca1     call	0x5542, 0           	CALL	__divulong
003322   f02a
003324   0102     movlb	0x2                	BANKSEL	_rc_routine_elapsed_time_1_1
003326   6f85     movwf	0x85, 0x1          	MOVWF	_rc_routine_elapsed_time_1_1, B
003328   cff3     movff	0xff3, 0x286       	MOVFF	PRODL, (_rc_routine_elapsed_time_1_1 + 1)
00332a   f286
00332c   cff4     movff	0xff4, 0x287       	MOVFF	PRODH, (_rc_routine_elapsed_time_1_1 + 2)
00332e   f287
003330   cfe9     movff	0xfe9, 0x288       	MOVFF	FSR0L, (_rc_routine_elapsed_time_1_1 + 3)
003332   f288
003334   0e08     movlw	0x8                	MOVLW	0x08
003336   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003338   0102     movlb	0x2                	BANKSEL	(_rc_routine_elapsed_time_1_1 + 3)
                                           ;	.line	279; firmware.c	if ( elapsed_time > old_time )
00333a   5188     movf	0x88, 0, 0x1        	MOVF	(_rc_routine_elapsed_time_1_1 + 3), W, B
00333c   0107     movlb	0x7                	BANKSEL	(_rc_routine_old_time_1_1 + 3)
00333e   5d1a     subwf	0x1a, 0, 0x1       	SUBWF	(_rc_routine_old_time_1_1 + 3), W, B
003340   e10e     bnz	0x335e               	BNZ	_00229_DS_
003342   0102     movlb	0x2                	BANKSEL	(_rc_routine_elapsed_time_1_1 + 2)
003344   5187     movf	0x87, 0, 0x1        	MOVF	(_rc_routine_elapsed_time_1_1 + 2), W, B
003346   0107     movlb	0x7                	BANKSEL	(_rc_routine_old_time_1_1 + 2)
003348   5d19     subwf	0x19, 0, 0x1       	SUBWF	(_rc_routine_old_time_1_1 + 2), W, B
00334a   e109     bnz	0x335e               	BNZ	_00229_DS_
00334c   0102     movlb	0x2                	BANKSEL	(_rc_routine_elapsed_time_1_1 + 1)
00334e   5186     movf	0x86, 0, 0x1        	MOVF	(_rc_routine_elapsed_time_1_1 + 1), W, B
003350   0107     movlb	0x7                	BANKSEL	(_rc_routine_old_time_1_1 + 1)
003352   5d18     subwf	0x18, 0, 0x1       	SUBWF	(_rc_routine_old_time_1_1 + 1), W, B
003354   e104     bnz	0x335e               	BNZ	_00229_DS_
003356   0102     movlb	0x2                	BANKSEL	_rc_routine_elapsed_time_1_1
003358   5185     movf	0x85, 0, 0x1        	MOVF	_rc_routine_elapsed_time_1_1, W, B
00335a   0107     movlb	0x7                	BANKSEL	_rc_routine_old_time_1_1
00335c   5d17     subwf	0x17, 0, 0x1       	SUBWF	_rc_routine_old_time_1_1, W, B
                                           _00229_DS_:
00335e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003360   d087     bra	0x3470               	BRA	_00215_DS_
                                           ;	.line	281; firmware.c	old_time = elapsed_time;
003362   c285     movff	0x285, 0x717       	MOVFF	_rc_routine_elapsed_time_1_1, _rc_routine_old_time_1_1
003364   f717
003366   c286     movff	0x286, 0x718       	MOVFF	(_rc_routine_elapsed_time_1_1 + 1), (_rc_routine_old_time_1_1 + 1)
003368   f718
00336a   c287     movff	0x287, 0x719       	MOVFF	(_rc_routine_elapsed_time_1_1 + 2), (_rc_routine_old_time_1_1 + 2)
00336c   f719
00336e   c288     movff	0x288, 0x71a       	MOVFF	(_rc_routine_elapsed_time_1_1 + 3), (_rc_routine_old_time_1_1 + 3)
003370   f71a
003372   0107     movlb	0x7                	BANKSEL	_debugMode
                                           ;	.line	289; firmware.c	if(debugMode)
003374   5100     movf	0, 0, 0x1           	MOVF	_debugMode, W, B
003376   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
003378   d07b     bra	0x3470               	BRA	_00215_DS_
                                           ;	.line	290; firmware.c	DPRINTF("ET: %ld  RC: %d %d %d %d %d %d %d  Jumper: %d\n",
00337a   0e04     movlw	0x4                	MOVLW	0x04
00337c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00337e   ec7a     call	0x46f4, 0           	CALL	_io_read_digital
003380   f023
003382   6e00     movwf	0, 0               	MOVWF	r0x00
003384   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
003386   6a01     clrf	0x1, 0              	CLRF	r0x01
003388   be00     btfsc	0, 0x7, 0          	BTFSC	r0x00, 7
00338a   6801     setf	0x1, 0              	SETF	r0x01
00338c   0e06     movlw	0x6                	MOVLW	0x06
00338e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003390   ec2e     call	0x565c, 0           	CALL	_rc_read_data
003392   f02b
003394   6e02     movwf	0x2, 0             	MOVWF	r0x02
003396   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
003398   6a03     clrf	0x3, 0              	CLRF	r0x03
00339a   be02     btfsc	0x2, 0x7, 0        	BTFSC	r0x02, 7
00339c   6803     setf	0x3, 0              	SETF	r0x03
00339e   0e05     movlw	0x5                	MOVLW	0x05
0033a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0033a2   ec2e     call	0x565c, 0           	CALL	_rc_read_data
0033a4   f02b
0033a6   6e04     movwf	0x4, 0             	MOVWF	r0x04
0033a8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0033aa   6a05     clrf	0x5, 0              	CLRF	r0x05
0033ac   be04     btfsc	0x4, 0x7, 0        	BTFSC	r0x04, 7
0033ae   6805     setf	0x5, 0              	SETF	r0x05
0033b0   0e04     movlw	0x4                	MOVLW	0x04
0033b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0033b4   ec2e     call	0x565c, 0           	CALL	_rc_read_data
0033b6   f02b
0033b8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0033ba   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0033bc   6a07     clrf	0x7, 0              	CLRF	r0x07
0033be   be06     btfsc	0x6, 0x7, 0        	BTFSC	r0x06, 7
0033c0   6807     setf	0x7, 0              	SETF	r0x07
0033c2   0e03     movlw	0x3                	MOVLW	0x03
0033c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0033c6   ec2e     call	0x565c, 0           	CALL	_rc_read_data
0033c8   f02b
0033ca   6e08     movwf	0x8, 0             	MOVWF	r0x08
0033cc   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0033ce   6a09     clrf	0x9, 0              	CLRF	r0x09
0033d0   be08     btfsc	0x8, 0x7, 0        	BTFSC	r0x08, 7
0033d2   6809     setf	0x9, 0              	SETF	r0x09
0033d4   0e02     movlw	0x2                	MOVLW	0x02
0033d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0033d8   ec2e     call	0x565c, 0           	CALL	_rc_read_data
0033da   f02b
0033dc   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0033de   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0033e0   6a0b     clrf	0xb, 0              	CLRF	r0x0b
0033e2   be0a     btfsc	0xa, 0x7, 0        	BTFSC	r0x0a, 7
0033e4   680b     setf	0xb, 0              	SETF	r0x0b
0033e6   0e01     movlw	0x1                	MOVLW	0x01
0033e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0033ea   ec2e     call	0x565c, 0           	CALL	_rc_read_data
0033ec   f02b
0033ee   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0033f0   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0033f2   6a0d     clrf	0xd, 0              	CLRF	r0x0d
0033f4   be0c     btfsc	0xc, 0x7, 0        	BTFSC	r0x0c, 7
0033f6   680d     setf	0xd, 0              	SETF	r0x0d
0033f8   ec0f     call	0x721e, 0           	CALL	_rc_read_status
0033fa   f039
0033fc   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
0033fe   6a0f     clrf	0xf, 0              	CLRF	r0x0f
003400   be0e     btfsc	0xe, 0x7, 0        	BTFSC	r0x0e, 7
003402   680f     setf	0xf, 0              	SETF	r0x0f
003404   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003406   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003408   5000     movf	0, 0, 0             	MOVF	r0x00, W
00340a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00340c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00340e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003410   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003412   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003414   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003416   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003418   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00341a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00341c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00341e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003420   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003422   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003424   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003426   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003428   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00342a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00342c   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
00342e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003430   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
003432   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003434   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
003436   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003438   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
00343a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00343c   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
00343e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003440   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
003442   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003444   0102     movlb	0x2                	BANKSEL	(_rc_routine_elapsed_time_1_1 + 3)
003446   5188     movf	0x88, 0, 0x1        	MOVF	(_rc_routine_elapsed_time_1_1 + 3), W, B
003448   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00344a   0102     movlb	0x2                	BANKSEL	(_rc_routine_elapsed_time_1_1 + 2)
00344c   5187     movf	0x87, 0, 0x1        	MOVF	(_rc_routine_elapsed_time_1_1 + 2), W, B
00344e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003450   0102     movlb	0x2                	BANKSEL	(_rc_routine_elapsed_time_1_1 + 1)
003452   5186     movf	0x86, 0, 0x1        	MOVF	(_rc_routine_elapsed_time_1_1 + 1), W, B
003454   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003456   0102     movlb	0x2                	BANKSEL	_rc_routine_elapsed_time_1_1
003458   5185     movf	0x85, 0, 0x1        	MOVF	_rc_routine_elapsed_time_1_1, W, B
00345a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00345c   0e00     movlw	0                  	MOVLW	UPPER(__str_8)
00345e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003460   0e43     movlw	0x43               	MOVLW	HIGH(__str_8)
003462   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003464   0e1c     movlw	0x1c               	MOVLW	LOW(__str_8)
003466   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003468   ec85     call	0x730a, 0           	CALL	_printf
00346a   f039
00346c   0e17     movlw	0x17               	MOVLW	0x17
00346e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00215_DS_:
003470   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
003472   f00f
003474   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
003476   f00e
003478   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
00347a   f00d
00347c   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
00347e   f00c
003480   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
003482   f00b
003484   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
003486   f00a
003488   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00348a   f009
00348c   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00348e   f008
003490   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
003492   f007
003494   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
003496   f006
003498   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00349a   f005
00349c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00349e   f004
0034a0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0034a2   f003
0034a4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0034a6   f002
0034a8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0034aa   f001
0034ac   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0034ae   f000
0034b0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0034b2   ffd9
0034b4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__custom_init	code
                                           _custom_init:
                                           ;	.line	188; firmware.c	void    custom_init(void)
0041e8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0041ea   ffe5
0041ec   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0041ee   ffd9
0041f0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0041f2   ffe5
0041f4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0041f6   ffe5
0041f8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0041fa   ffe5
                                           ;	.line	197; firmware.c	rotation_circumference_cm = (PI * TRACK_WIDTH_mm) / 10;
0041fc   0e3e     movlw	0x3e               	MOVLW	0x3e
0041fe   0102     movlb	0x2                	BANKSEL	_rotation_circumference_cm
004200   6fcc     movwf	0xcc, 0x1          	MOVWF	_rotation_circumference_cm, B
004202   0102     movlb	0x2                	BANKSEL	(_rotation_circumference_cm + 1)
004204   6bcd     clrf	0xcd, 0x1           	CLRF	(_rotation_circumference_cm + 1), B
                                           ;	.line	198; firmware.c	wheel_circumference_cm = (PI * MEDIUM_WHEEL_DIA_mm) / 10;
004206   0e2f     movlw	0x2f               	MOVLW	0x2f
004208   0102     movlb	0x2                	BANKSEL	_wheel_circumference_cm
00420a   6fca     movwf	0xca, 0x1          	MOVWF	_wheel_circumference_cm, B
00420c   0102     movlb	0x2                	BANKSEL	(_wheel_circumference_cm + 1)
00420e   6bcb     clrf	0xcb, 0x1           	CLRF	(_wheel_circumference_cm + 1), B
                                           ;	.line	199; firmware.c	rotation_deg_per_tick = (360 / 90) * wheel_circumference_cm / rotation_circumference_cm;
004210   0e03     movlw	0x3                	MOVLW	0x03
004212   0102     movlb	0x2                	BANKSEL	_rotation_deg_per_tick
004214   6fc8     movwf	0xc8, 0x1          	MOVWF	_rotation_deg_per_tick, B
004216   0102     movlb	0x2                	BANKSEL	(_rotation_deg_per_tick + 1)
004218   6bc9     clrf	0xc9, 0x1           	CLRF	(_rotation_deg_per_tick + 1), B
                                           ;	.line	200; firmware.c	distance_cm_per_15_ticks = 15 * wheel_circumference_cm / 90;
00421a   0e07     movlw	0x7                	MOVLW	0x07
00421c   0102     movlb	0x2                	BANKSEL	_distance_cm_per_15_ticks
00421e   6fce     movwf	0xce, 0x1          	MOVWF	_distance_cm_per_15_ticks, B
004220   0102     movlb	0x2                	BANKSEL	(_distance_cm_per_15_ticks + 1)
004222   6bcf     clrf	0xcf, 0x1           	CLRF	(_distance_cm_per_15_ticks + 1), B
                                           ;	.line	206; firmware.c	for (c = 1; c <= 15; ++c)
004224   0e01     movlw	0x1                	MOVLW	0x01
004226   6e00     movwf	0, 0               	MOVWF	r0x00
004228   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00176_DS_:
00422a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00422c   0f80     addlw	0x80               	ADDLW	0x80
00422e   0f80     addlw	0x80               	ADDLW	0x80
004230   e102     bnz	0x4236               	BNZ	_00199_DS_
004232   0e10     movlw	0x10               	MOVLW	0x10
004234   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00199_DS_:
004236   e20e     bc	0x4254                	BC	_00179_DS_
                                           ;	.line	207; firmware.c	io_set_direction(c, IO_DIRECTION_IN);
004238   5000     movf	0, 0, 0             	MOVF	r0x00, W
00423a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00423c   0e01     movlw	0x1                	MOVLW	0x01
00423e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004240   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004242   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004244   ecfa     call	0x3df4, 0           	CALL	_io_set_direction
004246   f01e
004248   0e02     movlw	0x2                	MOVLW	0x02
00424a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	206; firmware.c	for (c = 1; c <= 15; ++c)
00424c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00424e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004250   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
004252   d7eb     bra	0x422a               	BRA	_00176_DS_
                                           _00179_DS_:
                                           ;	.line	213; firmware.c	io_set_analog_port_count(ANALOG_PORTS);
004254   0e02     movlw	0x2                	MOVLW	0x02
004256   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004258   ec41     call	0x7882, 0           	CALL	_io_set_analog_port_count
00425a   f03c
00425c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	217; firmware.c	for (c = 16; c <= 16; ++c)
00425e   0e10     movlw	0x10               	MOVLW	0x10
004260   6e00     movwf	0, 0               	MOVWF	r0x00
004262   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00180_DS_:
004264   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004266   0f80     addlw	0x80               	ADDLW	0x80
004268   0f80     addlw	0x80               	ADDLW	0x80
00426a   e102     bnz	0x4270               	BNZ	_00200_DS_
00426c   0e11     movlw	0x11               	MOVLW	0x11
00426e   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00200_DS_:
004270   e20e     bc	0x428e                	BC	_00183_DS_
                                           ;	.line	218; firmware.c	io_set_direction(c, IO_DIRECTION_OUT);
004272   5000     movf	0, 0, 0             	MOVF	r0x00, W
004274   6e02     movwf	0x2, 0             	MOVWF	r0x02
004276   0e00     movlw	0                  	MOVLW	0x00
004278   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00427a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00427c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00427e   ecfa     call	0x3df4, 0           	CALL	_io_set_direction
004280   f01e
004282   0e02     movlw	0x2                	MOVLW	0x02
004284   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	217; firmware.c	for (c = 16; c <= 16; ++c)
004286   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
004288   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00428a   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00428c   d7eb     bra	0x4264               	BRA	_00180_DS_
                                           _00183_DS_:
                                           ;	.line	221; firmware.c	for (c = 16; c <= 16; ++c)
00428e   0e10     movlw	0x10               	MOVLW	0x10
004290   6e00     movwf	0, 0               	MOVWF	r0x00
004292   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00184_DS_:
004294   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004296   0f80     addlw	0x80               	ADDLW	0x80
004298   0f80     addlw	0x80               	ADDLW	0x80
00429a   e102     bnz	0x42a0               	BNZ	_00201_DS_
00429c   0e11     movlw	0x11               	MOVLW	0x11
00429e   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00201_DS_:
0042a0   e20e     bc	0x42be                	BC	_00187_DS_
                                           ;	.line	222; firmware.c	io_write_digital(c,0);
0042a2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0042a4   6e02     movwf	0x2, 0             	MOVWF	r0x02
0042a6   0e00     movlw	0                  	MOVLW	0x00
0042a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042aa   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0042ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042ae   ece2     call	0x39c4, 0           	CALL	_io_write_digital
0042b0   f01c
0042b2   0e02     movlw	0x2                	MOVLW	0x02
0042b4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	221; firmware.c	for (c = 16; c <= 16; ++c)
0042b6   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0042b8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0042ba   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0042bc   d7eb     bra	0x4294               	BRA	_00184_DS_
                                           _00187_DS_:
                                           ;	.line	230; firmware.c	sonar_init(SONAR_DOWN_SENSOR_INT,SONAR_DOWN_SENSOR_OUT);
0042be   0e10     movlw	0x10               	MOVLW	0x10
0042c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042c2   0e01     movlw	0x1                	MOVLW	0x01
0042c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042c6   ecf9     call	0x63f2, 0           	CALL	_sonar_init
0042c8   f031
0042ca   0e02     movlw	0x2                	MOVLW	0x02
0042cc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	232; firmware.c	shaft_encoder_enable_std(RIGHT_WHEEL_ENCODER_INT);
0042ce   0e02     movlw	0x2                	MOVLW	0x02
0042d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042d2   ec87     call	0x690e, 0           	CALL	_shaft_encoder_enable_std
0042d4   f034
0042d6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	233; firmware.c	shaft_encoder_enable_std(LEFT_WHEEL_ENCODER_INT);
0042d8   0e03     movlw	0x3                	MOVLW	0x03
0042da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042dc   ec87     call	0x690e, 0           	CALL	_shaft_encoder_enable_std
0042de   f034
0042e0   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	235; firmware.c	controller_print_version();
0042e2   ec98     call	0x7130, 0           	CALL	_controller_print_version
0042e4   f038
0042e6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0042e8   f002
0042ea   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0042ec   f001
0042ee   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0042f0   f000
0042f2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0042f4   ffd9
0042f6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
0042f8   4642     rlncf	0x42, 0x1, 0       	DB	0x42, 0x46, 0x00
0042fa   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_1:
0042fc   4c42     dcfsnz	0x42, 0, 0        	DB	0x42, 0x4c, 0x00
0042fe   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
004300   5242     movf	0x42, 0x1, 0        	DB	0x42, 0x52, 0x00
004302   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_3:
004304   4643     rlncf	0x43, 0x1, 0       	DB	0x43, 0x46, 0x00
004306   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_4:
004308   694c     setf	0x4c, 0x1           	DB	0x4c, 0x69, 0x25, 0x64, 0x00
00430a   6425     cpfsgt	0x25, 0           
00430c   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_5:
00430e   4455     rlncf	0x55, 0, 0         	DB	0x55, 0x44, 0x25, 0x64, 0x00
004310   6425     cpfsgt	0x25, 0           
004312   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_6:
004314   4c45     dcfsnz	0x45, 0, 0        	DB	0x45, 0x4c, 0x00
004316   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_7:
004318   5245     movf	0x45, 0x1, 0        	DB	0x45, 0x52, 0x00
00431a   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_8:
00431c   5445     subfwb	0x45, 0, 0        	DB	0x45, 0x54, 0x3a, 0x20, 0x25, 0x6c, 0x64, 0x20, 0x20, 0x52, 0x43, 0x3a
00431e   203a     addwfc	0x3a, 0, 0        
004320   6c25     negf	0x25, 0             
004322   2064     addwfc	0x64, 0, 0        
004324   5220     movf	0x20, 0x1, 0        
004326   3a43     swapf	0x43, 0x1, 0       
004328   2520     addwf	0x20, 0, 0x1       	DB	0x20, 0x25, 0x64, 0x20, 0x25, 0x64, 0x20, 0x25, 0x64, 0x20, 0x25, 0x64
00432a   2064     addwfc	0x64, 0, 0        
00432c   6425     cpfsgt	0x25, 0           
00432e   2520     addwf	0x20, 0, 0x1       
004330   2064     addwfc	0x64, 0, 0        
004332   6425     cpfsgt	0x25, 0           
004334   2520     addwf	0x20, 0, 0x1       	DB	0x20, 0x25, 0x64, 0x20, 0x25, 0x64, 0x20, 0x25, 0x64, 0x20, 0x20, 0x4a
004336   2064     addwfc	0x64, 0, 0        
004338   6425     cpfsgt	0x25, 0           
00433a   2520     addwf	0x20, 0, 0x1       
00433c   2064     addwfc	0x64, 0, 0        
00433e   4a20     infsnz	0x20, 0x1, 0      
004340   6d75     negf	0x75, 0x1           	DB	0x75, 0x6d, 0x70, 0x65, 0x72, 0x3a, 0x20, 0x25, 0x64, 0x0a, 0x00
004342   6570     cpfsgt	0x70, 0x1         
004344   3a72     swapf	0x72, 0x1, 0       
004346   2520     addwf	0x20, 0, 0x1       
004348   0a64     xorlw	0x64               
00434a   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_9:
00434c   7453     btg	0x53, 0x2, 0         	DB	0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x75, 0x74
00434e   7261     btg	0x61, 0x1, 0         
004350   6974     setf	0x74, 0x1           
004352   676e     tstfsz	0x6e, 0x1         
004354   6120     cpfslt	0x20, 0x1         
004356   7475     btg	0x75, 0x2, 0         
004358   6e6f     movwf	0x6f, 0            	DB	0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x20, 0x72, 0x6f, 0x75, 0x74
00435a   6d6f     negf	0x6f, 0x1           
00435c   756f     btg	0x6f, 0x2, 0x1       
00435e   2073     addwfc	0x73, 0, 0        
004360   6f72     movwf	0x72, 0x1          
004362   7475     btg	0x75, 0x2, 0         
004364   6e69     movwf	0x69, 0            	DB	0x69, 0x6e, 0x65, 0x2e, 0x2e, 0x2e, 0x0a, 0x00
004366   2e65     decfsz	0x65, 0x1, 0      
004368   2e2e     decfsz	0x2e, 0x1, 0      
00436a   000a     tblrd	*-                 
                                           ; ; Starting pCode block
                                           __str_10:
00436c   6e45     movwf	0x45, 0            	DB	0x45, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x6e
00436e   6964     setf	0x64, 0x1           
004370   676e     tstfsz	0x6e, 0x1         
004372   6120     cpfslt	0x20, 0x1         
004374   7475     btg	0x75, 0x2, 0         
004376   6e6f     movwf	0x6f, 0            
004378   6d6f     negf	0x6f, 0x1           	DB	0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x20, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e
00437a   756f     btg	0x6f, 0x2, 0x1       
00437c   2073     addwfc	0x73, 0, 0        
00437e   6f72     movwf	0x72, 0x1          
004380   7475     btg	0x75, 0x2, 0         
004382   6e69     movwf	0x69, 0            
004384   2e65     decfsz	0x65, 0x1, 0      	DB	0x65, 0x2e, 0x2e, 0x2e, 0x0a, 0x00
004386   2e2e     decfsz	0x2e, 0x1, 0      
004388   000a     tblrd	*-                 
                                           ; ; Starting pCode block
                                           __str_11:
00438a   6372     cpfseq	0x72, 0x1         	DB	0x72, 0x63, 0x00
00438c   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_12:
00438e   6373     cpfseq	0x73, 0x1         	DB	0x73, 0x63, 0x00
004390   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_13:
004392   2553     addwf	0x53, 0, 0x1       	DB	0x53, 0x25, 0x64, 0x00
004394   0064     dw	0x64  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_14:
004396   2548     addwf	0x48, 0, 0x1       	DB	0x48, 0x25, 0x63, 0x25, 0x63, 0x00
004398   2563     addwf	0x63, 0, 0x1       
00439a   0063     dw	0x63  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_15:
00439c   256c     addwf	0x6c, 0, 0x1       	DB	0x6c, 0x25, 0x63, 0x00
00439e   0063     dw	0x63  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_16:
0043a0   2572     addwf	0x72, 0, 0x1       	DB	0x72, 0x25, 0x63, 0x00
0043a2   0063     dw	0x63  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_17:
0043a4   3144     rrcf	0x44, 0, 0x1        	DB	0x44, 0x31, 0x00
0043a6   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_18:
0043a8   3044     rrcf	0x44, 0, 0          	DB	0x44, 0x30, 0x00
0043aa   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_19:
0043ac   6548     cpfsgt	0x48, 0x1         	DB	0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64
0043ae   6c6c     negf	0x6c, 0             
0043b0   2c6f     decfsz	0x6f, 0, 0        
0043b2   5720     subfwb	0x20, 0x1, 0x1    
0043b4   726f     btg	0x6f, 0x1, 0         
0043b6   646c     cpfsgt	0x6c, 0           
0043b8   0a21     xorlw	0x21               	DB	0x21, 0x0a, 0x00
0043ba   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 4580 (0x11e4) bytes ( 3.49%)
                                           ;           	 2290 (0x08f2) words
                                           ; udata size:	   32 (0x0020) bytes ( 1.79%)
                                           ; access size:	   16 (0x0010) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.0 #5416 (Feb  3 2010) (UNIX)
                                           ; This file was generated Sat Oct 13 23:44:08 2012
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f8520
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global ___uflags
                                           	global __entry
                                           	global __startup
                                           	global __do_cinit
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _stack
                                           	extern _stack_end
                                           	extern _TBLPTRU
                                           	extern _TBLPTRH
                                           	extern _TBLPTRL
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _TABLAT
                                           	extern _POSTINC0
                                           	extern _POSTDEC0
                                           	extern _main
                                           	extern _cinit
                                           
                                           
                                           	idata
                                           ___uflags	db	0x00
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block
                                           S_crt0iz___entry	code	0X000800
                                           __entry:
000800   efaa     goto	0x7b54              	goto __startup 
000802   f03d
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_crt0iz___do_cinit	code
                                           __do_cinit:
                                           	; TBLPTR = &cinit
006af4   0e0c     movlw	0xc                	movlw low(_cinit)
006af6   6ef6     movwf	0xf6, 0            	movwf _TBLPTRL
006af8   0e7d     movlw	0x7d               	movlw high(_cinit)
006afa   6ef7     movwf	0xf7, 0            	movwf _TBLPTRH
006afc   0e00     movlw	0                  	movlw upper(_cinit)
006afe   6ef8     movwf	0xf8, 0            	movwf _TBLPTRU
                                           	; 0x05 = cinit.num_init
                                           	; movlb 0x07
006b00   0009     tblrd	*+                 	tblrd*+
006b02   50f5     movf	0xf5, 0, 0          	movf _TABLAT, w
006b04   6e05     movwf	0x5, 0             	movwf 0x05
006b06   0009     tblrd	*+                 	tblrd*+
006b08   50f5     movf	0xf5, 0, 0          	movf _TABLAT, w
006b0a   6e06     movwf	0x6, 0             	movwf 0x05 +1
                                           	; while (0x05) {
                                           test:
006b0c   e104     bnz	0x6b16               	bnz cont1 ;;done1
006b0e   6705     tstfsz	0x5, 0x1          	tstfsz 0x05, 1
006b10   d002     bra	0x6b16               	bra cont1
                                           done1:
006b12   efc7     goto	0x6b8e              	goto done
006b14   f035
                                           cont1:
                                           	; Count down so we only have to look up the data in _cinit once.
                                           	; At this point we know that TBLPTR points to the top of the current
                                           	; entry in _cinit, so we can just start reading the from, to, and
                                           	; size values.
                                           	; read the source address low
006b16   0009     tblrd	*+                 	tblrd*+
006b18   50f5     movf	0xf5, 0, 0          	movf _TABLAT, w
006b1a   6e00     movwf	0, 0               	movwf 0x00
                                           	; source address high
006b1c   0009     tblrd	*+                 	tblrd*+
006b1e   50f5     movf	0xf5, 0, 0          	movf _TABLAT, w
006b20   6e01     movwf	0x1, 0             	movwf 0x00 + 1
                                           	; source address upper
006b22   0009     tblrd	*+                 	tblrd*+
006b24   50f5     movf	0xf5, 0, 0          	movf _TABLAT, w
006b26   6e02     movwf	0x2, 0             	movwf 0x00 + 2
                                           	; skip a byte since it is stored as a 32bit int
006b28   0009     tblrd	*+                 	tblrd*+
                                           	; read the destination address directly into FSR0
                                           	; destination address low
006b2a   0009     tblrd	*+                 	tblrd*+
006b2c   50f5     movf	0xf5, 0, 0          	movf _TABLAT, w
006b2e   6ee9     movwf	0xe9, 0            	movwf _FSR0L
                                           	; destination address high
006b30   0009     tblrd	*+                 	tblrd*+
006b32   50f5     movf	0xf5, 0, 0          	movf _TABLAT, w
006b34   6eea     movwf	0xea, 0            	movwf _FSR0H
                                           	; skip two bytes since it is stored as a 32bit int
006b36   0009     tblrd	*+                 	tblrd*+
006b38   0009     tblrd	*+                 	tblrd*+
                                           	; read the size of data to transfer to destination address
006b3a   0009     tblrd	*+                 	tblrd*+
006b3c   50f5     movf	0xf5, 0, 0          	movf _TABLAT, w
006b3e   6e03     movwf	0x3, 0             	movwf 0x03
006b40   0009     tblrd	*+                 	tblrd*+
006b42   50f5     movf	0xf5, 0, 0          	movf _TABLAT, w
006b44   6e04     movwf	0x4, 0             	movwf 0x03 +1
                                           	; skip two bytes since it is stored as a 32bit int
006b46   0009     tblrd	*+                 	tblrd*+
006b48   0009     tblrd	*+                 	tblrd*+
                                           	; 0x00 = 0x07 ->from;
                                           	; FSR0 = 0x07 ->to;
                                           	; 0x03 = (unsigned short) 0x07 ->size;
                                           	; the table pointer now points to the next entry. Save it
                                           	; off since we will be using the table pointer to do the copying
                                           	; for the entry
                                           	; 0x07 = TBLPTR
006b4a   cff6     movff	0xff6, 0x7         	movff _TBLPTRL, 0x07
006b4c   f007
006b4e   cff7     movff	0xff7, 0x8         	movff _TBLPTRH, 0x07 + 1
006b50   f008
006b52   cff8     movff	0xff8, 0x9         	movff _TBLPTRU, 0x07 + 2
006b54   f009
                                           	; now assign the source address to the table pointer
                                           	; TBLPTR = 0x00
006b56   c000     movff	0, 0xff6           	movff 0x00, _TBLPTRL
006b58   fff6
006b5a   c001     movff	0x1, 0xff7         	movff 0x00 + 1, _TBLPTRH
006b5c   fff7
006b5e   c002     movff	0x2, 0xff8         	movff 0x00 + 2, _TBLPTRU
006b60   fff8
                                           	; do the copy loop
                                           	; determine if we have any more bytes to copy
                                           	; movlb 0x03
006b62   5003     movf	0x3, 0, 0           	movf 0x03, w
                                           copy_loop:
006b64   e102     bnz	0x6b6a               	bnz copy_one_byte ; copy_one_byte
006b66   5004     movf	0x4, 0, 0           	movf 0x03 + 1, w
006b68   e007     bz	0x6b78                	bz done_copying
                                           copy_one_byte:
006b6a   0009     tblrd	*+                 	tblrd*+
006b6c   50f5     movf	0xf5, 0, 0          	movf _TABLAT, w
006b6e   6eee     movwf	0xee, 0            	movwf _POSTINC0
                                           	; decrement byte counter
006b70   0603     decf	0x3, 0x1, 0         	decf 0x03, f
006b72   e2f8     bc	0x6b64                	bc copy_loop ; copy_loop
006b74   0604     decf	0x4, 0x1, 0         	decf 0x03 + 1, f
006b76   d7f9     bra	0x6b6a               	bra copy_one_byte
                                           done_copying:
                                           	; restore the table pointer for the next entry
                                           	; TBLPTR = 0x07
006b78   c007     movff	0x7, 0xff6         	movff 0x07, _TBLPTRL
006b7a   fff6
006b7c   c008     movff	0x8, 0xff7         	movff 0x07 + 1, _TBLPTRH
006b7e   fff7
006b80   c009     movff	0x9, 0xff8         	movff 0x07 + 2, _TBLPTRU
006b82   fff8
006b84   0605     decf	0x5, 0x1, 0         	decf 0x05, f
006b86   e201     bc	0x6b8a                	bc do_next
006b88   0606     decf	0x6, 0x1, 0         	decf 0x05 + 1, f
                                           do_next:
                                           	; next entry...
                                           	; _do_cinit_curr_entry--;
006b8a   ef86     goto	0x6b0c              	goto test;
006b8c   f035
                                           	; emit done label
                                           done:
006b8e   0012     return	0                 	return
                                           	
                                           ; ; Starting pCode block
                                           S_crt0iz___startup	code
                                           __startup:
007b54   ee11     lfsr	0x1, 0x1ff          	lfsr 1, _stack_end
007b56   f0ff
007b58   ee21     lfsr	0x2, 0x1ff          	lfsr 2, _stack_end
007b5a   f0ff
007b5c   6af8     clrf	0xf8, 0             	clrf _TBLPTRU, 0
007b5e   8ea6     bsf	0xa6, 0x7, 0         	bsf 0xa6, 7, 0
007b60   9ca6     bcf	0xa6, 0x6, 0         	bcf 0xa6, 6, 0
                                           	
                                           	; movlw 0xff
                                           	; movwf _FSR0L, 0
007b62   68e9     setf	0xe9, 0             	setf _FSR0L
007b64   0e0e     movlw	0xe                	movlw 0x0e
007b66   6eea     movwf	0xea, 0            	movwf _FSR0H, 0
                                           	; movlw 1
                                           	; movwf 0x00, 0
007b68   6800     setf	0, 0                	setf 0x00
007b6a   0e00     movlw	0                  	movlw 0x00
                                           clear_loop:
007b6c   6aed     clrf	0xed, 0             	clrf _POSTDEC0
007b6e   5000     movf	0, 0, 0             	movf 0x00, w
007b70   e1fd     bnz	0x7b6c               	bnz clear_loop
                                           	
                                           ;	.line	112; crt0iz.c	_do_cinit();
007b72   ec7a     call	0x6af4, 0           	CALL	__do_cinit
007b74   f035
                                           ;	.line	115; crt0iz.c	main();
007b76   ecf4     call	0x2be8, 0           	CALL	_main
007b78   f015
                                           _00110_DS_:
                                           ;	.line	119; crt0iz.c	goto loop;
007b7a   d7ff     bra	0x7b7a               	BRA	_00110_DS_
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  276 (0x0114) bytes ( 0.21%)
                                           ;           	  138 (0x008a) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
