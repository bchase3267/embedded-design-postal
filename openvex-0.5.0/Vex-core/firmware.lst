gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 11-16-2012  22:22:02
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.0 #5416 (Feb  3 2010) (UNIX)
                                           ; This file was generated Fri Nov 16 22:22:01 2012
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f8520
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _RIGHT_MOTOR_POWER
                                           	global _LEFT_MOTOR_POWER
                                           	global _integerByte
                                           	global _stringOfChars
                                           	global _distance_cm_per_15_ticks
                                           	global _rotation_circumference_cm
                                           	global _wheel_circumference_cm
                                           	global _rotation_deg_per_tick
                                           	global _main
                                           	global _custom_init
                                           	global _rc_routine
                                           	global _tank_drive_routine
                                           	global _arcade_drive_routine
                                           	global _autonomous_routine0
                                           	global _reset_usart
                                           	global _usart_data_available
                                           	global _usart_get_byte_available
                                           	global _usart_get_byte
                                           	global _serial_control
                                           	global _heartbeat
                                           	global _bump_front_left
                                           	global _bump_front_right
                                           	global _bump_front
                                           	global _set_drives_LR
                                           	global _cliff_avoidance
                                           	global _SPEED
                                           	global _LEFT_SPEED
                                           	global _RIGHT_SPEED
                                           	global _forward
                                           	global _backward
                                           	global _rotate_left
                                           	global _rotate_right
                                           	global _halt
                                           	global _differential
                                           	global _DRIVE
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _TRISFbits
                                           	extern _TRISGbits
                                           	extern _TRISHbits
                                           	extern _TRISJbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTA1bits
                                           	extern _TXSTA1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _CCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _Timer0_overflows
                                           	extern _Timer1_overflows
                                           	extern _Timer2_overflows
                                           	extern _Timer3_overflows
                                           	extern _Timer4_overflows
                                           	extern _Interrupt_port_in_use
                                           	extern _Encoder_on_iport
                                           	extern _Encoder_ticks
                                           	extern _Quad_input_port
                                           	extern _Porta_sample
                                           	extern _Portf_sample
                                           	extern _Porth_sample
                                           	extern _Rx_buff
                                           	extern _Rx_user_buff_index
                                           	extern _Spi_status
                                           	extern _Sonar_data_available
                                           	extern _Sonar_on_iport
                                           	extern _User_rxdata
                                           	extern _User_txdata
                                           	extern _Tx_buff
                                           	extern _Tx_user_buff_index
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _TRISF
                                           	extern _TRISG
                                           	extern _TRISH
                                           	extern _TRISJ
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _EEADRH
                                           	extern _RCSTA1
                                           	extern _TXSTA1
                                           	extern _TXREG1
                                           	extern _RCREG1
                                           	extern _SPBRG1
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _CCP3CON
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _printf
                                           	extern _usart_getc
                                           	extern _usart_puts
                                           	extern _io_set_analog_port_count
                                           	extern _io_read_analog
                                           	extern _io_read_digital
                                           	extern _io_write_digital
                                           	extern _io_set_direction
                                           	extern _timer0_read32
                                           	extern _shaft_encoder_read_std
                                           	extern _shaft_encoder_enable_std
                                           	extern _rc_read_status
                                           	extern _rc_read_data
                                           	extern _controller_in_autonomous_mode
                                           	extern _rc_new_data_available
                                           	extern _pwm_write
                                           	extern _controller_submit_data
                                           	extern _controller_begin_autonomous_mode
                                           	extern _controller_end_autonomous_mode
                                           	extern _controller_print_version
                                           	extern _sonar_init
                                           	extern _sonar_read
                                           	extern _controller_init
                                           	extern _delay_msec
                                           	extern _arcade_drive
                                           	extern __divsint
                                           	extern __divulong
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _LEFT_MOTOR_POWER	db	0x00
                                           _RIGHT_MOTOR_POWER	db	0x00
                                           _SPEED	db	0x46
                                           _LEFT_SPEED	db	0x46
                                           _RIGHT_SPEED	db	0x46
                                           _forward	db	0x01, 0x01
                                           _backward	db	0xff, 0xff
                                           _rotate_left	db	0xff, 0x01
                                           _rotate_right	db	0x01, 0xff
                                           _halt	db	0x00, 0x00
                                           _differential	db	0x80, 0x80
                                           _DRIVE	db	LOW(_halt), HIGH(_halt), 0x80
                                           _rc_routine_sonar_distance_1_1	db	0x00, 0x00
                                           _rc_routine_old_time_1_1	db	0x00, 0x00, 0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           
                                           udata_firmware_0	udata
                                           _rotation_deg_per_tick	res	2
                                           
                                           udata_firmware_1	udata
                                           _wheel_circumference_cm	res	2
                                           
                                           udata_firmware_2	udata
                                           _rotation_circumference_cm	res	2
                                           
                                           udata_firmware_3	udata
                                           _distance_cm_per_15_ticks	res	2
                                           
                                           udata_firmware_4	udata
                                           _stringOfChars	res	15
                                           
                                           udata_firmware_5	udata
                                           _integerByte	res	1
                                           
                                           udata_firmware_6	udata
                                           _rc_routine_elapsed_time_1_1	res	4
                                           
                                           udata_firmware_7	udata
                                           _tank_drive_routine_left_power_1_1	res	1
                                           
                                           udata_firmware_8	udata
                                           _tank_drive_routine_right_power_1_1	res	1
                                           
                                           udata_firmware_9	udata
                                           _arcade_drive_routine_left_power_1_1	res	1
                                           
                                           udata_firmware_10	udata
                                           _arcade_drive_routine_right_power_1_1	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           	code
                                           __sdcc_gsinit_startup:
                                           ; I code from now on!
005ed8   ef6e     goto	0x5edc              	goto	__sdcc_program_startup
005eda   f02f
                                           ; ; Starting pCode block
                                           __sdcc_program_startup:
005edc   ecf7     call	0x2bee, 0           	CALL	_main
005ede   f015
                                           ; ;	return from main will lock up
                                           
005ee0   ef70     goto	0x5ee0              	GOTO	$
005ee2   f02f
                                           ; ; Starting pCode block
                                           S_firmware__main	code
                                           _main:
                                           ;	.line	60; firmware.c	unsigned int i=10000;
002bee   0e10     movlw	0x10               	MOVLW	0x10
002bf0   6e00     movwf	0, 0               	MOVWF	r0x00
002bf2   0e27     movlw	0x27               	MOVLW	0x27
002bf4   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           ;	.line	61; firmware.c	unsigned int sonar_dist = 0, old_sonar_dist = 1;
002bf6   0e01     movlw	0x1                	MOVLW	0x01
002bf8   6e02     movwf	0x2, 0             	MOVWF	r0x02
002bfa   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           ;	.line	62; firmware.c	unsigned int light_level = 0;
002bfc   6a04     clrf	0x4, 0              	CLRF	r0x04
002bfe   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	64; firmware.c	unsigned left_enc_ticks=0,
002c00   6a06     clrf	0x6, 0              	CLRF	r0x06
002c02   6a07     clrf	0x7, 0              	CLRF	r0x07
                                           ;	.line	65; firmware.c	right_enc_ticks=0;
002c04   6a08     clrf	0x8, 0              	CLRF	r0x08
002c06   6a09     clrf	0x9, 0              	CLRF	r0x09
                                           ;	.line	67; firmware.c	controller_init();
002c08   ecdc     call	0x5fb8, 0           	CALL	_controller_init
002c0a   f02f
                                           ;	.line	68; firmware.c	custom_init();
002c0c   ecb6     call	0x376c, 0           	CALL	_custom_init
002c0e   f01b
                                           ;	.line	75; firmware.c	controller_end_autonomous_mode();
002c10   ec70     call	0x7ae0, 0           	CALL	_controller_end_autonomous_mode
002c12   f03d
                                           _00138_DS_:
                                           ;	.line	94; firmware.c	if (!controller_in_autonomous_mode())
002c14   ecf7     call	0x77ee, 0           	CALL	_controller_in_autonomous_mode
002c16   f03b
002c18   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002c1a   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002c1c   e112     bnz	0x2c42               	BNZ	_00110_DS_
                                           ;	.line	96; firmware.c	if ( rc_new_data_available() )
002c1e   ecbb     call	0x7b76, 0           	CALL	_rc_new_data_available
002c20   f03d
002c22   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002c24   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002c26   e00d     bz	0x2c42                	BZ	_00110_DS_
                                           ;	.line	98; firmware.c	rc_routine();
002c28   ecf1     call	0x31e2, 0           	CALL	_rc_routine
002c2a   f018
                                           ;	.line	101; firmware.c	if ( rc_read_data(AUTONOMOUS_TRIGGER_CHAN) == -127 ) autonomous_routine0();
002c2c   0e05     movlw	0x5                	MOVLW	0x05
002c2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002c30   ec80     call	0x5700, 0           	CALL	_rc_read_data
002c32   f02b
002c34   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002c36   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002c38   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002c3a   0a81     xorlw	0x81               	XORLW	0x81
002c3c   e102     bnz	0x2c42               	BNZ	_00110_DS_
002c3e   ecad     call	0x655a, 0           	CALL	_autonomous_routine0
002c40   f032
                                           _00110_DS_:
                                           ;	.line	106; firmware.c	if(usart_data_available())
002c42   ec6b     call	0x7cd6, 0           	CALL	_usart_data_available
002c44   f03e
002c46   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002c48   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002c4a   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
002c4c   d056     bra	0x2cfa               	BRA	_00115_DS_
                                           ;	.line	108; firmware.c	serial_control();
002c4e   ecb8     call	0x1d70, 0           	CALL	_serial_control
002c50   f00e
                                           ;	.line	109; firmware.c	if(DRIVE == &differential)
002c52   0e07     movlw	0x7                	MOVLW	HIGH(_differential)
002c54   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
002c56   0e0f     movlw	0xf                	MOVLW	LOW(_differential)
002c58   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002c5a   0e80     movlw	0x80               	MOVLW	0x80
002c5c   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
002c5e   0107     movlb	0x7                	BANKSEL	_DRIVE
002c60   5111     movf	0x11, 0, 0x1        	MOVF	_DRIVE, W, B
002c62   180a     xorwf	0xa, 0, 0          	XORWF	r0x0a, W
002c64   e108     bnz	0x2c76               	BNZ	_00159_DS_
002c66   0107     movlb	0x7                	BANKSEL	(_DRIVE + 1)
002c68   5112     movf	0x12, 0, 0x1        	MOVF	(_DRIVE + 1), W, B
002c6a   180b     xorwf	0xb, 0, 0          	XORWF	r0x0b, W
002c6c   e104     bnz	0x2c76               	BNZ	_00159_DS_
002c6e   0107     movlb	0x7                	BANKSEL	(_DRIVE + 2)
002c70   5113     movf	0x13, 0, 0x1        	MOVF	(_DRIVE + 2), W, B
002c72   180c     xorwf	0xc, 0, 0          	XORWF	r0x0c, W
002c74   e001     bz	0x2c78                	BZ	_00160_DS_
                                           _00159_DS_:
002c76   d00b     bra	0x2c8e               	BRA	_00112_DS_
                                           _00160_DS_:
002c78   0107     movlb	0x7                	BANKSEL	_RIGHT_SPEED
                                           ;	.line	110; firmware.c	set_drives_LR(LEFT_SPEED,RIGHT_SPEED);
002c7a   5104     movf	0x4, 0, 0x1         	MOVF	_RIGHT_SPEED, W, B
002c7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002c7e   0107     movlb	0x7                	BANKSEL	_LEFT_SPEED
002c80   5103     movf	0x3, 0, 0x1         	MOVF	_LEFT_SPEED, W, B
002c82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002c84   ec47     call	0x748e, 0           	CALL	_set_drives_LR
002c86   f03a
002c88   0e02     movlw	0x2                	MOVLW	0x02
002c8a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002c8c   d031     bra	0x2cf0               	BRA	_00113_DS_
                                           _00112_DS_:
                                           ;	.line	112; firmware.c	set_drives_LR(SPEED * DRIVE->left_multiplier,SPEED * DRIVE->right_multiplier);
002c8e   c711     movff	0x711, 0xa         	MOVFF	_DRIVE, r0x0a
002c90   f00a
002c92   c712     movff	0x712, 0xb         	MOVFF	(_DRIVE + 1), r0x0b
002c94   f00b
002c96   c713     movff	0x713, 0xc         	MOVFF	(_DRIVE + 2), r0x0c
002c98   f00c
002c9a   c00a     movff	0xa, 0xfe9         	MOVFF	r0x0a, FSR0L
002c9c   ffe9
002c9e   c00b     movff	0xb, 0xff3         	MOVFF	r0x0b, PRODL
002ca0   fff3
002ca2   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
002ca4   ec4a     call	0x7c94, 0           	CALL	__gptrget1
002ca6   f03e
                                           ; #	MOVWF	r0x0a
                                           ; #;;multiply variable :r0x0a by variable _SPEED and store in r0x0a
                                           ; #	MOVF	r0x0a, W
002ca8   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002caa   0107     movlb	0x7                	BANKSEL	_SPEED
002cac   0302     mulwf	0x2, 0x1           	MULWF	_SPEED, B
002cae   cff3     movff	0xff3, 0xa         	MOVFF	PRODL, r0x0a
002cb0   f00a
002cb2   c711     movff	0x711, 0xb         	MOVFF	_DRIVE, r0x0b
002cb4   f00b
002cb6   c712     movff	0x712, 0xc         	MOVFF	(_DRIVE + 1), r0x0c
002cb8   f00c
002cba   c713     movff	0x713, 0xd         	MOVFF	(_DRIVE + 2), r0x0d
002cbc   f00d
002cbe   2a0b     incf	0xb, 0x1, 0         	INCF	r0x0b, F
002cc0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002cc2   2a0c     incf	0xc, 0x1, 0         	INCF	r0x0c, F
002cc4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002cc6   2a0d     incf	0xd, 0x1, 0         	INCF	r0x0d, F
002cc8   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
002cca   ffe9
002ccc   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
002cce   fff3
002cd0   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
002cd2   ec4a     call	0x7c94, 0           	CALL	__gptrget1
002cd4   f03e
                                           ; #	MOVWF	r0x0b
                                           ; #;;multiply variable :r0x0b by variable _SPEED and store in r0x0b
                                           ; #	MOVF	r0x0b, W
002cd6   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
002cd8   0107     movlb	0x7                	BANKSEL	_SPEED
002cda   0302     mulwf	0x2, 0x1           	MULWF	_SPEED, B
002cdc   cff3     movff	0xff3, 0xb         	MOVFF	PRODL, r0x0b
002cde   f00b
002ce0   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
002ce2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ce4   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002ce6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ce8   ec47     call	0x748e, 0           	CALL	_set_drives_LR
002cea   f03a
002cec   0e02     movlw	0x2                	MOVLW	0x02
002cee   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00113_DS_:
                                           ;	.line	114; firmware.c	controller_submit_data(NO_WAIT);
002cf0   0e00     movlw	0                  	MOVLW	0x00
002cf2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cf4   ecf8     call	0x5df0, 0           	CALL	_controller_submit_data
002cf6   f02e
002cf8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00115_DS_:
                                           ;	.line	121; firmware.c	if(io_read_digital(LEFT_BUMPER_PORT)==0)
002cfa   0e0f     movlw	0xf                	MOVLW	0x0f
002cfc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cfe   eccc     call	0x4798, 0           	CALL	_io_read_digital
002d00   f023
002d02   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002d04   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002d06   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002d08   e122     bnz	0x2d4e               	BNZ	_00122_DS_
                                           ;	.line	123; firmware.c	if(io_read_digital(RIGHT_BUMPER_PORT)==0)
002d0a   0e0e     movlw	0xe                	MOVLW	0x0e
002d0c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d0e   eccc     call	0x4798, 0           	CALL	_io_read_digital
002d10   f023
002d12   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002d14   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002d16   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002d18   e10d     bnz	0x2d34               	BNZ	_00117_DS_
                                           ;	.line	125; firmware.c	printf("BF\n");
002d1a   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
002d1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d1e   0e38     movlw	0x38               	MOVLW	HIGH(__str_0)
002d20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d22   0eb0     movlw	0xb0               	MOVLW	LOW(__str_0)
002d24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d26   ecd7     call	0x73ae, 0           	CALL	_printf
002d28   f039
002d2a   0e03     movlw	0x3                	MOVLW	0x03
002d2c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	126; firmware.c	bump_front();
002d2e   ec0a     call	0x5c14, 0           	CALL	_bump_front
002d30   f02e
002d32   d021     bra	0x2d76               	BRA	_00123_DS_
                                           _00117_DS_:
                                           ;	.line	130; firmware.c	printf("BL");
002d34   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
002d36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d38   0e38     movlw	0x38               	MOVLW	HIGH(__str_1)
002d3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d3c   0eb4     movlw	0xb4               	MOVLW	LOW(__str_1)
002d3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d40   ecd7     call	0x73ae, 0           	CALL	_printf
002d42   f039
002d44   0e03     movlw	0x3                	MOVLW	0x03
002d46   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	131; firmware.c	bump_front_left();
002d48   ec91     call	0x5922, 0           	CALL	_bump_front_left
002d4a   f02c
002d4c   d014     bra	0x2d76               	BRA	_00123_DS_
                                           _00122_DS_:
                                           ;	.line	136; firmware.c	if(io_read_digital(RIGHT_BUMPER_PORT)==0)
002d4e   0e0e     movlw	0xe                	MOVLW	0x0e
002d50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d52   eccc     call	0x4798, 0           	CALL	_io_read_digital
002d54   f023
002d56   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002d58   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002d5a   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002d5c   e10c     bnz	0x2d76               	BNZ	_00123_DS_
                                           ;	.line	138; firmware.c	printf("BR");
002d5e   0e00     movlw	0                  	MOVLW	UPPER(__str_2)
002d60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d62   0e38     movlw	0x38               	MOVLW	HIGH(__str_2)
002d64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d66   0eb8     movlw	0xb8               	MOVLW	LOW(__str_2)
002d68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d6a   ecd7     call	0x73ae, 0           	CALL	_printf
002d6c   f039
002d6e   0e03     movlw	0x3                	MOVLW	0x03
002d70   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	139; firmware.c	bump_front_right();
002d72   ec81     call	0x5d02, 0           	CALL	_bump_front_right
002d74   f02e
                                           _00123_DS_:
                                           ;	.line	143; firmware.c	if((sonar_dist = sonar_read(SONAR_DOWN_SENSOR_INT)) > 20)
002d76   0e01     movlw	0x1                	MOVLW	0x01
002d78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d7a   ec7a     call	0x2ef4, 0           	CALL	_sonar_read
002d7c   f017
002d7e   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002d80   cff3     movff	0xff3, 0xb         	MOVFF	PRODL, r0x0b
002d82   f00b
002d84   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002d86   c00a     movff	0xa, 0xc           	MOVFF	r0x0a, r0x0c
002d88   f00c
002d8a   c00b     movff	0xb, 0xd           	MOVFF	r0x0b, r0x0d
002d8c   f00d
002d8e   0e00     movlw	0                  	MOVLW	0x00
002d90   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
002d92   e102     bnz	0x2d98               	BNZ	_00161_DS_
002d94   0e15     movlw	0x15               	MOVLW	0x15
002d96   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
                                           _00161_DS_:
002d98   e30c     bnc	0x2db2               	BNC	_00125_DS_
                                           ;	.line	145; firmware.c	printf("CF");
002d9a   0e00     movlw	0                  	MOVLW	UPPER(__str_3)
002d9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d9e   0e38     movlw	0x38               	MOVLW	HIGH(__str_3)
002da0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002da2   0ebc     movlw	0xbc               	MOVLW	LOW(__str_3)
002da4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002da6   ecd7     call	0x73ae, 0           	CALL	_printf
002da8   f039
002daa   0e03     movlw	0x3                	MOVLW	0x03
002dac   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	146; firmware.c	cliff_avoidance();
002dae   ece7     call	0x75ce, 0           	CALL	_cliff_avoidance
002db0   f03a
                                           _00125_DS_:
                                           ;	.line	148; firmware.c	if(i++ == 10000)
002db2   c000     movff	0, 0xa             	MOVFF	r0x00, r0x0a
002db4   f00a
002db6   c001     movff	0x1, 0xb           	MOVFF	r0x01, r0x0b
002db8   f00b
002dba   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002dbc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002dbe   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
002dc0   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002dc2   0a10     xorlw	0x10               	XORLW	0x10
002dc4   e103     bnz	0x2dcc               	BNZ	_00162_DS_
002dc6   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
002dc8   0a27     xorlw	0x27               	XORLW	0x27
002dca   e001     bz	0x2dce                	BZ	_00163_DS_
                                           _00162_DS_:
002dcc   d026     bra	0x2e1a               	BRA	_00129_DS_
                                           _00163_DS_:
                                           ;	.line	150; firmware.c	if(io_read_analog(LIGHT_SENSOR_PORT) != light_level)
002dce   0e01     movlw	0x1                	MOVLW	0x01
002dd0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dd2   ec7d     call	0x74fa, 0           	CALL	_io_read_analog
002dd4   f03a
002dd6   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002dd8   cff3     movff	0xff3, 0xb         	MOVFF	PRODL, r0x0b
002dda   f00b
002ddc   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002dde   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002de0   1804     xorwf	0x4, 0, 0          	XORWF	r0x04, W
002de2   e103     bnz	0x2dea               	BNZ	_00165_DS_
002de4   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
002de6   1805     xorwf	0x5, 0, 0          	XORWF	r0x05, W
002de8   e016     bz	0x2e16                	BZ	_00127_DS_
                                           _00165_DS_:
                                           ;	.line	152; firmware.c	light_level = io_read_analog(LIGHT_SENSOR_PORT);
002dea   0e01     movlw	0x1                	MOVLW	0x01
002dec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dee   ec7d     call	0x74fa, 0           	CALL	_io_read_analog
002df0   f03a
002df2   6e04     movwf	0x4, 0             	MOVWF	r0x04
002df4   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
002df6   f005
002df8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	153; firmware.c	printf("L%d\n",light_level);
002dfa   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002dfc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002dfe   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002e00   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e02   0e00     movlw	0                  	MOVLW	UPPER(__str_4)
002e04   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e06   0e38     movlw	0x38               	MOVLW	HIGH(__str_4)
002e08   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e0a   0ec0     movlw	0xc0               	MOVLW	LOW(__str_4)
002e0c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e0e   ecd7     call	0x73ae, 0           	CALL	_printf
002e10   f039
002e12   0e05     movlw	0x5                	MOVLW	0x05
002e14   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00127_DS_:
                                           ;	.line	155; firmware.c	i = 0;
002e16   6a00     clrf	0, 0                	CLRF	r0x00
002e18   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00129_DS_:
                                           ;	.line	158; firmware.c	if(sonar_dist - old_sonar_dist > 1 || old_sonar_dist - sonar_dist > 1)
002e1a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002e1c   5c0c     subwf	0xc, 0, 0          	SUBWF	r0x0c, W
002e1e   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002e20   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002e22   580d     subwfb	0xd, 0, 0         	SUBWFB	r0x0d, W
002e24   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
002e26   0e00     movlw	0                  	MOVLW	0x00
002e28   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
002e2a   e102     bnz	0x2e30               	BNZ	_00166_DS_
002e2c   0e02     movlw	0x2                	MOVLW	0x02
002e2e   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
                                           _00166_DS_:
002e30   e20c     bc	0x2e4a                	BC	_00130_DS_
002e32   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
002e34   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
002e36   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002e38   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
002e3a   5803     subwfb	0x3, 0, 0         	SUBWFB	r0x03, W
002e3c   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
002e3e   0e00     movlw	0                  	MOVLW	0x00
002e40   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
002e42   e102     bnz	0x2e48               	BNZ	_00167_DS_
002e44   0e02     movlw	0x2                	MOVLW	0x02
002e46   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
                                           _00167_DS_:
002e48   e312     bnc	0x2e6e               	BNC	_00131_DS_
                                           _00130_DS_:
                                           ;	.line	160; firmware.c	printf("UD: %d\n",sonar_dist);
002e4a   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
002e4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e4e   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
002e50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e52   0e00     movlw	0                  	MOVLW	UPPER(__str_5)
002e54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e56   0e38     movlw	0x38               	MOVLW	HIGH(__str_5)
002e58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e5a   0ec6     movlw	0xc6               	MOVLW	LOW(__str_5)
002e5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e5e   ecd7     call	0x73ae, 0           	CALL	_printf
002e60   f039
002e62   0e05     movlw	0x5                	MOVLW	0x05
002e64   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	161; firmware.c	old_sonar_dist = sonar_dist;
002e66   c00c     movff	0xc, 0x2           	MOVFF	r0x0c, r0x02
002e68   f002
002e6a   c00d     movff	0xd, 0x3           	MOVFF	r0x0d, r0x03
002e6c   f003
                                           _00131_DS_:
                                           ;	.line	164; firmware.c	if(shaft_encoder_read_std(LEFT_WHEEL_ENCODER_INT)!=left_enc_ticks)
002e6e   0e03     movlw	0x3                	MOVLW	0x03
002e70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e72   ec75     call	0x76ea, 0           	CALL	_shaft_encoder_read_std
002e74   f03b
002e76   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002e78   cff3     movff	0xff3, 0xb         	MOVFF	PRODL, r0x0b
002e7a   f00b
002e7c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002e7e   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002e80   1806     xorwf	0x6, 0, 0          	XORWF	r0x06, W
002e82   e103     bnz	0x2e8a               	BNZ	_00169_DS_
002e84   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
002e86   1807     xorwf	0x7, 0, 0          	XORWF	r0x07, W
002e88   e012     bz	0x2eae                	BZ	_00134_DS_
                                           _00169_DS_:
                                           ;	.line	166; firmware.c	printf("EL");
002e8a   0e00     movlw	0                  	MOVLW	UPPER(__str_6)
002e8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e8e   0e38     movlw	0x38               	MOVLW	HIGH(__str_6)
002e90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e92   0ece     movlw	0xce               	MOVLW	LOW(__str_6)
002e94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e96   ecd7     call	0x73ae, 0           	CALL	_printf
002e98   f039
002e9a   0e03     movlw	0x3                	MOVLW	0x03
002e9c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	167; firmware.c	left_enc_ticks = shaft_encoder_read_std(LEFT_WHEEL_ENCODER_INT);
002e9e   0e03     movlw	0x3                	MOVLW	0x03
002ea0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ea2   ec75     call	0x76ea, 0           	CALL	_shaft_encoder_read_std
002ea4   f03b
002ea6   6e06     movwf	0x6, 0             	MOVWF	r0x06
002ea8   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
002eaa   f007
002eac   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00134_DS_:
                                           ;	.line	170; firmware.c	if(shaft_encoder_read_std(RIGHT_WHEEL_ENCODER_INT)!=right_enc_ticks)
002eae   0e02     movlw	0x2                	MOVLW	0x02
002eb0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002eb2   ec75     call	0x76ea, 0           	CALL	_shaft_encoder_read_std
002eb4   f03b
002eb6   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002eb8   cff3     movff	0xff3, 0xb         	MOVFF	PRODL, r0x0b
002eba   f00b
002ebc   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002ebe   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002ec0   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
002ec2   e104     bnz	0x2ecc               	BNZ	_00171_DS_
002ec4   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
002ec6   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
002ec8   e101     bnz	0x2ecc               	BNZ	_00171_DS_
002eca   d6a4     bra	0x2c14               	BRA	_00138_DS_
                                           _00171_DS_:
                                           ;	.line	172; firmware.c	printf("ER");
002ecc   0e00     movlw	0                  	MOVLW	UPPER(__str_7)
002ece   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ed0   0e38     movlw	0x38               	MOVLW	HIGH(__str_7)
002ed2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ed4   0ed2     movlw	0xd2               	MOVLW	LOW(__str_7)
002ed6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ed8   ecd7     call	0x73ae, 0           	CALL	_printf
002eda   f039
002edc   0e03     movlw	0x3                	MOVLW	0x03
002ede   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	173; firmware.c	right_enc_ticks = shaft_encoder_read_std(RIGHT_WHEEL_ENCODER_INT);
002ee0   0e02     movlw	0x2                	MOVLW	0x02
002ee2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ee4   ec75     call	0x76ea, 0           	CALL	_shaft_encoder_read_std
002ee6   f03b
002ee8   6e08     movwf	0x8, 0             	MOVWF	r0x08
002eea   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
002eec   f009
002eee   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
002ef0   d691     bra	0x2c14               	BRA	_00138_DS_
002ef2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__cliff_avoidance	code
                                           _cliff_avoidance:
                                           ;	.line	595; firmware.c	void cliff_avoidance()
0075ce   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0075d0   ffe5
0075d2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0075d4   ffd9
                                           ;	.line	597; firmware.c	set_drives_LR(-127,-127);
0075d6   0e81     movlw	0x81               	MOVLW	0x81
0075d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0075da   0e81     movlw	0x81               	MOVLW	0x81
0075dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0075de   ec47     call	0x748e, 0           	CALL	_set_drives_LR
0075e0   f03a
0075e2   0e02     movlw	0x2                	MOVLW	0x02
0075e4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	598; firmware.c	controller_submit_data(NO_WAIT);
0075e6   0e00     movlw	0                  	MOVLW	0x00
0075e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0075ea   ecf8     call	0x5df0, 0           	CALL	_controller_submit_data
0075ec   f02e
0075ee   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	599; firmware.c	delay_msec(60);
0075f0   0e00     movlw	0                  	MOVLW	0x00
0075f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0075f4   0e3c     movlw	0x3c               	MOVLW	0x3c
0075f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0075f8   ec10     call	0x7420, 0           	CALL	_delay_msec
0075fa   f03a
0075fc   0e02     movlw	0x2                	MOVLW	0x02
0075fe   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	600; firmware.c	set_drives_LR(0,0);
007600   0e00     movlw	0                  	MOVLW	0x00
007602   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007604   0e00     movlw	0                  	MOVLW	0x00
007606   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007608   ec47     call	0x748e, 0           	CALL	_set_drives_LR
00760a   f03a
00760c   0e02     movlw	0x2                	MOVLW	0x02
00760e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	601; firmware.c	controller_submit_data(NO_WAIT);
007610   0e00     movlw	0                  	MOVLW	0x00
007612   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007614   ecf8     call	0x5df0, 0           	CALL	_controller_submit_data
007616   f02e
007618   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	602; firmware.c	DRIVE = &halt;
00761a   0e07     movlw	0x7                	MOVLW	HIGH(_halt)
00761c   0107     movlb	0x7                	BANKSEL	(_DRIVE + 1)
00761e   6f12     movwf	0x12, 0x1          	MOVWF	(_DRIVE + 1), B
007620   0e0d     movlw	0xd                	MOVLW	LOW(_halt)
007622   0107     movlb	0x7                	BANKSEL	_DRIVE
007624   6f11     movwf	0x11, 0x1          	MOVWF	_DRIVE, B
007626   0e80     movlw	0x80               	MOVLW	0x80
007628   0107     movlb	0x7                	BANKSEL	(_DRIVE + 2)
00762a   6f13     movwf	0x13, 0x1          	MOVWF	(_DRIVE + 2), B
00762c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00762e   ffd9
007630   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__set_drives_LR	code
                                           _set_drives_LR:
                                           ;	.line	587; firmware.c	void set_drives_LR(signed char leftPower,signed char rightPower)
00748e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007490   ffe5
007492   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007494   ffd9
007496   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007498   ffe5
00749a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00749c   ffe5
00749e   0e02     movlw	0x2                	MOVLW	0x02
0074a0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0074a2   f000
0074a4   0e03     movlw	0x3                	MOVLW	0x03
0074a6   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0074a8   f001
                                           ;	.line	589; firmware.c	pwm_write(RIGHT_DRIVE_PORT1, rightPower);
0074aa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0074ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0074ae   0e01     movlw	0x1                	MOVLW	0x01
0074b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0074b2   ecb3     call	0x7566, 0           	CALL	_pwm_write
0074b4   f03a
0074b6   0e02     movlw	0x2                	MOVLW	0x02
0074b8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	590; firmware.c	pwm_write(LEFT_DRIVE_PORT1, -leftPower);
0074ba   6c00     negf	0, 0                	NEGF	r0x00
0074bc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0074be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0074c0   0e02     movlw	0x2                	MOVLW	0x02
0074c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0074c4   ecb3     call	0x7566, 0           	CALL	_pwm_write
0074c6   f03a
0074c8   0e02     movlw	0x2                	MOVLW	0x02
0074ca   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	591; firmware.c	pwm_write(RIGHT_DRIVE_PORT2, rightPower);
0074cc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0074ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0074d0   0e03     movlw	0x3                	MOVLW	0x03
0074d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0074d4   ecb3     call	0x7566, 0           	CALL	_pwm_write
0074d6   f03a
0074d8   0e02     movlw	0x2                	MOVLW	0x02
0074da   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	592; firmware.c	pwm_write(LEFT_DRIVE_PORT2, -leftPower);
0074dc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0074de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0074e0   0e04     movlw	0x4                	MOVLW	0x04
0074e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0074e4   ecb3     call	0x7566, 0           	CALL	_pwm_write
0074e6   f03a
0074e8   0e02     movlw	0x2                	MOVLW	0x02
0074ea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0074ec   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0074ee   f001
0074f0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0074f2   f000
0074f4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0074f6   ffd9
0074f8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__bump_front	code
                                           _bump_front:
                                           ;	.line	570; firmware.c	void bump_front()
005c14   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005c16   ffe5
005c18   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005c1a   ffd9
005c1c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005c1e   ffe5
005c20   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005c22   ffe5
005c24   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005c26   ffe5
005c28   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005c2a   ffe5
                                           ;	.line	573; firmware.c	set_drives_LR(-AUTON_DRIVE_SPEED,-AUTON_DRIVE_SPEED);
005c2c   0eba     movlw	0xba               	MOVLW	0xba
005c2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005c30   0eba     movlw	0xba               	MOVLW	0xba
005c32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005c34   ec47     call	0x748e, 0           	CALL	_set_drives_LR
005c36   f03a
005c38   0e02     movlw	0x2                	MOVLW	0x02
005c3a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	574; firmware.c	controller_submit_data(WAIT);
005c3c   0e01     movlw	0x1                	MOVLW	0x01
005c3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005c40   ecf8     call	0x5df0, 0           	CALL	_controller_submit_data
005c42   f02e
005c44   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	575; firmware.c	delay_msec(500);
005c46   0e01     movlw	0x1                	MOVLW	0x01
005c48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005c4a   0ef4     movlw	0xf4               	MOVLW	0xf4
005c4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005c4e   ec10     call	0x7420, 0           	CALL	_delay_msec
005c50   f03a
005c52   0e02     movlw	0x2                	MOVLW	0x02
005c54   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	578; firmware.c	set_drives_LR(-AUTON_DRIVE_SPEED,AUTON_DRIVE_SPEED);
005c56   0e46     movlw	0x46               	MOVLW	0x46
005c58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005c5a   0eba     movlw	0xba               	MOVLW	0xba
005c5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005c5e   ec47     call	0x748e, 0           	CALL	_set_drives_LR
005c60   f03a
005c62   0e02     movlw	0x2                	MOVLW	0x02
005c64   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	579; firmware.c	controller_submit_data(WAIT);
005c66   0e01     movlw	0x1                	MOVLW	0x01
005c68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005c6a   ecf8     call	0x5df0, 0           	CALL	_controller_submit_data
005c6c   f02e
005c6e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	580; firmware.c	delay_msec(2700);
005c70   0e0a     movlw	0xa                	MOVLW	0x0a
005c72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005c74   0e8c     movlw	0x8c               	MOVLW	0x8c
005c76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005c78   ec10     call	0x7420, 0           	CALL	_delay_msec
005c7a   f03a
005c7c   0e02     movlw	0x2                	MOVLW	0x02
005c7e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	583; firmware.c	set_drives_LR(SPEED * DRIVE->left_multiplier, SPEED * DRIVE->right_multiplier);
005c80   c711     movff	0x711, 0           	MOVFF	_DRIVE, r0x00
005c82   f000
005c84   c712     movff	0x712, 0x1         	MOVFF	(_DRIVE + 1), r0x01
005c86   f001
005c88   c713     movff	0x713, 0x2         	MOVFF	(_DRIVE + 2), r0x02
005c8a   f002
005c8c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
005c8e   ffe9
005c90   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
005c92   fff3
005c94   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005c96   ec4a     call	0x7c94, 0           	CALL	__gptrget1
005c98   f03e
                                           ; #	MOVWF	r0x00
                                           ; #;;multiply variable :r0x00 by variable _SPEED and store in r0x00
                                           ; #	MOVF	r0x00, W
005c9a   6e00     movwf	0, 0               	MOVWF	r0x00
005c9c   0107     movlb	0x7                	BANKSEL	_SPEED
005c9e   0302     mulwf	0x2, 0x1           	MULWF	_SPEED, B
005ca0   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
005ca2   f000
005ca4   c711     movff	0x711, 0x1         	MOVFF	_DRIVE, r0x01
005ca6   f001
005ca8   c712     movff	0x712, 0x2         	MOVFF	(_DRIVE + 1), r0x02
005caa   f002
005cac   c713     movff	0x713, 0x3         	MOVFF	(_DRIVE + 2), r0x03
005cae   f003
005cb0   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
005cb2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005cb4   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
005cb6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005cb8   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
005cba   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
005cbc   ffe9
005cbe   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
005cc0   fff3
005cc2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005cc4   ec4a     call	0x7c94, 0           	CALL	__gptrget1
005cc6   f03e
                                           ; #	MOVWF	r0x01
                                           ; #;;multiply variable :r0x01 by variable _SPEED and store in r0x01
                                           ; #	MOVF	r0x01, W
005cc8   6e01     movwf	0x1, 0             	MOVWF	r0x01
005cca   0107     movlb	0x7                	BANKSEL	_SPEED
005ccc   0302     mulwf	0x2, 0x1           	MULWF	_SPEED, B
005cce   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
005cd0   f001
005cd2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005cd4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005cd6   5000     movf	0, 0, 0             	MOVF	r0x00, W
005cd8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005cda   ec47     call	0x748e, 0           	CALL	_set_drives_LR
005cdc   f03a
005cde   0e02     movlw	0x2                	MOVLW	0x02
005ce0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	584; firmware.c	controller_submit_data(WAIT);
005ce2   0e01     movlw	0x1                	MOVLW	0x01
005ce4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005ce6   ecf8     call	0x5df0, 0           	CALL	_controller_submit_data
005ce8   f02e
005cea   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
005cec   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005cee   f003
005cf0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005cf2   f002
005cf4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005cf6   f001
005cf8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005cfa   f000
005cfc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005cfe   ffd9
005d00   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__bump_front_right	code
                                           _bump_front_right:
                                           ;	.line	552; firmware.c	void bump_front_right()
005d02   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005d04   ffe5
005d06   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005d08   ffd9
005d0a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005d0c   ffe5
005d0e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005d10   ffe5
005d12   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005d14   ffe5
005d16   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005d18   ffe5
                                           ;	.line	555; firmware.c	set_drives_LR(-AUTON_DRIVE_SPEED,-AUTON_DRIVE_SPEED);
005d1a   0eba     movlw	0xba               	MOVLW	0xba
005d1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005d1e   0eba     movlw	0xba               	MOVLW	0xba
005d20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005d22   ec47     call	0x748e, 0           	CALL	_set_drives_LR
005d24   f03a
005d26   0e02     movlw	0x2                	MOVLW	0x02
005d28   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	556; firmware.c	controller_submit_data(WAIT);
005d2a   0e01     movlw	0x1                	MOVLW	0x01
005d2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005d2e   ecf8     call	0x5df0, 0           	CALL	_controller_submit_data
005d30   f02e
005d32   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	557; firmware.c	delay_msec(500);
005d34   0e01     movlw	0x1                	MOVLW	0x01
005d36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005d38   0ef4     movlw	0xf4               	MOVLW	0xf4
005d3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005d3c   ec10     call	0x7420, 0           	CALL	_delay_msec
005d3e   f03a
005d40   0e02     movlw	0x2                	MOVLW	0x02
005d42   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	560; firmware.c	set_drives_LR(-AUTON_DRIVE_SPEED,AUTON_DRIVE_SPEED);
005d44   0e46     movlw	0x46               	MOVLW	0x46
005d46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005d48   0eba     movlw	0xba               	MOVLW	0xba
005d4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005d4c   ec47     call	0x748e, 0           	CALL	_set_drives_LR
005d4e   f03a
005d50   0e02     movlw	0x2                	MOVLW	0x02
005d52   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	561; firmware.c	controller_submit_data(WAIT);
005d54   0e01     movlw	0x1                	MOVLW	0x01
005d56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005d58   ecf8     call	0x5df0, 0           	CALL	_controller_submit_data
005d5a   f02e
005d5c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	562; firmware.c	delay_msec(500);
005d5e   0e01     movlw	0x1                	MOVLW	0x01
005d60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005d62   0ef4     movlw	0xf4               	MOVLW	0xf4
005d64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005d66   ec10     call	0x7420, 0           	CALL	_delay_msec
005d68   f03a
005d6a   0e02     movlw	0x2                	MOVLW	0x02
005d6c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	565; firmware.c	set_drives_LR(SPEED * DRIVE->left_multiplier, SPEED * DRIVE->right_multiplier);
005d6e   c711     movff	0x711, 0           	MOVFF	_DRIVE, r0x00
005d70   f000
005d72   c712     movff	0x712, 0x1         	MOVFF	(_DRIVE + 1), r0x01
005d74   f001
005d76   c713     movff	0x713, 0x2         	MOVFF	(_DRIVE + 2), r0x02
005d78   f002
005d7a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
005d7c   ffe9
005d7e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
005d80   fff3
005d82   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005d84   ec4a     call	0x7c94, 0           	CALL	__gptrget1
005d86   f03e
                                           ; #	MOVWF	r0x00
                                           ; #;;multiply variable :r0x00 by variable _SPEED and store in r0x00
                                           ; #	MOVF	r0x00, W
005d88   6e00     movwf	0, 0               	MOVWF	r0x00
005d8a   0107     movlb	0x7                	BANKSEL	_SPEED
005d8c   0302     mulwf	0x2, 0x1           	MULWF	_SPEED, B
005d8e   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
005d90   f000
005d92   c711     movff	0x711, 0x1         	MOVFF	_DRIVE, r0x01
005d94   f001
005d96   c712     movff	0x712, 0x2         	MOVFF	(_DRIVE + 1), r0x02
005d98   f002
005d9a   c713     movff	0x713, 0x3         	MOVFF	(_DRIVE + 2), r0x03
005d9c   f003
005d9e   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
005da0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005da2   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
005da4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005da6   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
005da8   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
005daa   ffe9
005dac   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
005dae   fff3
005db0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005db2   ec4a     call	0x7c94, 0           	CALL	__gptrget1
005db4   f03e
                                           ; #	MOVWF	r0x01
                                           ; #;;multiply variable :r0x01 by variable _SPEED and store in r0x01
                                           ; #	MOVF	r0x01, W
005db6   6e01     movwf	0x1, 0             	MOVWF	r0x01
005db8   0107     movlb	0x7                	BANKSEL	_SPEED
005dba   0302     mulwf	0x2, 0x1           	MULWF	_SPEED, B
005dbc   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
005dbe   f001
005dc0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005dc2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005dc4   5000     movf	0, 0, 0             	MOVF	r0x00, W
005dc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005dc8   ec47     call	0x748e, 0           	CALL	_set_drives_LR
005dca   f03a
005dcc   0e02     movlw	0x2                	MOVLW	0x02
005dce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	566; firmware.c	controller_submit_data(WAIT);
005dd0   0e01     movlw	0x1                	MOVLW	0x01
005dd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005dd4   ecf8     call	0x5df0, 0           	CALL	_controller_submit_data
005dd6   f02e
005dd8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
005dda   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005ddc   f003
005dde   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005de0   f002
005de2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005de4   f001
005de6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005de8   f000
005dea   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005dec   ffd9
005dee   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__bump_front_left	code
                                           _bump_front_left:
                                           ;	.line	533; firmware.c	void bump_front_left()
005922   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005924   ffe5
005926   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005928   ffd9
00592a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00592c   ffe5
00592e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005930   ffe5
005932   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005934   ffe5
005936   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005938   ffe5
                                           ;	.line	536; firmware.c	set_drives_LR(-AUTON_DRIVE_SPEED,-AUTON_DRIVE_SPEED);
00593a   0eba     movlw	0xba               	MOVLW	0xba
00593c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00593e   0eba     movlw	0xba               	MOVLW	0xba
005940   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005942   ec47     call	0x748e, 0           	CALL	_set_drives_LR
005944   f03a
005946   0e02     movlw	0x2                	MOVLW	0x02
005948   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	537; firmware.c	controller_submit_data(WAIT);
00594a   0e01     movlw	0x1                	MOVLW	0x01
00594c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00594e   ecf8     call	0x5df0, 0           	CALL	_controller_submit_data
005950   f02e
005952   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	538; firmware.c	delay_msec(500);
005954   0e01     movlw	0x1                	MOVLW	0x01
005956   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005958   0ef4     movlw	0xf4               	MOVLW	0xf4
00595a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00595c   ec10     call	0x7420, 0           	CALL	_delay_msec
00595e   f03a
005960   0e02     movlw	0x2                	MOVLW	0x02
005962   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	541; firmware.c	set_drives_LR(AUTON_DRIVE_SPEED,-AUTON_DRIVE_SPEED);
005964   0eba     movlw	0xba               	MOVLW	0xba
005966   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005968   0e46     movlw	0x46               	MOVLW	0x46
00596a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00596c   ec47     call	0x748e, 0           	CALL	_set_drives_LR
00596e   f03a
005970   0e02     movlw	0x2                	MOVLW	0x02
005972   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	542; firmware.c	controller_submit_data(WAIT);
005974   0e01     movlw	0x1                	MOVLW	0x01
005976   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005978   ecf8     call	0x5df0, 0           	CALL	_controller_submit_data
00597a   f02e
00597c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	543; firmware.c	delay_msec(500);
00597e   0e01     movlw	0x1                	MOVLW	0x01
005980   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005982   0ef4     movlw	0xf4               	MOVLW	0xf4
005984   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005986   ec10     call	0x7420, 0           	CALL	_delay_msec
005988   f03a
00598a   0e02     movlw	0x2                	MOVLW	0x02
00598c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	546; firmware.c	set_drives_LR(SPEED * DRIVE->left_multiplier, SPEED * DRIVE->right_multiplier);
00598e   c711     movff	0x711, 0           	MOVFF	_DRIVE, r0x00
005990   f000
005992   c712     movff	0x712, 0x1         	MOVFF	(_DRIVE + 1), r0x01
005994   f001
005996   c713     movff	0x713, 0x2         	MOVFF	(_DRIVE + 2), r0x02
005998   f002
00599a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00599c   ffe9
00599e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0059a0   fff3
0059a2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0059a4   ec4a     call	0x7c94, 0           	CALL	__gptrget1
0059a6   f03e
                                           ; #	MOVWF	r0x00
                                           ; #;;multiply variable :r0x00 by variable _SPEED and store in r0x00
                                           ; #	MOVF	r0x00, W
0059a8   6e00     movwf	0, 0               	MOVWF	r0x00
0059aa   0107     movlb	0x7                	BANKSEL	_SPEED
0059ac   0302     mulwf	0x2, 0x1           	MULWF	_SPEED, B
0059ae   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
0059b0   f000
0059b2   c711     movff	0x711, 0x1         	MOVFF	_DRIVE, r0x01
0059b4   f001
0059b6   c712     movff	0x712, 0x2         	MOVFF	(_DRIVE + 1), r0x02
0059b8   f002
0059ba   c713     movff	0x713, 0x3         	MOVFF	(_DRIVE + 2), r0x03
0059bc   f003
0059be   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0059c0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0059c2   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0059c4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0059c6   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
0059c8   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0059ca   ffe9
0059cc   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
0059ce   fff3
0059d0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0059d2   ec4a     call	0x7c94, 0           	CALL	__gptrget1
0059d4   f03e
                                           ; #	MOVWF	r0x01
                                           ; #;;multiply variable :r0x01 by variable _SPEED and store in r0x01
                                           ; #	MOVF	r0x01, W
0059d6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0059d8   0107     movlb	0x7                	BANKSEL	_SPEED
0059da   0302     mulwf	0x2, 0x1           	MULWF	_SPEED, B
0059dc   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0059de   f001
0059e0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0059e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0059e4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0059e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0059e8   ec47     call	0x748e, 0           	CALL	_set_drives_LR
0059ea   f03a
0059ec   0e02     movlw	0x2                	MOVLW	0x02
0059ee   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	547; firmware.c	controller_submit_data(WAIT);
0059f0   0e01     movlw	0x1                	MOVLW	0x01
0059f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0059f4   ecf8     call	0x5df0, 0           	CALL	_controller_submit_data
0059f6   f02e
0059f8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	548; firmware.c	delay_msec(100);
0059fa   0e00     movlw	0                  	MOVLW	0x00
0059fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0059fe   0e64     movlw	0x64               	MOVLW	0x64
005a00   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005a02   ec10     call	0x7420, 0           	CALL	_delay_msec
005a04   f03a
005a06   0e02     movlw	0x2                	MOVLW	0x02
005a08   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005a0a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005a0c   f003
005a0e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005a10   f002
005a12   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005a14   f001
005a16   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005a18   f000
005a1a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005a1c   ffd9
005a1e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__heartbeat	code
                                           _heartbeat:
                                           ;	.line	517; firmware.c	void heartbeat(void)
007a38   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007a3a   ffe5
007a3c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007a3e   ffd9
007a40   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007a42   ffe5
                                           ;	.line	521; firmware.c	dat = RCREG;
007a44   cfae     movff	0xfae, 0           	MOVFF	_RCREG, r0x00
007a46   f000
                                           ;	.line	522; firmware.c	if(dat == 'p')
007a48   5000     movf	0, 0, 0             	MOVF	r0x00, W
007a4a   0a70     xorlw	0x70               	XORLW	0x70
007a4c   e10f     bnz	0x7a6c               	BNZ	_00437_DS_
                                           ;	.line	524; firmware.c	printf("Hello, World!\n");
007a4e   0e00     movlw	0                  	MOVLW	UPPER(__str_23)
007a50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007a52   0e39     movlw	0x39               	MOVLW	HIGH(__str_23)
007a54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007a56   0ed6     movlw	0xd6               	MOVLW	LOW(__str_23)
007a58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007a5a   ecd7     call	0x73ae, 0           	CALL	_printf
007a5c   f039
007a5e   0e03     movlw	0x3                	MOVLW	0x03
007a60   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	525; firmware.c	controller_submit_data(NO_WAIT);
007a62   0e00     movlw	0                  	MOVLW	0x00
007a64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007a66   ecf8     call	0x5df0, 0           	CALL	_controller_submit_data
007a68   f02e
007a6a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00437_DS_:
007a6c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007a6e   f000
007a70   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007a72   ffd9
007a74   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__serial_control	code
                                           _serial_control:
                                           ;	.line	422; firmware.c	void serial_control(void)
001d70   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001d72   ffe5
001d74   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001d76   ffd9
001d78   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001d7a   ffe5
001d7c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001d7e   ffe5
001d80   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001d82   ffe5
001d84   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001d86   ffe5
001d88   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001d8a   ffe5
                                           ;	.line	426; firmware.c	if(usart_data_available())
001d8c   ec6b     call	0x7cd6, 0           	CALL	_usart_data_available
001d8e   f03e
001d90   6e00     movwf	0, 0               	MOVWF	r0x00
001d92   5000     movf	0, 0, 0             	MOVF	r0x00, W
001d94   e004     bz	0x1d9e                	BZ	_00283_DS_
                                           ;	.line	427; firmware.c	command_byte = usart_get_byte();
001d96   ec7a     call	0x7cf4, 0           	CALL	_usart_get_byte
001d98   f03e
001d9a   6e00     movwf	0, 0               	MOVWF	r0x00
001d9c   d002     bra	0x1da2               	BRA	_00284_DS_
                                           _00283_DS_:
                                           ;	.line	428; firmware.c	else return;
001d9e   eff7     goto	0x21ee              	GOTO	_00343_DS_
001da0   f010
                                           _00284_DS_:
                                           ;	.line	430; firmware.c	switch(command_byte)
001da2   5000     movf	0, 0, 0             	MOVF	r0x00, W
001da4   0a2b     xorlw	0x2b               	XORLW	0x2b
001da6   e101     bnz	0x1daa               	BNZ	_00390_DS_
001da8   d0dd     bra	0x1f64               	BRA	_00294_DS_
                                           _00390_DS_:
001daa   5000     movf	0, 0, 0             	MOVF	r0x00, W
001dac   0a2d     xorlw	0x2d               	XORLW	0x2d
001dae   e101     bnz	0x1db2               	BNZ	_00392_DS_
001db0   d0f9     bra	0x1fa4               	BRA	_00297_DS_
                                           _00392_DS_:
001db2   5000     movf	0, 0, 0             	MOVF	r0x00, W
001db4   0a30     xorlw	0x30               	XORLW	0x30
001db6   e101     bnz	0x1dba               	BNZ	_00394_DS_
001db8   d0a5     bra	0x1f04               	BRA	_00291_DS_
                                           _00394_DS_:
001dba   5000     movf	0, 0, 0             	MOVF	r0x00, W
001dbc   0a31     xorlw	0x31               	XORLW	0x31
001dbe   e101     bnz	0x1dc2               	BNZ	_00396_DS_
001dc0   d094     bra	0x1eea               	BRA	_00290_DS_
                                           _00396_DS_:
001dc2   5000     movf	0, 0, 0             	MOVF	r0x00, W
001dc4   0a48     xorlw	0x48               	XORLW	0x48
001dc6   e101     bnz	0x1dca               	BNZ	_00398_DS_
001dc8   d13e     bra	0x2046               	BRA	_00370_DS_
                                           _00398_DS_:
001dca   5000     movf	0, 0, 0             	MOVF	r0x00, W
001dcc   0a53     xorlw	0x53               	XORLW	0x53
001dce   e101     bnz	0x1dd2               	BNZ	_00400_DS_
001dd0   d108     bra	0x1fe2               	BRA	_00366_DS_
                                           _00400_DS_:
001dd2   5000     movf	0, 0, 0             	MOVF	r0x00, W
001dd4   0a5a     xorlw	0x5a               	XORLW	0x5a
001dd6   e101     bnz	0x1dda               	BNZ	_00402_DS_
001dd8   d0b3     bra	0x1f40               	BRA	_00293_DS_
                                           _00402_DS_:
001dda   5000     movf	0, 0, 0             	MOVF	r0x00, W
001ddc   0a61     xorlw	0x61               	XORLW	0x61
001dde   e101     bnz	0x1de2               	BNZ	_00404_DS_
001de0   d048     bra	0x1e72               	BRA	_00287_DS_
                                           _00404_DS_:
001de2   5000     movf	0, 0, 0             	MOVF	r0x00, W
001de4   0a62     xorlw	0x62               	XORLW	0x62
001de6   e101     bnz	0x1dea               	BNZ	_00406_DS_
001de8   d06c     bra	0x1ec2               	BRA	_00289_DS_
                                           _00406_DS_:
001dea   5000     movf	0, 0, 0             	MOVF	r0x00, W
001dec   0a64     xorlw	0x64               	XORLW	0x64
001dee   e101     bnz	0x1df2               	BNZ	_00408_DS_
001df0   d054     bra	0x1e9a               	BRA	_00288_DS_
                                           _00408_DS_:
001df2   5000     movf	0, 0, 0             	MOVF	r0x00, W
001df4   0a68     xorlw	0x68               	XORLW	0x68
001df6   e101     bnz	0x1dfa               	BNZ	_00410_DS_
001df8   d18d     bra	0x2114               	BRA	_00309_DS_
                                           _00410_DS_:
001dfa   5000     movf	0, 0, 0             	MOVF	r0x00, W
001dfc   0a6c     xorlw	0x6c               	XORLW	0x6c
001dfe   e101     bnz	0x1e02               	BNZ	_00412_DS_
001e00   d193     bra	0x2128               	BRA	_00378_DS_
                                           _00412_DS_:
001e02   5000     movf	0, 0, 0             	MOVF	r0x00, W
001e04   0a72     xorlw	0x72               	XORLW	0x72
001e06   e101     bnz	0x1e0a               	BNZ	_00414_DS_
001e08   d1c1     bra	0x218c               	BRA	_00382_DS_
                                           _00414_DS_:
001e0a   5000     movf	0, 0, 0             	MOVF	r0x00, W
001e0c   0a73     xorlw	0x73               	XORLW	0x73
001e0e   e01d     bz	0x1e4a                	BZ	_00286_DS_
001e10   5000     movf	0, 0, 0             	MOVF	r0x00, W
001e12   0a77     xorlw	0x77               	XORLW	0x77
001e14   e006     bz	0x1e22                	BZ	_00285_DS_
001e16   5000     movf	0, 0, 0             	MOVF	r0x00, W
001e18   0a7a     xorlw	0x7a               	XORLW	0x7a
001e1a   e101     bnz	0x1e1e               	BNZ	_00420_DS_
001e1c   d080     bra	0x1f1e               	BRA	_00292_DS_
                                           _00420_DS_:
001e1e   eff7     goto	0x21ee              	GOTO	_00343_DS_
001e20   f010
                                           _00285_DS_:
                                           ;	.line	433; firmware.c	DRIVE = &forward;   usart_puts("w\n");
001e22   0e07     movlw	0x7                	MOVLW	HIGH(_forward)
001e24   0107     movlb	0x7                	BANKSEL	(_DRIVE + 1)
001e26   6f12     movwf	0x12, 0x1          	MOVWF	(_DRIVE + 1), B
001e28   0e05     movlw	0x5                	MOVLW	LOW(_forward)
001e2a   0107     movlb	0x7                	BANKSEL	_DRIVE
001e2c   6f11     movwf	0x11, 0x1          	MOVWF	_DRIVE, B
001e2e   0e80     movlw	0x80               	MOVLW	0x80
001e30   0107     movlb	0x7                	BANKSEL	(_DRIVE + 2)
001e32   6f13     movwf	0x13, 0x1          	MOVWF	(_DRIVE + 2), B
001e34   0e00     movlw	0                  	MOVLW	UPPER(__str_12)
001e36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e38   0e39     movlw	0x39               	MOVLW	HIGH(__str_12)
001e3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e3c   0e8e     movlw	0x8e               	MOVLW	LOW(__str_12)
001e3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e40   ecad     call	0x715a, 0           	CALL	_usart_puts
001e42   f038
001e44   0e03     movlw	0x3                	MOVLW	0x03
001e46   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	434; firmware.c	break;
001e48   d1d2     bra	0x21ee               	BRA	_00343_DS_
                                           _00286_DS_:
                                           ;	.line	436; firmware.c	DRIVE = &backward;  usart_puts("s\n");
001e4a   0e07     movlw	0x7                	MOVLW	HIGH(_backward)
001e4c   0107     movlb	0x7                	BANKSEL	(_DRIVE + 1)
001e4e   6f12     movwf	0x12, 0x1          	MOVWF	(_DRIVE + 1), B
001e50   0e07     movlw	0x7                	MOVLW	LOW(_backward)
001e52   0107     movlb	0x7                	BANKSEL	_DRIVE
001e54   6f11     movwf	0x11, 0x1          	MOVWF	_DRIVE, B
001e56   0e80     movlw	0x80               	MOVLW	0x80
001e58   0107     movlb	0x7                	BANKSEL	(_DRIVE + 2)
001e5a   6f13     movwf	0x13, 0x1          	MOVWF	(_DRIVE + 2), B
001e5c   0e00     movlw	0                  	MOVLW	UPPER(__str_13)
001e5e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e60   0e39     movlw	0x39               	MOVLW	HIGH(__str_13)
001e62   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e64   0e92     movlw	0x92               	MOVLW	LOW(__str_13)
001e66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e68   ecad     call	0x715a, 0           	CALL	_usart_puts
001e6a   f038
001e6c   0e03     movlw	0x3                	MOVLW	0x03
001e6e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	437; firmware.c	break;
001e70   d1be     bra	0x21ee               	BRA	_00343_DS_
                                           _00287_DS_:
                                           ;	.line	439; firmware.c	DRIVE = &rotate_left;   usart_puts("a\n");
001e72   0e07     movlw	0x7                	MOVLW	HIGH(_rotate_left)
001e74   0107     movlb	0x7                	BANKSEL	(_DRIVE + 1)
001e76   6f12     movwf	0x12, 0x1          	MOVWF	(_DRIVE + 1), B
001e78   0e09     movlw	0x9                	MOVLW	LOW(_rotate_left)
001e7a   0107     movlb	0x7                	BANKSEL	_DRIVE
001e7c   6f11     movwf	0x11, 0x1          	MOVWF	_DRIVE, B
001e7e   0e80     movlw	0x80               	MOVLW	0x80
001e80   0107     movlb	0x7                	BANKSEL	(_DRIVE + 2)
001e82   6f13     movwf	0x13, 0x1          	MOVWF	(_DRIVE + 2), B
001e84   0e00     movlw	0                  	MOVLW	UPPER(__str_14)
001e86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e88   0e39     movlw	0x39               	MOVLW	HIGH(__str_14)
001e8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e8c   0e96     movlw	0x96               	MOVLW	LOW(__str_14)
001e8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e90   ecad     call	0x715a, 0           	CALL	_usart_puts
001e92   f038
001e94   0e03     movlw	0x3                	MOVLW	0x03
001e96   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	440; firmware.c	break;
001e98   d1aa     bra	0x21ee               	BRA	_00343_DS_
                                           _00288_DS_:
                                           ;	.line	442; firmware.c	DRIVE = &rotate_right;   usart_puts("d\n");
001e9a   0e07     movlw	0x7                	MOVLW	HIGH(_rotate_right)
001e9c   0107     movlb	0x7                	BANKSEL	(_DRIVE + 1)
001e9e   6f12     movwf	0x12, 0x1          	MOVWF	(_DRIVE + 1), B
001ea0   0e0b     movlw	0xb                	MOVLW	LOW(_rotate_right)
001ea2   0107     movlb	0x7                	BANKSEL	_DRIVE
001ea4   6f11     movwf	0x11, 0x1          	MOVWF	_DRIVE, B
001ea6   0e80     movlw	0x80               	MOVLW	0x80
001ea8   0107     movlb	0x7                	BANKSEL	(_DRIVE + 2)
001eaa   6f13     movwf	0x13, 0x1          	MOVWF	(_DRIVE + 2), B
001eac   0e00     movlw	0                  	MOVLW	UPPER(__str_15)
001eae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001eb0   0e39     movlw	0x39               	MOVLW	HIGH(__str_15)
001eb2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001eb4   0e9a     movlw	0x9a               	MOVLW	LOW(__str_15)
001eb6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001eb8   ecad     call	0x715a, 0           	CALL	_usart_puts
001eba   f038
001ebc   0e03     movlw	0x3                	MOVLW	0x03
001ebe   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	443; firmware.c	break;
001ec0   d196     bra	0x21ee               	BRA	_00343_DS_
                                           _00289_DS_:
                                           ;	.line	445; firmware.c	DRIVE = &halt;  usart_puts("b\n");
001ec2   0e07     movlw	0x7                	MOVLW	HIGH(_halt)
001ec4   0107     movlb	0x7                	BANKSEL	(_DRIVE + 1)
001ec6   6f12     movwf	0x12, 0x1          	MOVWF	(_DRIVE + 1), B
001ec8   0e0d     movlw	0xd                	MOVLW	LOW(_halt)
001eca   0107     movlb	0x7                	BANKSEL	_DRIVE
001ecc   6f11     movwf	0x11, 0x1          	MOVWF	_DRIVE, B
001ece   0e80     movlw	0x80               	MOVLW	0x80
001ed0   0107     movlb	0x7                	BANKSEL	(_DRIVE + 2)
001ed2   6f13     movwf	0x13, 0x1          	MOVWF	(_DRIVE + 2), B
001ed4   0e00     movlw	0                  	MOVLW	UPPER(__str_16)
001ed6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ed8   0e39     movlw	0x39               	MOVLW	HIGH(__str_16)
001eda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001edc   0e9e     movlw	0x9e               	MOVLW	LOW(__str_16)
001ede   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ee0   ecad     call	0x715a, 0           	CALL	_usart_puts
001ee2   f038
001ee4   0e03     movlw	0x3                	MOVLW	0x03
001ee6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	446; firmware.c	break;
001ee8   d182     bra	0x21ee               	BRA	_00343_DS_
                                           _00290_DS_:
                                           ;	.line	448; firmware.c	controller_end_autonomous_mode();
001eea   ec70     call	0x7ae0, 0           	CALL	_controller_end_autonomous_mode
001eec   f03d
                                           ;	.line	449; firmware.c	usart_puts("Radio control\n");
001eee   0e00     movlw	0                  	MOVLW	UPPER(__str_17)
001ef0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ef2   0e39     movlw	0x39               	MOVLW	HIGH(__str_17)
001ef4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ef6   0ea2     movlw	0xa2               	MOVLW	LOW(__str_17)
001ef8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001efa   ecad     call	0x715a, 0           	CALL	_usart_puts
001efc   f038
001efe   0e03     movlw	0x3                	MOVLW	0x03
001f00   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	450; firmware.c	break;
001f02   d175     bra	0x21ee               	BRA	_00343_DS_
                                           _00291_DS_:
                                           ;	.line	452; firmware.c	controller_begin_autonomous_mode();
001f04   ec56     call	0x7aac, 0           	CALL	_controller_begin_autonomous_mode
001f06   f03d
                                           ;	.line	453; firmware.c	usart_puts("Serial control\n");
001f08   0e00     movlw	0                  	MOVLW	UPPER(__str_18)
001f0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f0c   0e39     movlw	0x39               	MOVLW	HIGH(__str_18)
001f0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f10   0eb2     movlw	0xb2               	MOVLW	LOW(__str_18)
001f12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f14   ecad     call	0x715a, 0           	CALL	_usart_puts
001f16   f038
001f18   0e03     movlw	0x3                	MOVLW	0x03
001f1a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	454; firmware.c	break;
001f1c   d168     bra	0x21ee               	BRA	_00343_DS_
                                           _00292_DS_:
001f1e   0107     movlb	0x7                	BANKSEL	_SPEED
                                           ;	.line	456; firmware.c	SPEED = 000;    printf("S%d",SPEED);
001f20   6b02     clrf	0x2, 0x1            	CLRF	_SPEED, B
001f22   0e00     movlw	0                  	MOVLW	0x00
001f24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f26   0e00     movlw	0                  	MOVLW	0x00
001f28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f2a   0e00     movlw	0                  	MOVLW	UPPER(__str_19)
001f2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f2e   0e39     movlw	0x39               	MOVLW	HIGH(__str_19)
001f30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f32   0ec2     movlw	0xc2               	MOVLW	LOW(__str_19)
001f34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f36   ecd7     call	0x73ae, 0           	CALL	_printf
001f38   f039
001f3a   0e05     movlw	0x5                	MOVLW	0x05
001f3c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	457; firmware.c	break;
001f3e   d157     bra	0x21ee               	BRA	_00343_DS_
                                           _00293_DS_:
                                           ;	.line	459; firmware.c	SPEED = 127;    printf("S%d",SPEED);
001f40   0e7f     movlw	0x7f               	MOVLW	0x7f
001f42   0107     movlb	0x7                	BANKSEL	_SPEED
001f44   6f02     movwf	0x2, 0x1           	MOVWF	_SPEED, B
001f46   0e00     movlw	0                  	MOVLW	0x00
001f48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f4a   0e7f     movlw	0x7f               	MOVLW	0x7f
001f4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f4e   0e00     movlw	0                  	MOVLW	UPPER(__str_19)
001f50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f52   0e39     movlw	0x39               	MOVLW	HIGH(__str_19)
001f54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f56   0ec2     movlw	0xc2               	MOVLW	LOW(__str_19)
001f58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f5a   ecd7     call	0x73ae, 0           	CALL	_printf
001f5c   f039
001f5e   0e05     movlw	0x5                	MOVLW	0x05
001f60   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	460; firmware.c	break;
001f62   d145     bra	0x21ee               	BRA	_00343_DS_
                                           _00294_DS_:
                                           ;	.line	462; firmware.c	SPEED += 5;
001f64   0e05     movlw	0x5                	MOVLW	0x05
001f66   0107     movlb	0x7                	BANKSEL	_SPEED
001f68   2702     addwf	0x2, 0x1, 0x1      	ADDWF	_SPEED, F, B
                                           ;	.line	463; firmware.c	if(SPEED < 0) SPEED = 127;  printf("S%d",SPEED);
001f6a   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
001f6c   0107     movlb	0x7                	BANKSEL	_SPEED
001f6e   af02     btfss	0x2, 0x7, 0x1      	BTFSS	_SPEED, 7, B
001f70   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
001f72   e303     bnc	0x1f7a               	BNC	_00296_DS_
001f74   0e7f     movlw	0x7f               	MOVLW	0x7f
001f76   0107     movlb	0x7                	BANKSEL	_SPEED
001f78   6f02     movwf	0x2, 0x1           	MOVWF	_SPEED, B
                                           _00296_DS_:
001f7a   c702     movff	0x702, 0           	MOVFF	_SPEED, r0x00
001f7c   f000
001f7e   6a01     clrf	0x1, 0              	CLRF	r0x01
001f80   0107     movlb	0x7                	BANKSEL	_SPEED
001f82   bf02     btfsc	0x2, 0x7, 0x1      	BTFSC	_SPEED, 7, B
001f84   6801     setf	0x1, 0              	SETF	r0x01
001f86   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001f88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f8a   5000     movf	0, 0, 0             	MOVF	r0x00, W
001f8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f8e   0e00     movlw	0                  	MOVLW	UPPER(__str_19)
001f90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f92   0e39     movlw	0x39               	MOVLW	HIGH(__str_19)
001f94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f96   0ec2     movlw	0xc2               	MOVLW	LOW(__str_19)
001f98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001f9a   ecd7     call	0x73ae, 0           	CALL	_printf
001f9c   f039
001f9e   0e05     movlw	0x5                	MOVLW	0x05
001fa0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	464; firmware.c	break;
001fa2   d125     bra	0x21ee               	BRA	_00343_DS_
                                           _00297_DS_:
                                           ;	.line	466; firmware.c	SPEED -= 5;
001fa4   0efb     movlw	0xfb               	MOVLW	0xfb
001fa6   0107     movlb	0x7                	BANKSEL	_SPEED
001fa8   2702     addwf	0x2, 0x1, 0x1      	ADDWF	_SPEED, F, B
                                           ;	.line	467; firmware.c	if(SPEED < 0) SPEED = 0;    printf("S%d",SPEED);
001faa   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
001fac   0107     movlb	0x7                	BANKSEL	_SPEED
001fae   af02     btfss	0x2, 0x7, 0x1      	BTFSS	_SPEED, 7, B
                                           ; #	BCF	STATUS, 0
                                           ; #	BTFSS	STATUS, 0
                                           ; #	GOTO	_00299_DS_
                                           ; #	CLRF	_SPEED, B
                                           ; #	MOVFF	_SPEED, r0x00
001fb0   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
001fb2   e302     bnc	0x1fb8               	BNC	_10466_DS_
001fb4   0107     movlb	0x7                	BANKSEL	_SPEED
001fb6   6b02     clrf	0x2, 0x1            	CLRF	_SPEED, B
                                           _10466_DS_:
001fb8   c702     movff	0x702, 0           	MOVFF	_SPEED, r0x00
001fba   f000
001fbc   6a01     clrf	0x1, 0              	CLRF	r0x01
001fbe   0107     movlb	0x7                	BANKSEL	_SPEED
001fc0   bf02     btfsc	0x2, 0x7, 0x1      	BTFSC	_SPEED, 7, B
001fc2   6801     setf	0x1, 0              	SETF	r0x01
001fc4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001fc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001fc8   5000     movf	0, 0, 0             	MOVF	r0x00, W
001fca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001fcc   0e00     movlw	0                  	MOVLW	UPPER(__str_19)
001fce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001fd0   0e39     movlw	0x39               	MOVLW	HIGH(__str_19)
001fd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001fd4   0ec2     movlw	0xc2               	MOVLW	LOW(__str_19)
001fd6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001fd8   ecd7     call	0x73ae, 0           	CALL	_printf
001fda   f039
001fdc   0e05     movlw	0x5                	MOVLW	0x05
001fde   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	468; firmware.c	break;
001fe0   d106     bra	0x21ee               	BRA	_00343_DS_
                                           _00366_DS_:
                                           ;	.line	471; firmware.c	for(j=0;!usart_data_available() && j<0x7FFE;j++);
001fe2   6a00     clrf	0, 0                	CLRF	r0x00
001fe4   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00319_DS_:
001fe6   ec6b     call	0x7cd6, 0           	CALL	_usart_data_available
001fe8   f03e
001fea   6e02     movwf	0x2, 0             	MOVWF	r0x02
001fec   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001fee   e10b     bnz	0x2006               	BNZ	_00322_DS_
001ff0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001ff2   0f80     addlw	0x80               	ADDLW	0x80
001ff4   0f01     addlw	0x1                	ADDLW	0x01
001ff6   e102     bnz	0x1ffc               	BNZ	_00421_DS_
001ff8   0efe     movlw	0xfe               	MOVLW	0xfe
001ffa   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00421_DS_:
001ffc   e204     bc	0x2006                	BC	_00322_DS_
001ffe   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002000   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002002   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
002004   d7f0     bra	0x1fe6               	BRA	_00319_DS_
                                           _00322_DS_:
                                           ;	.line	472; firmware.c	if(j>=0x7FFE)
002006   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002008   0f80     addlw	0x80               	ADDLW	0x80
00200a   0f01     addlw	0x1                	ADDLW	0x01
00200c   e102     bnz	0x2012               	BNZ	_00422_DS_
00200e   0efe     movlw	0xfe               	MOVLW	0xfe
002010   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00422_DS_:
002012   e304     bnc	0x201c               	BNC	_00302_DS_
                                           ;	.line	473; firmware.c	SPEED = usart_get_byte();
002014   ec7a     call	0x7cf4, 0           	CALL	_usart_get_byte
002016   f03e
002018   0107     movlb	0x7                	BANKSEL	_SPEED
00201a   6f02     movwf	0x2, 0x1           	MOVWF	_SPEED, B
                                           _00302_DS_:
                                           ;	.line	474; firmware.c	printf("S%d",SPEED);
00201c   c702     movff	0x702, 0           	MOVFF	_SPEED, r0x00
00201e   f000
002020   6a01     clrf	0x1, 0              	CLRF	r0x01
002022   0107     movlb	0x7                	BANKSEL	_SPEED
002024   bf02     btfsc	0x2, 0x7, 0x1      	BTFSC	_SPEED, 7, B
002026   6801     setf	0x1, 0              	SETF	r0x01
002028   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00202a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00202c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00202e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002030   0e00     movlw	0                  	MOVLW	UPPER(__str_19)
002032   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002034   0e39     movlw	0x39               	MOVLW	HIGH(__str_19)
002036   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002038   0ec2     movlw	0xc2               	MOVLW	LOW(__str_19)
00203a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00203c   ecd7     call	0x73ae, 0           	CALL	_printf
00203e   f039
002040   0e05     movlw	0x5                	MOVLW	0x05
002042   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	475; firmware.c	break;
002044   d0d4     bra	0x21ee               	BRA	_00343_DS_
                                           _00370_DS_:
                                           ;	.line	478; firmware.c	for(j=0;!usart_data_available() && j<0x7FFE;j++);
002046   6a00     clrf	0, 0                	CLRF	r0x00
002048   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00324_DS_:
00204a   ec6b     call	0x7cd6, 0           	CALL	_usart_data_available
00204c   f03e
00204e   6e02     movwf	0x2, 0             	MOVWF	r0x02
002050   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002052   e10b     bnz	0x206a               	BNZ	_00327_DS_
002054   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002056   0f80     addlw	0x80               	ADDLW	0x80
002058   0f01     addlw	0x1                	ADDLW	0x01
00205a   e102     bnz	0x2060               	BNZ	_00423_DS_
00205c   0efe     movlw	0xfe               	MOVLW	0xfe
00205e   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00423_DS_:
002060   e204     bc	0x206a                	BC	_00327_DS_
002062   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002064   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002066   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
002068   d7f0     bra	0x204a               	BRA	_00324_DS_
                                           _00327_DS_:
                                           ;	.line	479; firmware.c	if(j<0x7FFE)
00206a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00206c   0f80     addlw	0x80               	ADDLW	0x80
00206e   0f01     addlw	0x1                	ADDLW	0x01
002070   e102     bnz	0x2076               	BNZ	_00424_DS_
002072   0efe     movlw	0xfe               	MOVLW	0xfe
002074   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00424_DS_:
002076   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002078   d0ba     bra	0x21ee               	BRA	_00343_DS_
                                           ;	.line	480; firmware.c	k = usart_getc();
00207a   ec24     call	0x7c48, 0           	CALL	_usart_getc
00207c   f03e
00207e   6e00     movwf	0, 0               	MOVWF	r0x00
002080   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	483; firmware.c	for(j=0;!usart_data_available() && j<0x7FFE;j++);
002082   6a02     clrf	0x2, 0              	CLRF	r0x02
002084   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00329_DS_:
002086   ec6b     call	0x7cd6, 0           	CALL	_usart_data_available
002088   f03e
00208a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00208c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00208e   e10b     bnz	0x20a6               	BNZ	_00332_DS_
002090   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002092   0f80     addlw	0x80               	ADDLW	0x80
002094   0f01     addlw	0x1                	ADDLW	0x01
002096   e102     bnz	0x209c               	BNZ	_00425_DS_
002098   0efe     movlw	0xfe               	MOVLW	0xfe
00209a   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00425_DS_:
00209c   e204     bc	0x20a6                	BC	_00332_DS_
00209e   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0020a0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0020a2   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
0020a4   d7f0     bra	0x2086               	BRA	_00329_DS_
                                           _00332_DS_:
                                           ;	.line	484; firmware.c	if(j<0x7FFE)
0020a6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0020a8   0f80     addlw	0x80               	ADDLW	0x80
0020aa   0f01     addlw	0x1                	ADDLW	0x01
0020ac   e102     bnz	0x20b2               	BNZ	_00426_DS_
0020ae   0efe     movlw	0xfe               	MOVLW	0xfe
0020b0   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00426_DS_:
0020b2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0020b4   d09c     bra	0x21ee               	BRA	_00343_DS_
                                           ;	.line	486; firmware.c	RIGHT_SPEED = usart_getc();
0020b6   ec24     call	0x7c48, 0           	CALL	_usart_getc
0020b8   f03e
0020ba   0107     movlb	0x7                	BANKSEL	_RIGHT_SPEED
0020bc   6f04     movwf	0x4, 0x1           	MOVWF	_RIGHT_SPEED, B
                                           ;	.line	487; firmware.c	LEFT_SPEED = k;
0020be   5000     movf	0, 0, 0             	MOVF	r0x00, W
0020c0   0107     movlb	0x7                	BANKSEL	_LEFT_SPEED
0020c2   6f03     movwf	0x3, 0x1           	MOVWF	_LEFT_SPEED, B
                                           ;	.line	488; firmware.c	printf("H%c%c\n",LEFT_SPEED,RIGHT_SPEED);
0020c4   c704     movff	0x704, 0           	MOVFF	_RIGHT_SPEED, r0x00
0020c6   f000
0020c8   6a01     clrf	0x1, 0              	CLRF	r0x01
0020ca   0107     movlb	0x7                	BANKSEL	_RIGHT_SPEED
0020cc   bf04     btfsc	0x4, 0x7, 0x1      	BTFSC	_RIGHT_SPEED, 7, B
0020ce   6801     setf	0x1, 0              	SETF	r0x01
0020d0   c703     movff	0x703, 0x2         	MOVFF	_LEFT_SPEED, r0x02
0020d2   f002
0020d4   6a03     clrf	0x3, 0              	CLRF	r0x03
0020d6   0107     movlb	0x7                	BANKSEL	_LEFT_SPEED
0020d8   bf03     btfsc	0x3, 0x7, 0x1      	BTFSC	_LEFT_SPEED, 7, B
0020da   6803     setf	0x3, 0              	SETF	r0x03
0020dc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0020de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020e0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0020e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020e4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0020e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020e8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0020ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020ec   0e00     movlw	0                  	MOVLW	UPPER(__str_20)
0020ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020f0   0e39     movlw	0x39               	MOVLW	HIGH(__str_20)
0020f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020f4   0ec6     movlw	0xc6               	MOVLW	LOW(__str_20)
0020f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0020f8   ecd7     call	0x73ae, 0           	CALL	_printf
0020fa   f039
0020fc   0e07     movlw	0x7                	MOVLW	0x07
0020fe   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	489; firmware.c	DRIVE = &differential;
002100   0e07     movlw	0x7                	MOVLW	HIGH(_differential)
002102   0107     movlb	0x7                	BANKSEL	(_DRIVE + 1)
002104   6f12     movwf	0x12, 0x1          	MOVWF	(_DRIVE + 1), B
002106   0e0f     movlw	0xf                	MOVLW	LOW(_differential)
002108   0107     movlb	0x7                	BANKSEL	_DRIVE
00210a   6f11     movwf	0x11, 0x1          	MOVWF	_DRIVE, B
00210c   0e80     movlw	0x80               	MOVLW	0x80
00210e   0107     movlb	0x7                	BANKSEL	(_DRIVE + 2)
002110   6f13     movwf	0x13, 0x1          	MOVWF	(_DRIVE + 2), B
                                           ;	.line	491; firmware.c	break;
002112   d06d     bra	0x21ee               	BRA	_00343_DS_
                                           _00309_DS_:
                                           ;	.line	494; firmware.c	DRIVE = &differential;
002114   0e07     movlw	0x7                	MOVLW	HIGH(_differential)
002116   0107     movlb	0x7                	BANKSEL	(_DRIVE + 1)
002118   6f12     movwf	0x12, 0x1          	MOVWF	(_DRIVE + 1), B
00211a   0e0f     movlw	0xf                	MOVLW	LOW(_differential)
00211c   0107     movlb	0x7                	BANKSEL	_DRIVE
00211e   6f11     movwf	0x11, 0x1          	MOVWF	_DRIVE, B
002120   0e80     movlw	0x80               	MOVLW	0x80
002122   0107     movlb	0x7                	BANKSEL	(_DRIVE + 2)
002124   6f13     movwf	0x13, 0x1          	MOVWF	(_DRIVE + 2), B
                                           ;	.line	495; firmware.c	break;
002126   d063     bra	0x21ee               	BRA	_00343_DS_
                                           _00378_DS_:
                                           ;	.line	498; firmware.c	for(j=0;!usart_data_available() && j<0x7FFE;j++);
002128   6a00     clrf	0, 0                	CLRF	r0x00
00212a   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00334_DS_:
00212c   ec6b     call	0x7cd6, 0           	CALL	_usart_data_available
00212e   f03e
002130   6e02     movwf	0x2, 0             	MOVWF	r0x02
002132   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002134   e10b     bnz	0x214c               	BNZ	_00337_DS_
002136   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002138   0f80     addlw	0x80               	ADDLW	0x80
00213a   0f01     addlw	0x1                	ADDLW	0x01
00213c   e102     bnz	0x2142               	BNZ	_00427_DS_
00213e   0efe     movlw	0xfe               	MOVLW	0xfe
002140   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00427_DS_:
002142   e204     bc	0x214c                	BC	_00337_DS_
002144   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002146   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002148   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00214a   d7f0     bra	0x212c               	BRA	_00334_DS_
                                           _00337_DS_:
                                           ;	.line	499; firmware.c	if(j<0x7FFE)
00214c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00214e   0f80     addlw	0x80               	ADDLW	0x80
002150   0f01     addlw	0x1                	ADDLW	0x01
002152   e102     bnz	0x2158               	BNZ	_00428_DS_
002154   0efe     movlw	0xfe               	MOVLW	0xfe
002156   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00428_DS_:
002158   e204     bc	0x2162                	BC	_00312_DS_
                                           ;	.line	500; firmware.c	LEFT_SPEED = usart_getc();
00215a   ec24     call	0x7c48, 0           	CALL	_usart_getc
00215c   f03e
00215e   0107     movlb	0x7                	BANKSEL	_LEFT_SPEED
002160   6f03     movwf	0x3, 0x1           	MOVWF	_LEFT_SPEED, B
                                           _00312_DS_:
                                           ;	.line	501; firmware.c	printf("l%c",LEFT_SPEED);
002162   c703     movff	0x703, 0           	MOVFF	_LEFT_SPEED, r0x00
002164   f000
002166   6a01     clrf	0x1, 0              	CLRF	r0x01
002168   0107     movlb	0x7                	BANKSEL	_LEFT_SPEED
00216a   bf03     btfsc	0x3, 0x7, 0x1      	BTFSC	_LEFT_SPEED, 7, B
00216c   6801     setf	0x1, 0              	SETF	r0x01
00216e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002170   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002172   5000     movf	0, 0, 0             	MOVF	r0x00, W
002174   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002176   0e00     movlw	0                  	MOVLW	UPPER(__str_21)
002178   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00217a   0e39     movlw	0x39               	MOVLW	HIGH(__str_21)
00217c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00217e   0ece     movlw	0xce               	MOVLW	LOW(__str_21)
002180   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002182   ecd7     call	0x73ae, 0           	CALL	_printf
002184   f039
002186   0e05     movlw	0x5                	MOVLW	0x05
002188   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	502; firmware.c	break;
00218a   d031     bra	0x21ee               	BRA	_00343_DS_
                                           _00382_DS_:
                                           ;	.line	504; firmware.c	for(j=0;!usart_data_available() && j<0x7FFE;j++);
00218c   6a00     clrf	0, 0                	CLRF	r0x00
00218e   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00339_DS_:
002190   ec6b     call	0x7cd6, 0           	CALL	_usart_data_available
002192   f03e
002194   6e02     movwf	0x2, 0             	MOVWF	r0x02
002196   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002198   e10b     bnz	0x21b0               	BNZ	_00342_DS_
00219a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00219c   0f80     addlw	0x80               	ADDLW	0x80
00219e   0f01     addlw	0x1                	ADDLW	0x01
0021a0   e102     bnz	0x21a6               	BNZ	_00429_DS_
0021a2   0efe     movlw	0xfe               	MOVLW	0xfe
0021a4   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00429_DS_:
0021a6   e204     bc	0x21b0                	BC	_00342_DS_
0021a8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0021aa   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0021ac   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0021ae   d7f0     bra	0x2190               	BRA	_00339_DS_
                                           _00342_DS_:
                                           ;	.line	505; firmware.c	if(j<0x7FFE)
0021b0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0021b2   0f80     addlw	0x80               	ADDLW	0x80
0021b4   0f01     addlw	0x1                	ADDLW	0x01
0021b6   e102     bnz	0x21bc               	BNZ	_00430_DS_
0021b8   0efe     movlw	0xfe               	MOVLW	0xfe
0021ba   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00430_DS_:
0021bc   e204     bc	0x21c6                	BC	_00315_DS_
                                           ;	.line	506; firmware.c	RIGHT_SPEED = usart_getc();
0021be   ec24     call	0x7c48, 0           	CALL	_usart_getc
0021c0   f03e
0021c2   0107     movlb	0x7                	BANKSEL	_RIGHT_SPEED
0021c4   6f04     movwf	0x4, 0x1           	MOVWF	_RIGHT_SPEED, B
                                           _00315_DS_:
                                           ;	.line	507; firmware.c	printf("r%c",RIGHT_SPEED);
0021c6   c704     movff	0x704, 0           	MOVFF	_RIGHT_SPEED, r0x00
0021c8   f000
0021ca   6a01     clrf	0x1, 0              	CLRF	r0x01
0021cc   0107     movlb	0x7                	BANKSEL	_RIGHT_SPEED
0021ce   bf04     btfsc	0x4, 0x7, 0x1      	BTFSC	_RIGHT_SPEED, 7, B
0021d0   6801     setf	0x1, 0              	SETF	r0x01
0021d2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0021d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021d6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0021d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021da   0e00     movlw	0                  	MOVLW	UPPER(__str_22)
0021dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021de   0e39     movlw	0x39               	MOVLW	HIGH(__str_22)
0021e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021e2   0ed2     movlw	0xd2               	MOVLW	LOW(__str_22)
0021e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021e6   ecd7     call	0x73ae, 0           	CALL	_printf
0021e8   f039
0021ea   0e05     movlw	0x5                	MOVLW	0x05
0021ec   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00343_DS_:
                                           ;	.line	512; firmware.c	}
0021ee   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0021f0   f004
0021f2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0021f4   f003
0021f6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0021f8   f002
0021fa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0021fc   f001
0021fe   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002200   f000
002202   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002204   ffd9
002206   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__usart_get_byte	code
                                           _usart_get_byte:
                                           ;	.line	417; firmware.c	char usart_get_byte(void)
007cf4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007cf6   ffe5
007cf8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007cfa   ffd9
007cfc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007cfe   ffe5
                                           ;	.line	419; firmware.c	return RCREG;
007d00   cfae     movff	0xfae, 0           	MOVFF	_RCREG, r0x00
007d02   f000
007d04   5000     movf	0, 0, 0             	MOVF	r0x00, W
007d06   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007d08   f000
007d0a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007d0c   ffd9
007d0e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__usart_get_byte_available	code
                                           _usart_get_byte_available:
                                           ;	.line	408; firmware.c	char usart_get_byte_available(void)
007c70   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007c72   ffe5
007c74   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007c76   ffd9
007c78   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007c7a   ffe5
                                           ;	.line	410; firmware.c	if(PIR1bits.RCIF)
007c7c   aa9e     btfss	0x9e, 0x5, 0       	BTFSS	_PIR1bits, 5
007c7e   d004     bra	0x7c88               	BRA	_00270_DS_
                                           ;	.line	411; firmware.c	return RCREG;
007c80   cfae     movff	0xfae, 0           	MOVFF	_RCREG, r0x00
007c82   f000
007c84   5000     movf	0, 0, 0             	MOVF	r0x00, W
007c86   d001     bra	0x7c8a               	BRA	_00272_DS_
                                           _00270_DS_:
                                           ;	.line	413; firmware.c	return 0;
007c88   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00272_DS_:
007c8a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007c8c   f000
007c8e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007c90   ffd9
007c92   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__usart_data_available	code
                                           _usart_data_available:
                                           ;	.line	402; firmware.c	char usart_data_available(void)
007cd6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007cd8   ffe5
007cda   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007cdc   ffd9
007cde   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007ce0   ffe5
                                           ;	.line	404; firmware.c	return PIR1bits.RCIF;
007ce2   6a00     clrf	0, 0                	CLRF	r0x00
007ce4   ba9e     btfsc	0x9e, 0x5, 0       	BTFSC	_PIR1bits, 5
007ce6   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
007ce8   5000     movf	0, 0, 0             	MOVF	r0x00, W
007cea   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007cec   f000
007cee   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007cf0   ffd9
007cf2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__reset_usart	code
                                           _reset_usart:
                                           ;	.line	396; firmware.c	void reset_usart()
007d80   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007d82   ffe5
007d84   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007d86   ffd9
                                           ;	.line	398; firmware.c	PIR1bits.RCIF = 0;
007d88   9a9e     bcf	0x9e, 0x5, 0         	BCF	_PIR1bits, 5
007d8a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007d8c   ffd9
007d8e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__autonomous_routine0	code
                                           _autonomous_routine0:
                                           ;	.line	353; firmware.c	void    autonomous_routine0(void)
00655a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00655c   ffe5
00655e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006560   ffd9
006562   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006564   ffe5
006566   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006568   ffe5
00656a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00656c   ffe5
                                           ;	.line	356; firmware.c	DPRINTF("Starting autonomous routine...\n");
00656e   0e00     movlw	0                  	MOVLW	UPPER(__str_10)
006570   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006572   0e39     movlw	0x39               	MOVLW	HIGH(__str_10)
006574   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006576   0e50     movlw	0x50               	MOVLW	LOW(__str_10)
006578   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00657a   ecd7     call	0x73ae, 0           	CALL	_printf
00657c   f039
00657e   0e03     movlw	0x3                	MOVLW	0x03
006580   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	360; firmware.c	set_drives_LR(AUTON_DRIVE_SPEED,AUTON_DRIVE_SPEED);
006582   0e46     movlw	0x46               	MOVLW	0x46
006584   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006586   0e46     movlw	0x46               	MOVLW	0x46
006588   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00658a   ec47     call	0x748e, 0           	CALL	_set_drives_LR
00658c   f03a
00658e   0e02     movlw	0x2                	MOVLW	0x02
006590   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	361; firmware.c	controller_submit_data(WAIT);
006592   0e01     movlw	0x1                	MOVLW	0x01
006594   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006596   ecf8     call	0x5df0, 0           	CALL	_controller_submit_data
006598   f02e
00659a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	365; firmware.c	for(i=0; (rc_read_data(6) != -127) && (i < 400);i++)
00659c   6a00     clrf	0, 0                	CLRF	r0x00
00659e   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00242_DS_:
0065a0   0e06     movlw	0x6                	MOVLW	0x06
0065a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0065a4   ec80     call	0x5700, 0           	CALL	_rc_read_data
0065a6   f02b
0065a8   6e02     movwf	0x2, 0             	MOVWF	r0x02
0065aa   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0065ac   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0065ae   0a81     xorlw	0x81               	XORLW	0x81
0065b0   e013     bz	0x65d8                	BZ	_00245_DS_
0065b2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0065b4   0f80     addlw	0x80               	ADDLW	0x80
0065b6   0f7f     addlw	0x7f               	ADDLW	0x7f
0065b8   e102     bnz	0x65be               	BNZ	_00254_DS_
0065ba   0e90     movlw	0x90               	MOVLW	0x90
0065bc   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00254_DS_:
0065be   e20c     bc	0x65d8                	BC	_00245_DS_
                                           ;	.line	367; firmware.c	delay_msec(50);
0065c0   0e00     movlw	0                  	MOVLW	0x00
0065c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0065c4   0e32     movlw	0x32               	MOVLW	0x32
0065c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0065c8   ec10     call	0x7420, 0           	CALL	_delay_msec
0065ca   f03a
0065cc   0e02     movlw	0x2                	MOVLW	0x02
0065ce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	365; firmware.c	for(i=0; (rc_read_data(6) != -127) && (i < 400);i++)
0065d0   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0065d2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0065d4   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0065d6   d7e4     bra	0x65a0               	BRA	_00242_DS_
                                           _00245_DS_:
0065d8   0107     movlb	0x7                	BANKSEL	_halt
                                           ;	.line	388; firmware.c	set_drives_LR(halt.left_multiplier,halt.left_multiplier);
0065da   510d     movf	0xd, 0, 0x1         	MOVF	_halt, W, B
0065dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0065de   0107     movlb	0x7                	BANKSEL	_halt
0065e0   510d     movf	0xd, 0, 0x1         	MOVF	_halt, W, B
0065e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0065e4   ec47     call	0x748e, 0           	CALL	_set_drives_LR
0065e6   f03a
0065e8   0e02     movlw	0x2                	MOVLW	0x02
0065ea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	389; firmware.c	controller_submit_data(WAIT);
0065ec   0e01     movlw	0x1                	MOVLW	0x01
0065ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0065f0   ecf8     call	0x5df0, 0           	CALL	_controller_submit_data
0065f2   f02e
0065f4   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	392; firmware.c	DPRINTF("Ending autonomous routine...\n");
0065f6   0e00     movlw	0                  	MOVLW	UPPER(__str_11)
0065f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0065fa   0e39     movlw	0x39               	MOVLW	HIGH(__str_11)
0065fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0065fe   0e70     movlw	0x70               	MOVLW	LOW(__str_11)
006600   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006602   ecd7     call	0x73ae, 0           	CALL	_printf
006604   f039
006606   0e03     movlw	0x3                	MOVLW	0x03
006608   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00660a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00660c   f002
00660e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006610   f001
006612   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006614   f000
006616   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006618   ffd9
00661a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__arcade_drive_routine	code
                                           _arcade_drive_routine:
                                           ;	.line	328; firmware.c	void    arcade_drive_routine(void)
0066de   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0066e0   ffe5
0066e2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0066e4   ffd9
0066e6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0066e8   ffe5
0066ea   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0066ec   ffe5
0066ee   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0066f0   ffe5
0066f2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0066f4   ffe5
0066f6   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0066f8   ffe5
0066fa   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0066fc   ffe5
0066fe   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
006700   ffe5
006702   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
006704   ffe5
                                           ;	.line	333; firmware.c	joy_x = rc_read_data(ARCADE_DRIVE_X_CHAN);
006706   0e04     movlw	0x4                	MOVLW	0x04
006708   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00670a   ec80     call	0x5700, 0           	CALL	_rc_read_data
00670c   f02b
00670e   6e00     movwf	0, 0               	MOVWF	r0x00
006710   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	334; firmware.c	joy_y = -rc_read_data(ARCADE_DRIVE_Y_CHAN);
006712   0e03     movlw	0x3                	MOVLW	0x03
006714   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006716   ec80     call	0x5700, 0           	CALL	_rc_read_data
006718   f02b
00671a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00671c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00671e   6c01     negf	0x1, 0              	NEGF	r0x01
                                           ;	.line	335; firmware.c	arcade_drive(joy_x, joy_y, PWM_MAX, &left_power, &right_power);
006720   0e02     movlw	0x2                	MOVLW	HIGH(_arcade_drive_routine_left_power_1_1)
006722   6e03     movwf	0x3, 0             	MOVWF	r0x03
006724   0ee2     movlw	0xe2               	MOVLW	LOW(_arcade_drive_routine_left_power_1_1)
006726   6e02     movwf	0x2, 0             	MOVWF	r0x02
006728   0e80     movlw	0x80               	MOVLW	0x80
00672a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00672c   0e02     movlw	0x2                	MOVLW	HIGH(_arcade_drive_routine_right_power_1_1)
00672e   6e06     movwf	0x6, 0             	MOVWF	r0x06
006730   0ee3     movlw	0xe3               	MOVLW	LOW(_arcade_drive_routine_right_power_1_1)
006732   6e05     movwf	0x5, 0             	MOVWF	r0x05
006734   0e80     movlw	0x80               	MOVLW	0x80
                                           ; #	MOVWF	r0x07
                                           ; #	MOVF	r0x07, W
006736   6e07     movwf	0x7, 0             	MOVWF	r0x07
006738   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00673a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00673c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00673e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006740   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006742   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
006744   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006746   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006748   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00674a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00674c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00674e   0e7f     movlw	0x7f               	MOVLW	0x7f
006750   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006752   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006754   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006756   5000     movf	0, 0, 0             	MOVF	r0x00, W
006758   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00675a   ec65     call	0x28ca, 0           	CALL	_arcade_drive
00675c   f014
00675e   0e09     movlw	0x9                	MOVLW	0x09
006760   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006762   0102     movlb	0x2                	BANKSEL	_arcade_drive_routine_right_power_1_1
                                           ;	.line	339; firmware.c	set_drives_LR(left_power,right_power);
006764   51e3     movf	0xe3, 0, 0x1        	MOVF	_arcade_drive_routine_right_power_1_1, W, B
006766   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006768   0102     movlb	0x2                	BANKSEL	_arcade_drive_routine_left_power_1_1
00676a   51e2     movf	0xe2, 0, 0x1        	MOVF	_arcade_drive_routine_left_power_1_1, W, B
00676c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00676e   ec47     call	0x748e, 0           	CALL	_set_drives_LR
006770   f03a
006772   0e02     movlw	0x2                	MOVLW	0x02
006774   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006776   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
006778   f007
00677a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00677c   f006
00677e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
006780   f005
006782   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006784   f004
006786   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006788   f003
00678a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00678c   f002
00678e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006790   f001
006792   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006794   f000
006796   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006798   ffd9
00679a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__tank_drive_routine	code
                                           _tank_drive_routine:
                                           ;	.line	306; firmware.c	void    tank_drive_routine(void)
00788e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007890   ffe5
007892   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007894   ffd9
007896   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007898   ffe5
                                           ;	.line	312; firmware.c	left_power = -rc_read_data(TANK_DRIVE_LEFT_CHAN);
00789a   0e03     movlw	0x3                	MOVLW	0x03
00789c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00789e   ec80     call	0x5700, 0           	CALL	_rc_read_data
0078a0   f02b
0078a2   6e00     movwf	0, 0               	MOVWF	r0x00
0078a4   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0078a6   1c00     comf	0, 0, 0             	COMF	r0x00, W
0078a8   0102     movlb	0x2                	BANKSEL	_tank_drive_routine_left_power_1_1
0078aa   6fe0     movwf	0xe0, 0x1          	MOVWF	_tank_drive_routine_left_power_1_1, B
0078ac   2be0     incf	0xe0, 0x1, 0x1      	INCF	_tank_drive_routine_left_power_1_1, F, B
                                           ;	.line	313; firmware.c	right_power = rc_read_data(TANK_DRIVE_RIGHT_CHAN);
0078ae   0e02     movlw	0x2                	MOVLW	0x02
0078b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0078b2   ec80     call	0x5700, 0           	CALL	_rc_read_data
0078b4   f02b
0078b6   0102     movlb	0x2                	BANKSEL	_tank_drive_routine_right_power_1_1
0078b8   6fe1     movwf	0xe1, 0x1          	MOVWF	_tank_drive_routine_right_power_1_1, B
0078ba   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0078bc   0102     movlb	0x2                	BANKSEL	_tank_drive_routine_right_power_1_1
                                           ;	.line	316; firmware.c	set_drives_LR(left_power,right_power);
0078be   51e1     movf	0xe1, 0, 0x1        	MOVF	_tank_drive_routine_right_power_1_1, W, B
0078c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0078c2   0102     movlb	0x2                	BANKSEL	_tank_drive_routine_left_power_1_1
0078c4   51e0     movf	0xe0, 0, 0x1        	MOVF	_tank_drive_routine_left_power_1_1, W, B
0078c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0078c8   ec47     call	0x748e, 0           	CALL	_set_drives_LR
0078ca   f03a
0078cc   0e02     movlw	0x2                	MOVLW	0x02
0078ce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0078d0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0078d2   f000
0078d4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0078d6   ffd9
0078d8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__rc_routine	code
                                           _rc_routine:
                                           ;	.line	243; firmware.c	void    rc_routine(void)
0031e2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0031e4   ffe5
0031e6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0031e8   ffd9
0031ea   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0031ec   ffe5
0031ee   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0031f0   ffe5
0031f2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0031f4   ffe5
0031f6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0031f8   ffe5
0031fa   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0031fc   ffe5
0031fe   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003200   ffe5
003202   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003204   ffe5
003206   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003208   ffe5
00320a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00320c   ffe5
00320e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
003210   ffe5
003212   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
003214   ffe5
003216   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
003218   ffe5
00321a   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00321c   ffe5
00321e   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
003220   ffe5
003222   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
003224   ffe5
003226   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
003228   ffe5
                                           ;	.line	258; firmware.c	if ( io_read_digital(ARCADE_JUMPER_PORT) == 0 )
00322a   0e04     movlw	0x4                	MOVLW	0x04
00322c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00322e   eccc     call	0x4798, 0           	CALL	_io_read_digital
003230   f023
003232   6e00     movwf	0, 0               	MOVWF	r0x00
003234   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
003236   5000     movf	0, 0, 0             	MOVF	r0x00, W
003238   e103     bnz	0x3240               	BNZ	_00207_DS_
                                           ;	.line	259; firmware.c	arcade_drive_routine();
00323a   ec6f     call	0x66de, 0           	CALL	_arcade_drive_routine
00323c   f033
00323e   d002     bra	0x3244               	BRA	_00208_DS_
                                           _00207_DS_:
                                           ;	.line	261; firmware.c	tank_drive_routine();
003240   ec47     call	0x788e, 0           	CALL	_tank_drive_routine
003242   f03c
                                           _00208_DS_:
                                           ;	.line	263; firmware.c	controller_submit_data(NO_WAIT);
003244   0e00     movlw	0                  	MOVLW	0x00
003246   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003248   ecf8     call	0x5df0, 0           	CALL	_controller_submit_data
00324a   f02e
00324c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	265; firmware.c	if(sonar_read(SONAR_DOWN_SENSOR_INT) > 15)
00324e   0e01     movlw	0x1                	MOVLW	0x01
003250   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003252   ec7a     call	0x2ef4, 0           	CALL	_sonar_read
003254   f017
003256   6e00     movwf	0, 0               	MOVWF	r0x00
003258   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00325a   f001
00325c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00325e   0e00     movlw	0                  	MOVLW	0x00
003260   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
003262   e102     bnz	0x3268               	BNZ	_00221_DS_
003264   0e10     movlw	0x10               	MOVLW	0x10
003266   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00221_DS_:
003268   e302     bnc	0x326e               	BNC	_00210_DS_
                                           ;	.line	267; firmware.c	cliff_avoidance();
00326a   ece7     call	0x75ce, 0           	CALL	_cliff_avoidance
00326c   f03a
                                           _00210_DS_:
                                           ;	.line	276; firmware.c	elapsed_time = SYSTEM_TIMER_SECONDS();
00326e   ec8e     call	0x511c, 0           	CALL	_timer0_read32
003270   f028
003272   6e00     movwf	0, 0               	MOVWF	r0x00
003274   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
003276   f001
003278   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00327a   f002
00327c   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
00327e   f003
003280   a6d5     btfss	0xd5, 0x3, 0       	BTFSS	_T0CON, 3
003282   d004     bra	0x328c               	BRA	_00215_DS_
003284   0e01     movlw	0x1                	MOVLW	0x01
003286   6e04     movwf	0x4, 0             	MOVWF	r0x04
003288   6a05     clrf	0x5, 0              	CLRF	r0x05
00328a   d00f     bra	0x32aa               	BRA	_00216_DS_
                                           _00215_DS_:
00328c   0e07     movlw	0x7                	MOVLW	0x07
00328e   14d5     andwf	0xd5, 0, 0         	ANDWF	_T0CON, W
003290   6e06     movwf	0x6, 0             	MOVWF	r0x06
003292   0e02     movlw	0x2                	MOVLW	0x02
003294   6e04     movwf	0x4, 0             	MOVWF	r0x04
003296   0e00     movlw	0                  	MOVLW	0x00
003298   6e05     movwf	0x5, 0             	MOVWF	r0x05
00329a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00329c   e006     bz	0x32aa                	BZ	_00216_DS_
00329e   6ce8     negf	0xe8, 0             	NEGF	WREG
0032a0   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
                                           _00225_DS_:
0032a2   3604     rlcf	0x4, 0x1, 0         	RLCF	r0x04, F
0032a4   3605     rlcf	0x5, 0x1, 0         	RLCF	r0x05, F
0032a6   0f01     addlw	0x1                	ADDLW	0x01
0032a8   e3fc     bnc	0x32a2               	BNC	_00225_DS_
                                           _00216_DS_:
0032aa   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0032ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032ae   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0032b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032b2   0e27     movlw	0x27               	MOVLW	0x27
0032b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032b6   0e10     movlw	0x10               	MOVLW	0x10
0032b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032ba   ec8f     call	0x5b1e, 0           	CALL	__divsint
0032bc   f02d
0032be   6e04     movwf	0x4, 0             	MOVWF	r0x04
0032c0   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
0032c2   f005
0032c4   0e04     movlw	0x4                	MOVLW	0x04
0032c6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0032c8   6ae8     clrf	0xe8, 0             	CLRF	WREG
0032ca   be05     btfsc	0x5, 0x7, 0        	BTFSC	r0x05, 7
0032cc   0eff     movlw	0xff               	MOVLW	0xff
0032ce   6e06     movwf	0x6, 0             	MOVWF	r0x06
                                           ; #	MOVWF	r0x07
                                           ; #	MOVF	r0x07, W
0032d0   6e07     movwf	0x7, 0             	MOVWF	r0x07
0032d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032d4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0032d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032d8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0032da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032dc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0032de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032e0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0032e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032e4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0032e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032e8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0032ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032ec   5000     movf	0, 0, 0             	MOVF	r0x00, W
0032ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032f0   ecf3     call	0x55e6, 0           	CALL	__divulong
0032f2   f02a
0032f4   6e00     movwf	0, 0               	MOVWF	r0x00
0032f6   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0032f8   f001
0032fa   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0032fc   f002
0032fe   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
003300   f003
003302   0e08     movlw	0x8                	MOVLW	0x08
003304   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003306   0e00     movlw	0                  	MOVLW	0x00
003308   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00330a   0e00     movlw	0                  	MOVLW	0x00
00330c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00330e   0e03     movlw	0x3                	MOVLW	0x03
003310   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003312   0ee8     movlw	0xe8               	MOVLW	0xe8
003314   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003316   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003318   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00331a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00331c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00331e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003320   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003322   5000     movf	0, 0, 0             	MOVF	r0x00, W
003324   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003326   ecf3     call	0x55e6, 0           	CALL	__divulong
003328   f02a
00332a   0107     movlb	0x7                	BANKSEL	_rc_routine_elapsed_time_1_1
00332c   6ff0     movwf	0xf0, 0x1          	MOVWF	_rc_routine_elapsed_time_1_1, B
00332e   cff3     movff	0xff3, 0x7f1       	MOVFF	PRODL, (_rc_routine_elapsed_time_1_1 + 1)
003330   f7f1
003332   cff4     movff	0xff4, 0x7f2       	MOVFF	PRODH, (_rc_routine_elapsed_time_1_1 + 2)
003334   f7f2
003336   cfe9     movff	0xfe9, 0x7f3       	MOVFF	FSR0L, (_rc_routine_elapsed_time_1_1 + 3)
003338   f7f3
00333a   0e08     movlw	0x8                	MOVLW	0x08
00333c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00333e   0107     movlb	0x7                	BANKSEL	(_rc_routine_elapsed_time_1_1 + 3)
                                           ;	.line	279; firmware.c	if ( elapsed_time > old_time )
003340   51f3     movf	0xf3, 0, 0x1        	MOVF	(_rc_routine_elapsed_time_1_1 + 3), W, B
003342   0107     movlb	0x7                	BANKSEL	(_rc_routine_old_time_1_1 + 3)
003344   5d19     subwf	0x19, 0, 0x1       	SUBWF	(_rc_routine_old_time_1_1 + 3), W, B
003346   e10e     bnz	0x3364               	BNZ	_00226_DS_
003348   0107     movlb	0x7                	BANKSEL	(_rc_routine_elapsed_time_1_1 + 2)
00334a   51f2     movf	0xf2, 0, 0x1        	MOVF	(_rc_routine_elapsed_time_1_1 + 2), W, B
00334c   0107     movlb	0x7                	BANKSEL	(_rc_routine_old_time_1_1 + 2)
00334e   5d18     subwf	0x18, 0, 0x1       	SUBWF	(_rc_routine_old_time_1_1 + 2), W, B
003350   e109     bnz	0x3364               	BNZ	_00226_DS_
003352   0107     movlb	0x7                	BANKSEL	(_rc_routine_elapsed_time_1_1 + 1)
003354   51f1     movf	0xf1, 0, 0x1        	MOVF	(_rc_routine_elapsed_time_1_1 + 1), W, B
003356   0107     movlb	0x7                	BANKSEL	(_rc_routine_old_time_1_1 + 1)
003358   5d17     subwf	0x17, 0, 0x1       	SUBWF	(_rc_routine_old_time_1_1 + 1), W, B
00335a   e104     bnz	0x3364               	BNZ	_00226_DS_
00335c   0107     movlb	0x7                	BANKSEL	_rc_routine_elapsed_time_1_1
00335e   51f0     movf	0xf0, 0, 0x1        	MOVF	_rc_routine_elapsed_time_1_1, W, B
003360   0107     movlb	0x7                	BANKSEL	_rc_routine_old_time_1_1
003362   5d16     subwf	0x16, 0, 0x1       	SUBWF	_rc_routine_old_time_1_1, W, B
                                           _00226_DS_:
003364   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003366   d083     bra	0x346e               	BRA	_00213_DS_
                                           ;	.line	281; firmware.c	old_time = elapsed_time;
003368   c7f0     movff	0x7f0, 0x716       	MOVFF	_rc_routine_elapsed_time_1_1, _rc_routine_old_time_1_1
00336a   f716
00336c   c7f1     movff	0x7f1, 0x717       	MOVFF	(_rc_routine_elapsed_time_1_1 + 1), (_rc_routine_old_time_1_1 + 1)
00336e   f717
003370   c7f2     movff	0x7f2, 0x718       	MOVFF	(_rc_routine_elapsed_time_1_1 + 2), (_rc_routine_old_time_1_1 + 2)
003372   f718
003374   c7f3     movff	0x7f3, 0x719       	MOVFF	(_rc_routine_elapsed_time_1_1 + 3), (_rc_routine_old_time_1_1 + 3)
003376   f719
                                           ;	.line	289; firmware.c	DPRINTF("ET: %ld  RC: %d %d %d %d %d %d %d  Jumper: %d\n",
003378   0e04     movlw	0x4                	MOVLW	0x04
00337a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00337c   eccc     call	0x4798, 0           	CALL	_io_read_digital
00337e   f023
003380   6e00     movwf	0, 0               	MOVWF	r0x00
003382   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
003384   6a01     clrf	0x1, 0              	CLRF	r0x01
003386   be00     btfsc	0, 0x7, 0          	BTFSC	r0x00, 7
003388   6801     setf	0x1, 0              	SETF	r0x01
00338a   0e06     movlw	0x6                	MOVLW	0x06
00338c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00338e   ec80     call	0x5700, 0           	CALL	_rc_read_data
003390   f02b
003392   6e02     movwf	0x2, 0             	MOVWF	r0x02
003394   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
003396   6a03     clrf	0x3, 0              	CLRF	r0x03
003398   be02     btfsc	0x2, 0x7, 0        	BTFSC	r0x02, 7
00339a   6803     setf	0x3, 0              	SETF	r0x03
00339c   0e05     movlw	0x5                	MOVLW	0x05
00339e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0033a0   ec80     call	0x5700, 0           	CALL	_rc_read_data
0033a2   f02b
0033a4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0033a6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0033a8   6a05     clrf	0x5, 0              	CLRF	r0x05
0033aa   be04     btfsc	0x4, 0x7, 0        	BTFSC	r0x04, 7
0033ac   6805     setf	0x5, 0              	SETF	r0x05
0033ae   0e04     movlw	0x4                	MOVLW	0x04
0033b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0033b2   ec80     call	0x5700, 0           	CALL	_rc_read_data
0033b4   f02b
0033b6   6e06     movwf	0x6, 0             	MOVWF	r0x06
0033b8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0033ba   6a07     clrf	0x7, 0              	CLRF	r0x07
0033bc   be06     btfsc	0x6, 0x7, 0        	BTFSC	r0x06, 7
0033be   6807     setf	0x7, 0              	SETF	r0x07
0033c0   0e03     movlw	0x3                	MOVLW	0x03
0033c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0033c4   ec80     call	0x5700, 0           	CALL	_rc_read_data
0033c6   f02b
0033c8   6e08     movwf	0x8, 0             	MOVWF	r0x08
0033ca   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0033cc   6a09     clrf	0x9, 0              	CLRF	r0x09
0033ce   be08     btfsc	0x8, 0x7, 0        	BTFSC	r0x08, 7
0033d0   6809     setf	0x9, 0              	SETF	r0x09
0033d2   0e02     movlw	0x2                	MOVLW	0x02
0033d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0033d6   ec80     call	0x5700, 0           	CALL	_rc_read_data
0033d8   f02b
0033da   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0033dc   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0033de   6a0b     clrf	0xb, 0              	CLRF	r0x0b
0033e0   be0a     btfsc	0xa, 0x7, 0        	BTFSC	r0x0a, 7
0033e2   680b     setf	0xb, 0              	SETF	r0x0b
0033e4   0e01     movlw	0x1                	MOVLW	0x01
0033e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0033e8   ec80     call	0x5700, 0           	CALL	_rc_read_data
0033ea   f02b
0033ec   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0033ee   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0033f0   6a0d     clrf	0xd, 0              	CLRF	r0x0d
0033f2   be0c     btfsc	0xc, 0x7, 0        	BTFSC	r0x0c, 7
0033f4   680d     setf	0xd, 0              	SETF	r0x0d
0033f6   ec61     call	0x72c2, 0           	CALL	_rc_read_status
0033f8   f039
0033fa   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
0033fc   6a0f     clrf	0xf, 0              	CLRF	r0x0f
0033fe   be0e     btfsc	0xe, 0x7, 0        	BTFSC	r0x0e, 7
003400   680f     setf	0xf, 0              	SETF	r0x0f
003402   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003404   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003406   5000     movf	0, 0, 0             	MOVF	r0x00, W
003408   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00340a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00340c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00340e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003410   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003412   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003414   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003416   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003418   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00341a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00341c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00341e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003420   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003422   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003424   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003426   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003428   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00342a   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
00342c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00342e   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
003430   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003432   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
003434   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003436   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
003438   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00343a   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
00343c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00343e   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
003440   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003442   0107     movlb	0x7                	BANKSEL	(_rc_routine_elapsed_time_1_1 + 3)
003444   51f3     movf	0xf3, 0, 0x1        	MOVF	(_rc_routine_elapsed_time_1_1 + 3), W, B
003446   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003448   0107     movlb	0x7                	BANKSEL	(_rc_routine_elapsed_time_1_1 + 2)
00344a   51f2     movf	0xf2, 0, 0x1        	MOVF	(_rc_routine_elapsed_time_1_1 + 2), W, B
00344c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00344e   0107     movlb	0x7                	BANKSEL	(_rc_routine_elapsed_time_1_1 + 1)
003450   51f1     movf	0xf1, 0, 0x1        	MOVF	(_rc_routine_elapsed_time_1_1 + 1), W, B
003452   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003454   0107     movlb	0x7                	BANKSEL	_rc_routine_elapsed_time_1_1
003456   51f0     movf	0xf0, 0, 0x1        	MOVF	_rc_routine_elapsed_time_1_1, W, B
003458   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00345a   0e00     movlw	0                  	MOVLW	UPPER(__str_9)
00345c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00345e   0e39     movlw	0x39               	MOVLW	HIGH(__str_9)
003460   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003462   0e20     movlw	0x20               	MOVLW	LOW(__str_9)
003464   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003466   ecd7     call	0x73ae, 0           	CALL	_printf
003468   f039
00346a   0e17     movlw	0x17               	MOVLW	0x17
00346c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00213_DS_:
00346e   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
003470   f00f
003472   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
003474   f00e
003476   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
003478   f00d
00347a   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
00347c   f00c
00347e   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
003480   f00b
003482   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
003484   f00a
003486   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
003488   f009
00348a   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00348c   f008
00348e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
003490   f007
003492   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
003494   f006
003496   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
003498   f005
00349a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00349c   f004
00349e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0034a0   f003
0034a2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0034a4   f002
0034a6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0034a8   f001
0034aa   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0034ac   f000
0034ae   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0034b0   ffd9
0034b2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_firmware__custom_init	code
                                           _custom_init:
                                           ;	.line	188; firmware.c	void    custom_init(void)
00376c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00376e   ffe5
003770   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003772   ffd9
003774   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003776   ffe5
003778   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00377a   ffe5
00377c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00377e   ffe5
                                           ;	.line	197; firmware.c	rotation_circumference_cm = (PI * TRACK_WIDTH_mm) / 10;
003780   0e3e     movlw	0x3e               	MOVLW	0x3e
003782   0102     movlb	0x2                	BANKSEL	_rotation_circumference_cm
003784   6fcb     movwf	0xcb, 0x1          	MOVWF	_rotation_circumference_cm, B
003786   0102     movlb	0x2                	BANKSEL	(_rotation_circumference_cm + 1)
003788   6bcc     clrf	0xcc, 0x1           	CLRF	(_rotation_circumference_cm + 1), B
                                           ;	.line	198; firmware.c	wheel_circumference_cm = (PI * MEDIUM_WHEEL_DIA_mm) / 10;
00378a   0e2f     movlw	0x2f               	MOVLW	0x2f
00378c   0102     movlb	0x2                	BANKSEL	_wheel_circumference_cm
00378e   6fc9     movwf	0xc9, 0x1          	MOVWF	_wheel_circumference_cm, B
003790   0102     movlb	0x2                	BANKSEL	(_wheel_circumference_cm + 1)
003792   6bca     clrf	0xca, 0x1           	CLRF	(_wheel_circumference_cm + 1), B
                                           ;	.line	199; firmware.c	rotation_deg_per_tick = (360 / 90) * wheel_circumference_cm / rotation_circumference_cm;
003794   0e03     movlw	0x3                	MOVLW	0x03
003796   0102     movlb	0x2                	BANKSEL	_rotation_deg_per_tick
003798   6fc7     movwf	0xc7, 0x1          	MOVWF	_rotation_deg_per_tick, B
00379a   0102     movlb	0x2                	BANKSEL	(_rotation_deg_per_tick + 1)
00379c   6bc8     clrf	0xc8, 0x1           	CLRF	(_rotation_deg_per_tick + 1), B
                                           ;	.line	200; firmware.c	distance_cm_per_15_ticks = 15 * wheel_circumference_cm / 90;
00379e   0e07     movlw	0x7                	MOVLW	0x07
0037a0   0102     movlb	0x2                	BANKSEL	_distance_cm_per_15_ticks
0037a2   6fcd     movwf	0xcd, 0x1          	MOVWF	_distance_cm_per_15_ticks, B
0037a4   0102     movlb	0x2                	BANKSEL	(_distance_cm_per_15_ticks + 1)
0037a6   6bce     clrf	0xce, 0x1           	CLRF	(_distance_cm_per_15_ticks + 1), B
                                           ;	.line	202; firmware.c	printf("wheel circumf: %d, rotation_circumf: %d, degree/tick: %d, cm/15tick %d \n",
0037a8   0e00     movlw	0                  	MOVLW	0x00
0037aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0037ac   0e07     movlw	0x7                	MOVLW	0x07
0037ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0037b0   0e00     movlw	0                  	MOVLW	0x00
0037b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0037b4   0e03     movlw	0x3                	MOVLW	0x03
0037b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0037b8   0e00     movlw	0                  	MOVLW	0x00
0037ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0037bc   0e3e     movlw	0x3e               	MOVLW	0x3e
0037be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0037c0   0e00     movlw	0                  	MOVLW	0x00
0037c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0037c4   0e2f     movlw	0x2f               	MOVLW	0x2f
0037c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0037c8   0e00     movlw	0                  	MOVLW	UPPER(__str_8)
0037ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0037cc   0e38     movlw	0x38               	MOVLW	HIGH(__str_8)
0037ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0037d0   0ed6     movlw	0xd6               	MOVLW	LOW(__str_8)
0037d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0037d4   ecd7     call	0x73ae, 0           	CALL	_printf
0037d6   f039
0037d8   0e0b     movlw	0xb                	MOVLW	0x0b
0037da   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	206; firmware.c	for (c = 1; c <= 15; ++c)
0037dc   0e01     movlw	0x1                	MOVLW	0x01
0037de   6e00     movwf	0, 0               	MOVWF	r0x00
0037e0   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00176_DS_:
0037e2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0037e4   0f80     addlw	0x80               	ADDLW	0x80
0037e6   0f80     addlw	0x80               	ADDLW	0x80
0037e8   e102     bnz	0x37ee               	BNZ	_00199_DS_
0037ea   0e10     movlw	0x10               	MOVLW	0x10
0037ec   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00199_DS_:
0037ee   e20e     bc	0x380c                	BC	_00179_DS_
                                           ;	.line	207; firmware.c	io_set_direction(c, IO_DIRECTION_IN);
0037f0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0037f2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0037f4   0e01     movlw	0x1                	MOVLW	0x01
0037f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0037f8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0037fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0037fc   ec36     call	0x406c, 0           	CALL	_io_set_direction
0037fe   f020
003800   0e02     movlw	0x2                	MOVLW	0x02
003802   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	206; firmware.c	for (c = 1; c <= 15; ++c)
003804   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
003806   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003808   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00380a   d7eb     bra	0x37e2               	BRA	_00176_DS_
                                           _00179_DS_:
                                           ;	.line	213; firmware.c	io_set_analog_port_count(ANALOG_PORTS);
00380c   0e02     movlw	0x2                	MOVLW	0x02
00380e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003810   ec93     call	0x7926, 0           	CALL	_io_set_analog_port_count
003812   f03c
003814   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	217; firmware.c	for (c = 16; c <= 16; ++c)
003816   0e10     movlw	0x10               	MOVLW	0x10
003818   6e00     movwf	0, 0               	MOVWF	r0x00
00381a   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00180_DS_:
00381c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00381e   0f80     addlw	0x80               	ADDLW	0x80
003820   0f80     addlw	0x80               	ADDLW	0x80
003822   e102     bnz	0x3828               	BNZ	_00200_DS_
003824   0e11     movlw	0x11               	MOVLW	0x11
003826   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00200_DS_:
003828   e20e     bc	0x3846                	BC	_00183_DS_
                                           ;	.line	218; firmware.c	io_set_direction(c, IO_DIRECTION_OUT);
00382a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00382c   6e02     movwf	0x2, 0             	MOVWF	r0x02
00382e   0e00     movlw	0                  	MOVLW	0x00
003830   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003832   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003834   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003836   ec36     call	0x406c, 0           	CALL	_io_set_direction
003838   f020
00383a   0e02     movlw	0x2                	MOVLW	0x02
00383c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	217; firmware.c	for (c = 16; c <= 16; ++c)
00383e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
003840   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003842   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
003844   d7eb     bra	0x381c               	BRA	_00180_DS_
                                           _00183_DS_:
                                           ;	.line	221; firmware.c	for (c = 16; c <= 16; ++c)
003846   0e10     movlw	0x10               	MOVLW	0x10
003848   6e00     movwf	0, 0               	MOVWF	r0x00
00384a   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00184_DS_:
00384c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00384e   0f80     addlw	0x80               	ADDLW	0x80
003850   0f80     addlw	0x80               	ADDLW	0x80
003852   e102     bnz	0x3858               	BNZ	_00201_DS_
003854   0e11     movlw	0x11               	MOVLW	0x11
003856   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00201_DS_:
003858   e20e     bc	0x3876                	BC	_00187_DS_
                                           ;	.line	222; firmware.c	io_write_digital(c,0);
00385a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00385c   6e02     movwf	0x2, 0             	MOVWF	r0x02
00385e   0e00     movlw	0                  	MOVLW	0x00
003860   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003862   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003864   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003866   ec1e     call	0x3c3c, 0           	CALL	_io_write_digital
003868   f01e
00386a   0e02     movlw	0x2                	MOVLW	0x02
00386c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	221; firmware.c	for (c = 16; c <= 16; ++c)
00386e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
003870   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003872   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
003874   d7eb     bra	0x384c               	BRA	_00184_DS_
                                           _00187_DS_:
                                           ;	.line	230; firmware.c	sonar_init(SONAR_DOWN_SENSOR_INT,SONAR_DOWN_SENSOR_OUT);
003876   0e10     movlw	0x10               	MOVLW	0x10
003878   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00387a   0e01     movlw	0x1                	MOVLW	0x01
00387c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00387e   ec4b     call	0x6496, 0           	CALL	_sonar_init
003880   f032
003882   0e02     movlw	0x2                	MOVLW	0x02
003884   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	232; firmware.c	shaft_encoder_enable_std(RIGHT_WHEEL_ENCODER_INT);
003886   0e02     movlw	0x2                	MOVLW	0x02
003888   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00388a   ecd9     call	0x69b2, 0           	CALL	_shaft_encoder_enable_std
00388c   f034
00388e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	233; firmware.c	shaft_encoder_enable_std(LEFT_WHEEL_ENCODER_INT);
003890   0e03     movlw	0x3                	MOVLW	0x03
003892   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003894   ecd9     call	0x69b2, 0           	CALL	_shaft_encoder_enable_std
003896   f034
003898   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	235; firmware.c	controller_print_version();
00389a   ecea     call	0x71d4, 0           	CALL	_controller_print_version
00389c   f038
00389e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0038a0   f002
0038a2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0038a4   f001
0038a6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0038a8   f000
0038aa   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0038ac   ffd9
0038ae   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
0038b0   4642     rlncf	0x42, 0x1, 0       	DB	0x42, 0x46, 0x0a, 0x00
0038b2   000a     tblrd	*-                 
                                           ; ; Starting pCode block
                                           __str_1:
0038b4   4c42     dcfsnz	0x42, 0, 0        	DB	0x42, 0x4c, 0x00
0038b6   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
0038b8   5242     movf	0x42, 0x1, 0        	DB	0x42, 0x52, 0x00
0038ba   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_3:
0038bc   4643     rlncf	0x43, 0x1, 0       	DB	0x43, 0x46, 0x00
0038be   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_4:
0038c0   254c     addwf	0x4c, 0, 0x1       	DB	0x4c, 0x25, 0x64, 0x0a, 0x00
0038c2   0a64     xorlw	0x64               
0038c4   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_5:
0038c6   4455     rlncf	0x55, 0, 0         	DB	0x55, 0x44, 0x3a, 0x20, 0x25, 0x64, 0x0a, 0x00
0038c8   203a     addwfc	0x3a, 0, 0        
0038ca   6425     cpfsgt	0x25, 0           
0038cc   000a     tblrd	*-                 
                                           ; ; Starting pCode block
                                           __str_6:
0038ce   4c45     dcfsnz	0x45, 0, 0        	DB	0x45, 0x4c, 0x00
0038d0   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_7:
0038d2   5245     movf	0x45, 0x1, 0        	DB	0x45, 0x52, 0x00
0038d4   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_8:
0038d6   6877     setf	0x77, 0             	DB	0x77, 0x68, 0x65, 0x65, 0x6c, 0x20, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6d
0038d8   6565     cpfsgt	0x65, 0x1         
0038da   206c     addwfc	0x6c, 0, 0        
0038dc   6963     setf	0x63, 0x1           
0038de   6372     cpfseq	0x72, 0x1         
0038e0   6d75     negf	0x75, 0x1           
0038e2   3a66     swapf	0x66, 0x1, 0       	DB	0x66, 0x3a, 0x20, 0x25, 0x64, 0x2c, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74
0038e4   2520     addwf	0x20, 0, 0x1       
0038e6   2c64     decfsz	0x64, 0, 0        
0038e8   7220     btg	0x20, 0x1, 0         
0038ea   746f     btg	0x6f, 0x2, 0         
0038ec   7461     btg	0x61, 0x2, 0         
0038ee   6f69     movwf	0x69, 0x1          	DB	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6d, 0x66, 0x3a
0038f0   5f6e     subwf	0x6e, 0x1, 0x1     
0038f2   6963     setf	0x63, 0x1           
0038f4   6372     cpfseq	0x72, 0x1         
0038f6   6d75     negf	0x75, 0x1           
0038f8   3a66     swapf	0x66, 0x1, 0       
0038fa   2520     addwf	0x20, 0, 0x1       	DB	0x20, 0x25, 0x64, 0x2c, 0x20, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x2f
0038fc   2c64     decfsz	0x64, 0, 0        
0038fe   6420     cpfsgt	0x20, 0           
003900   6765     tstfsz	0x65, 0x1         
003902   6572     cpfsgt	0x72, 0x1         
003904   2f65     decfsz	0x65, 0x1, 0x1    
003906   6974     setf	0x74, 0x1           	DB	0x74, 0x69, 0x63, 0x6b, 0x3a, 0x20, 0x25, 0x64, 0x2c, 0x20, 0x63, 0x6d
003908   6b63     clrf	0x63, 0x1           
00390a   203a     addwfc	0x3a, 0, 0        
00390c   6425     cpfsgt	0x25, 0           
00390e   202c     addwfc	0x2c, 0, 0        
003910   6d63     negf	0x63, 0x1           
003912   312f     rrcf	0x2f, 0, 0x1        	DB	0x2f, 0x31, 0x35, 0x74, 0x69, 0x63, 0x6b, 0x20, 0x25, 0x64, 0x20, 0x0a
003914   7435     btg	0x35, 0x2, 0         
003916   6369     cpfseq	0x69, 0x1         
003918   206b     addwfc	0x6b, 0, 0        
00391a   6425     cpfsgt	0x25, 0           
00391c   0a20     xorlw	0x20               
00391e   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_9:
003920   5445     subfwb	0x45, 0, 0        	DB	0x45, 0x54, 0x3a, 0x20, 0x25, 0x6c, 0x64, 0x20, 0x20, 0x52, 0x43, 0x3a
003922   203a     addwfc	0x3a, 0, 0        
003924   6c25     negf	0x25, 0             
003926   2064     addwfc	0x64, 0, 0        
003928   5220     movf	0x20, 0x1, 0        
00392a   3a43     swapf	0x43, 0x1, 0       
00392c   2520     addwf	0x20, 0, 0x1       	DB	0x20, 0x25, 0x64, 0x20, 0x25, 0x64, 0x20, 0x25, 0x64, 0x20, 0x25, 0x64
00392e   2064     addwfc	0x64, 0, 0        
003930   6425     cpfsgt	0x25, 0           
003932   2520     addwf	0x20, 0, 0x1       
003934   2064     addwfc	0x64, 0, 0        
003936   6425     cpfsgt	0x25, 0           
003938   2520     addwf	0x20, 0, 0x1       	DB	0x20, 0x25, 0x64, 0x20, 0x25, 0x64, 0x20, 0x25, 0x64, 0x20, 0x20, 0x4a
00393a   2064     addwfc	0x64, 0, 0        
00393c   6425     cpfsgt	0x25, 0           
00393e   2520     addwf	0x20, 0, 0x1       
003940   2064     addwfc	0x64, 0, 0        
003942   4a20     infsnz	0x20, 0x1, 0      
003944   6d75     negf	0x75, 0x1           	DB	0x75, 0x6d, 0x70, 0x65, 0x72, 0x3a, 0x20, 0x25, 0x64, 0x0a, 0x00
003946   6570     cpfsgt	0x70, 0x1         
003948   3a72     swapf	0x72, 0x1, 0       
00394a   2520     addwf	0x20, 0, 0x1       
00394c   0a64     xorlw	0x64               
00394e   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_10:
003950   7453     btg	0x53, 0x2, 0         	DB	0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x75, 0x74
003952   7261     btg	0x61, 0x1, 0         
003954   6974     setf	0x74, 0x1           
003956   676e     tstfsz	0x6e, 0x1         
003958   6120     cpfslt	0x20, 0x1         
00395a   7475     btg	0x75, 0x2, 0         
00395c   6e6f     movwf	0x6f, 0            	DB	0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x20, 0x72, 0x6f, 0x75, 0x74
00395e   6d6f     negf	0x6f, 0x1           
003960   756f     btg	0x6f, 0x2, 0x1       
003962   2073     addwfc	0x73, 0, 0        
003964   6f72     movwf	0x72, 0x1          
003966   7475     btg	0x75, 0x2, 0         
003968   6e69     movwf	0x69, 0            	DB	0x69, 0x6e, 0x65, 0x2e, 0x2e, 0x2e, 0x0a, 0x00
00396a   2e65     decfsz	0x65, 0x1, 0      
00396c   2e2e     decfsz	0x2e, 0x1, 0      
00396e   000a     tblrd	*-                 
                                           ; ; Starting pCode block
                                           __str_11:
003970   6e45     movwf	0x45, 0            	DB	0x45, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x6e
003972   6964     setf	0x64, 0x1           
003974   676e     tstfsz	0x6e, 0x1         
003976   6120     cpfslt	0x20, 0x1         
003978   7475     btg	0x75, 0x2, 0         
00397a   6e6f     movwf	0x6f, 0            
00397c   6d6f     negf	0x6f, 0x1           	DB	0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x20, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e
00397e   756f     btg	0x6f, 0x2, 0x1       
003980   2073     addwfc	0x73, 0, 0        
003982   6f72     movwf	0x72, 0x1          
003984   7475     btg	0x75, 0x2, 0         
003986   6e69     movwf	0x69, 0            
003988   2e65     decfsz	0x65, 0x1, 0      	DB	0x65, 0x2e, 0x2e, 0x2e, 0x0a, 0x00
00398a   2e2e     decfsz	0x2e, 0x1, 0      
00398c   000a     tblrd	*-                 
                                           ; ; Starting pCode block
                                           __str_12:
00398e   0a77     xorlw	0x77               	DB	0x77, 0x0a, 0x00
003990   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_13:
003992   0a73     xorlw	0x73               	DB	0x73, 0x0a, 0x00
003994   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_14:
003996   0a61     xorlw	0x61               	DB	0x61, 0x0a, 0x00
003998   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_15:
00399a   0a64     xorlw	0x64               	DB	0x64, 0x0a, 0x00
00399c   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_16:
00399e   0a62     xorlw	0x62               	DB	0x62, 0x0a, 0x00
0039a0   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_17:
0039a2   6152     cpfslt	0x52, 0x1         	DB	0x52, 0x61, 0x64, 0x69, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f
0039a4   6964     setf	0x64, 0x1           
0039a6   206f     addwfc	0x6f, 0, 0        
0039a8   6f63     movwf	0x63, 0x1          
0039aa   746e     btg	0x6e, 0x2, 0         
0039ac   6f72     movwf	0x72, 0x1          
0039ae   0a6c     xorlw	0x6c               	DB	0x6c, 0x0a, 0x00
0039b0   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_18:
0039b2   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72
0039b4   6972     setf	0x72, 0x1           
0039b6   6c61     negf	0x61, 0             
0039b8   6320     cpfseq	0x20, 0x1         
0039ba   6e6f     movwf	0x6f, 0            
0039bc   7274     btg	0x74, 0x1, 0         
0039be   6c6f     negf	0x6f, 0             	DB	0x6f, 0x6c, 0x0a, 0x00
0039c0   000a     tblrd	*-                 
                                           ; ; Starting pCode block
                                           __str_19:
0039c2   2553     addwf	0x53, 0, 0x1       	DB	0x53, 0x25, 0x64, 0x00
0039c4   0064     dw	0x64  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_20:
0039c6   2548     addwf	0x48, 0, 0x1       	DB	0x48, 0x25, 0x63, 0x25, 0x63, 0x0a, 0x00
0039c8   2563     addwf	0x63, 0, 0x1       
0039ca   0a63     xorlw	0x63               
0039cc   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_21:
0039ce   256c     addwf	0x6c, 0, 0x1       	DB	0x6c, 0x25, 0x63, 0x00
0039d0   0063     dw	0x63  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_22:
0039d2   2572     addwf	0x72, 0, 0x1       	DB	0x72, 0x25, 0x63, 0x00
0039d4   0063     dw	0x63  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_23:
0039d6   6548     cpfsgt	0x48, 0x1         	DB	0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64
0039d8   6c6c     negf	0x6c, 0             
0039da   2c6f     decfsz	0x6f, 0, 0        
0039dc   5720     subfwb	0x20, 0x1, 0x1    
0039de   726f     btg	0x6f, 0x1, 0         
0039e0   646c     cpfsgt	0x6c, 0           
0039e2   0a21     xorlw	0x21               	DB	0x21, 0x0a, 0x00
0039e4   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 4654 (0x122e) bytes ( 3.55%)
                                           ;           	 2327 (0x0917) words
                                           ; udata size:	   32 (0x0020) bytes ( 1.79%)
                                           ; access size:	   16 (0x0010) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.0 #5416 (Feb  3 2010) (UNIX)
                                           ; This file was generated Sat Oct 13 23:44:08 2012
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f8520
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global ___uflags
                                           	global __entry
                                           	global __startup
                                           	global __do_cinit
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _stack
                                           	extern _stack_end
                                           	extern _TBLPTRU
                                           	extern _TBLPTRH
                                           	extern _TBLPTRL
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _TABLAT
                                           	extern _POSTINC0
                                           	extern _POSTDEC0
                                           	extern _main
                                           	extern _cinit
                                           
                                           
                                           	idata
                                           ___uflags	db	0x00
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block
                                           S_crt0iz___entry	code	0X000800
                                           __entry:
000800   effc     goto	0x7bf8              	goto __startup 
000802   f03d
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_crt0iz___do_cinit	code
                                           __do_cinit:
                                           	; TBLPTR = &cinit
006b98   0eb0     movlw	0xb0               	movlw low(_cinit)
006b9a   6ef6     movwf	0xf6, 0            	movwf _TBLPTRL
006b9c   0e7d     movlw	0x7d               	movlw high(_cinit)
006b9e   6ef7     movwf	0xf7, 0            	movwf _TBLPTRH
006ba0   0e00     movlw	0                  	movlw upper(_cinit)
006ba2   6ef8     movwf	0xf8, 0            	movwf _TBLPTRU
                                           	; 0x05 = cinit.num_init
                                           	; movlb 0x07
006ba4   0009     tblrd	*+                 	tblrd*+
006ba6   50f5     movf	0xf5, 0, 0          	movf _TABLAT, w
006ba8   6e05     movwf	0x5, 0             	movwf 0x05
006baa   0009     tblrd	*+                 	tblrd*+
006bac   50f5     movf	0xf5, 0, 0          	movf _TABLAT, w
006bae   6e06     movwf	0x6, 0             	movwf 0x05 +1
                                           	; while (0x05) {
                                           test:
006bb0   e104     bnz	0x6bba               	bnz cont1 ;;done1
006bb2   6705     tstfsz	0x5, 0x1          	tstfsz 0x05, 1
006bb4   d002     bra	0x6bba               	bra cont1
                                           done1:
006bb6   ef19     goto	0x6c32              	goto done
006bb8   f036
                                           cont1:
                                           	; Count down so we only have to look up the data in _cinit once.
                                           	; At this point we know that TBLPTR points to the top of the current
                                           	; entry in _cinit, so we can just start reading the from, to, and
                                           	; size values.
                                           	; read the source address low
006bba   0009     tblrd	*+                 	tblrd*+
006bbc   50f5     movf	0xf5, 0, 0          	movf _TABLAT, w
006bbe   6e00     movwf	0, 0               	movwf 0x00
                                           	; source address high
006bc0   0009     tblrd	*+                 	tblrd*+
006bc2   50f5     movf	0xf5, 0, 0          	movf _TABLAT, w
006bc4   6e01     movwf	0x1, 0             	movwf 0x00 + 1
                                           	; source address upper
006bc6   0009     tblrd	*+                 	tblrd*+
006bc8   50f5     movf	0xf5, 0, 0          	movf _TABLAT, w
006bca   6e02     movwf	0x2, 0             	movwf 0x00 + 2
                                           	; skip a byte since it is stored as a 32bit int
006bcc   0009     tblrd	*+                 	tblrd*+
                                           	; read the destination address directly into FSR0
                                           	; destination address low
006bce   0009     tblrd	*+                 	tblrd*+
006bd0   50f5     movf	0xf5, 0, 0          	movf _TABLAT, w
006bd2   6ee9     movwf	0xe9, 0            	movwf _FSR0L
                                           	; destination address high
006bd4   0009     tblrd	*+                 	tblrd*+
006bd6   50f5     movf	0xf5, 0, 0          	movf _TABLAT, w
006bd8   6eea     movwf	0xea, 0            	movwf _FSR0H
                                           	; skip two bytes since it is stored as a 32bit int
006bda   0009     tblrd	*+                 	tblrd*+
006bdc   0009     tblrd	*+                 	tblrd*+
                                           	; read the size of data to transfer to destination address
006bde   0009     tblrd	*+                 	tblrd*+
006be0   50f5     movf	0xf5, 0, 0          	movf _TABLAT, w
006be2   6e03     movwf	0x3, 0             	movwf 0x03
006be4   0009     tblrd	*+                 	tblrd*+
006be6   50f5     movf	0xf5, 0, 0          	movf _TABLAT, w
006be8   6e04     movwf	0x4, 0             	movwf 0x03 +1
                                           	; skip two bytes since it is stored as a 32bit int
006bea   0009     tblrd	*+                 	tblrd*+
006bec   0009     tblrd	*+                 	tblrd*+
                                           	; 0x00 = 0x07 ->from;
                                           	; FSR0 = 0x07 ->to;
                                           	; 0x03 = (unsigned short) 0x07 ->size;
                                           	; the table pointer now points to the next entry. Save it
                                           	; off since we will be using the table pointer to do the copying
                                           	; for the entry
                                           	; 0x07 = TBLPTR
006bee   cff6     movff	0xff6, 0x7         	movff _TBLPTRL, 0x07
006bf0   f007
006bf2   cff7     movff	0xff7, 0x8         	movff _TBLPTRH, 0x07 + 1
006bf4   f008
006bf6   cff8     movff	0xff8, 0x9         	movff _TBLPTRU, 0x07 + 2
006bf8   f009
                                           	; now assign the source address to the table pointer
                                           	; TBLPTR = 0x00
006bfa   c000     movff	0, 0xff6           	movff 0x00, _TBLPTRL
006bfc   fff6
006bfe   c001     movff	0x1, 0xff7         	movff 0x00 + 1, _TBLPTRH
006c00   fff7
006c02   c002     movff	0x2, 0xff8         	movff 0x00 + 2, _TBLPTRU
006c04   fff8
                                           	; do the copy loop
                                           	; determine if we have any more bytes to copy
                                           	; movlb 0x03
006c06   5003     movf	0x3, 0, 0           	movf 0x03, w
                                           copy_loop:
006c08   e102     bnz	0x6c0e               	bnz copy_one_byte ; copy_one_byte
006c0a   5004     movf	0x4, 0, 0           	movf 0x03 + 1, w
006c0c   e007     bz	0x6c1c                	bz done_copying
                                           copy_one_byte:
006c0e   0009     tblrd	*+                 	tblrd*+
006c10   50f5     movf	0xf5, 0, 0          	movf _TABLAT, w
006c12   6eee     movwf	0xee, 0            	movwf _POSTINC0
                                           	; decrement byte counter
006c14   0603     decf	0x3, 0x1, 0         	decf 0x03, f
006c16   e2f8     bc	0x6c08                	bc copy_loop ; copy_loop
006c18   0604     decf	0x4, 0x1, 0         	decf 0x03 + 1, f
006c1a   d7f9     bra	0x6c0e               	bra copy_one_byte
                                           done_copying:
                                           	; restore the table pointer for the next entry
                                           	; TBLPTR = 0x07
006c1c   c007     movff	0x7, 0xff6         	movff 0x07, _TBLPTRL
006c1e   fff6
006c20   c008     movff	0x8, 0xff7         	movff 0x07 + 1, _TBLPTRH
006c22   fff7
006c24   c009     movff	0x9, 0xff8         	movff 0x07 + 2, _TBLPTRU
006c26   fff8
006c28   0605     decf	0x5, 0x1, 0         	decf 0x05, f
006c2a   e201     bc	0x6c2e                	bc do_next
006c2c   0606     decf	0x6, 0x1, 0         	decf 0x05 + 1, f
                                           do_next:
                                           	; next entry...
                                           	; _do_cinit_curr_entry--;
006c2e   efd8     goto	0x6bb0              	goto test;
006c30   f035
                                           	; emit done label
                                           done:
006c32   0012     return	0                 	return
                                           	
                                           ; ; Starting pCode block
                                           S_crt0iz___startup	code
                                           __startup:
007bf8   ee11     lfsr	0x1, 0x1ff          	lfsr 1, _stack_end
007bfa   f0ff
007bfc   ee21     lfsr	0x2, 0x1ff          	lfsr 2, _stack_end
007bfe   f0ff
007c00   6af8     clrf	0xf8, 0             	clrf _TBLPTRU, 0
007c02   8ea6     bsf	0xa6, 0x7, 0         	bsf 0xa6, 7, 0
007c04   9ca6     bcf	0xa6, 0x6, 0         	bcf 0xa6, 6, 0
                                           	
                                           	; movlw 0xff
                                           	; movwf _FSR0L, 0
007c06   68e9     setf	0xe9, 0             	setf _FSR0L
007c08   0e0e     movlw	0xe                	movlw 0x0e
007c0a   6eea     movwf	0xea, 0            	movwf _FSR0H, 0
                                           	; movlw 1
                                           	; movwf 0x00, 0
007c0c   6800     setf	0, 0                	setf 0x00
007c0e   0e00     movlw	0                  	movlw 0x00
                                           clear_loop:
007c10   6aed     clrf	0xed, 0             	clrf _POSTDEC0
007c12   5000     movf	0, 0, 0             	movf 0x00, w
007c14   e1fd     bnz	0x7c10               	bnz clear_loop
                                           	
                                           ;	.line	112; crt0iz.c	_do_cinit();
007c16   eccc     call	0x6b98, 0           	CALL	__do_cinit
007c18   f035
                                           ;	.line	115; crt0iz.c	main();
007c1a   ecf7     call	0x2bee, 0           	CALL	_main
007c1c   f015
                                           _00110_DS_:
                                           ;	.line	119; crt0iz.c	goto loop;
007c1e   d7ff     bra	0x7c1e               	BRA	_00110_DS_
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  276 (0x0114) bytes ( 0.21%)
                                           ;           	  138 (0x008a) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
